#/usr/bin/python
#Author: Patrick Shapard @HPE,
#created: 1/05/2022
#updated: 1/05/2022
#This module is to be used for (OV 6.30) release with synergy hardware.


import requests.packages.urllib3
requests.packages.urllib3.disable_warnings()
import sys
import os
import logging
import requests
import json
import paramiko
import time
import subprocess
import tarfile

__author__ = "Patrick Shapard, patrick.shapard@hpe.com"
__version__ = "3800"

api = "3800"
username = os.environ['USERNAME']
tor_pw = os.environ['TOR_PW']
user = os.environ['USER']
tor_un = os.environ['TOR_UN']
ov_pw = os.environ['OV_PW']
old_pw = os.environ['OLD_PW']
cim_pw = os.environ['CIM_PW']




class PortMonitor(object):

    def ConfigPortMonitorBiDir(self, ip, api, auth, li_uri, ul_port_uri, dl_port_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/port-monitor" %(ip, li_uri)
        payload = "{\r\n    \"analyzerPort\": {\r\n        \"portUri\": \"%s\",\r\n        \"portMonitorConfigInfo\": \"AnalyzerPort\"\r\n    },\r\n    \"enablePortMonitor\": true,\r\n    \"type\": \"port-monitorV1\",\r\n    \"monitoredPorts\": [\r\n        {\r\n            \"portUri\":  \"%s\",\r\n            \"portMonitorConfigInfo\": \"MonitoredBoth\"\r\n        }\r\n    ]\r\n}" %(ul_port_uri,dl_port_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
    
    def ConfigPortMonitorFromServer(self, ip, api, auth, li_uri, ul_port_uri, dl_port_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/port-monitor" %(ip, li_uri)
        payload = "{\r\n    \"analyzerPort\": {\r\n        \"portUri\": \"%s\",\r\n        \"portMonitorConfigInfo\": \"AnalyzerPort\"\r\n    },\r\n    \"enablePortMonitor\": true,\r\n    \"type\": \"port-monitorV1\",\r\n    \"monitoredPorts\": [\r\n        {\r\n            \"portUri\":  \"%s\",\r\n            \"portMonitorConfigInfo\": \"MonitoredFromServer\"\r\n        }\r\n    ]\r\n}" %(ul_port_uri,dl_port_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
    
    def ConfigPortMonitorToServer(self, ip, api, auth, li_uri, ul_port_uri, dl_port_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/port-monitor" %(ip, li_uri)
        payload = "{\r\n    \"analyzerPort\": {\r\n        \"portUri\": \"%s\",\r\n        \"portMonitorConfigInfo\": \"AnalyzerPort\"\r\n    },\r\n    \"enablePortMonitor\": true,\r\n    \"type\": \"port-monitorV1\",\r\n    \"monitoredPorts\": [\r\n        {\r\n            \"portUri\":  \"%s\",\r\n            \"portMonitorConfigInfo\": \"MonitoredToServer\"\r\n        }\r\n    ]\r\n}" %(ul_port_uri,dl_port_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
    
    def DisablePortMonitor(self, ip, api, auth, li_uri, ul_port_uri, dl_port_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/port-monitor" %(ip, li_uri)
        payload = "{\r\n    \"analyzerPort\": {\r\n        \"portUri\": \"%s\",\r\n        \"portMonitorConfigInfo\": \"AnalyzerPort\"\r\n    },\r\n    \"enablePortMonitor\": false,\r\n    \"type\": \"port-monitorV1\",\r\n    \"monitoredPorts\": [\r\n        {\r\n            \"portUri\":  \"%s\",\r\n            \"portMonitorConfigInfo\": \"MonitoredBoth\"\r\n        }\r\n    ]\r\n}" %(ul_port_uri,dl_port_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        
    def GetPortMonitorConfig(self, ip, api, auth, li_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/port-monitor" %(ip, li_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("url: %s" % url)
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
        
    def CheckPortMonitorConfigInfo(self, ip, api, auth, li_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ConfigPortMonitor = PortMonitor()
        PortMonitorStatusList = ConfigPortMonitor.GetPortMonitorConfig(ip, api, auth, li_uri)
        PortMonitorMP = PortMonitorStatusList['monitoredPorts']
        try:
            ConfigInfo = PortMonitorMP[0]['portMonitorConfigInfo']
        except IndexError:
            return "Port Monitor Not Configured"
        else:
            if ConfigInfo == "MonitoredBoth":
                return ConfigInfo
            elif ConfigInfo == "MonitoredFromServer":
                return ConfigInfo
            elif ConfigInfo == "MonitoredToServer":
                return ConfigInfo
            else:
                return ConfigInfo

    def CheckMpStatusLinked(self, ip, api, auth, li_uri):
        ConfigPortMonitor = PortMonitor()
        PortMonitorStatusList = ConfigPortMonitor.GetPortMonitorConfig(ip, api, auth, li_uri)
        PortMonitorMp = PortMonitorStatusList['monitoredPorts']
        for i in range(0,len(PortMonitorMp)):
            PortStatus = PortMonitorMp[i]['portStatus']
        return PortStatus

    def CheckApStatusLinked(self, ip, api, auth, li_uri):
        ConfigPortMonitor = PortMonitor()
        PortMonitorStatusList = ConfigPortMonitor.GetPortMonitorConfig(ip, api, auth, li_uri)
        PortMonitorAp = PortMonitorStatusList['analyzerPort']
        ApStatus = PortMonitorAp['portStatus']
        return ApStatus
        
    def CheckApStatusUnlinked(self, ip, api, auth, li_uri):
        ConfigPortMonitor = PortMonitor()
        PortMonitorStatusList = ConfigPortMonitor.GetPortMonitorConfig(ip, api, auth, li_uri)
        PortMonitorAp = PortMonitorStatusList['analyzerPort']
        ApStatus = PortMonitorAp['portStatus']
        return ApStatus


class OneViewBuildVersion(object):

    def GetOVBuild(self, ip, auth, api):
        ov_inst = OneViewBuildVersion()
        OvBuildList = ov_inst.GetOneView(ip, auth, api)
        OneViewVersion = OvBuildList['softwareVersion']
        return OneViewVersion
    
    def GetOneView(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/appliance/nodeinfo/version" % ip
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))


class LoginCreds(object):
    
    def loginSessions(self, ip, api, username, ov_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/login-sessions" % ip
        payload = "{\"userName\":\"%s\",\"password\":\"%s\"}" % (username, ov_pw)
        headers = {
            'x-api-version': api,
            'content-type': "application/json"
            }
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
        
    def InitialLogin(self, ip, api, ov_pw, old_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/users/changePassword" %ip
        payload = "{\r\n    \"newPassword\" : \"%s\",\r\n    \"oldPassword\" : \"%s\",\r\n    \"userName\" : \"Administrator\"\r\n}\r\n" %(ov_pw, old_pw)
        headers = {
            'x-api-version': api,
            'content-type': "application/json"
            }
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
        
    def LoginToken(self, ip, api, username, ov_pw):
        #Getting authentication token
        login = LoginCreds()
        Authenticate = login.loginSessions(ip, api, username, ov_pw)
        auth = Authenticate['sessionID']
        return auth
    
    def AcceptEULA(self, ip, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/appliance/eula/save" % ip
        payload = "    {\r\n        \"supportAccess\" : \"yes\"\r\n    }"
        headers = {
            'x-api-version': api,
            'content-type': "application/json"
            }
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))


class ServerProfileEthernetFibreChannel(object):

    def CreateServerProfileEagle32(self, ip, auth, api, sp_name, server_hw_uri, enc_grp_uri, fc_net_enc1_bay1_uri,  fc_net_enc1_bay4_uri, fc_net_nitro_bay5_uri, eth_net_vlan10_uri, eth_net_vlan30_uri, eth_net_vlan40_uri, id_1, id_2, id_3, id_4, id_5, id_6):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        querystring = {"force":"ignoreServerHealth"}
        payload="{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n        \"connections\": [{\r\n                \"id\": \"%s\",\r\n                \"name\":\"CARBON_BAY1\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"Physical\",\r\n                \"networkUri\": \"%s\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\":\"CARBON_BAY4\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"Physical\",\r\n                \"networkUri\": \"%s\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\": \"NITRO_BAY5_FC\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"networkUri\": \"%s\",\r\n                \"portId\": \"Mezz 2:2-b\",\r\n                \"macType\": \"Physical\",\r\n                \"wwpnType\": \"Physical\",\r\n                \"requestedMbps\": \"2500\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\": \"NITRO_BAY2_VL10\",\r\n                \"functionType\": \"Ethernet\",\r\n                \"networkUri\": \"%s\",\r\n                \"portId\": \"Mezz 2:1-a\",\r\n                \"macType\": \"Physical\",\r\n                \"wwpnType\": \"Physical\",\r\n                \"requestedMbps\": \"2500\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\": \"NITRO_BAY2_VL30\",\r\n                \"functionType\": \"Ethernet\",\r\n                \"networkUri\": \"%s\",\r\n                \"portId\": \"Mezz 2:1-d\",\r\n                \"macType\": \"Physical\",\r\n                \"wwpnType\": \"Physical\",\r\n                \"requestedMbps\": \"2500\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\": \"NITRO_BAY5_VL40\",\r\n                \"functionType\": \"Ethernet\",\r\n                \"networkUri\": \"%s\",\r\n                \"portId\": \"Mezz 2:2-e\",\r\n                \"macType\": \"Physical\",\r\n                \"wwpnType\": \"Physical\",\r\n                \"requestedMbps\": \"2500\"\r\n            }\r\n        ]\r\n    },\r\n    \"bootMode\": {\r\n        \"manageMode\": true,\r\n        \"mode\": \"UEFI\",\r\n        \"pxeBootPolicy\": \"Auto\",\r\n        \"secureBoot\": \"Disabled\"\r\n    }\r\n}" %(sp_name, server_hw_uri, enc_grp_uri, id_1, fc_net_enc1_bay1_uri, id_2, fc_net_enc1_bay4_uri, id_3, fc_net_nitro_bay5_uri, id_4 , eth_net_vlan10_uri, id_5, eth_net_vlan30_uri, id_6, eth_net_vlan40_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    

    def CreateServerProfileEagle30(self, ip, auth, api, sp_name, server_hw_uri, enc_grp_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_net_nitro_bay2_uri, fc_net_potash_bay6_uri, eth_net_vlan10_uri, eth_net_vlan30_uri, eth_net_vlan40_uri, id_1, id_2, id_3, id_4, id_5, id_6, id_7):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        querystring = {"force":"ignoreServerHealth"}
        payload="{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n        \"connections\": [{\r\n                \"id\": \"%s\",\r\n                \"name\":\"CARBON_BAY1\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"Physical\",\r\n                \"networkUri\": \"%s\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\":\"CARBON_BAY4\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"Physical\",\r\n                \"networkUri\": \"%s\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\": \"NITRO_BAY2_FC\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"networkUri\": \"%s\",\r\n                \"portId\": \"Mezz 2:1-b\",\r\n                \"macType\": \"Physical\",\r\n                \"wwpnType\": \"Physical\",\r\n                \"requestedMbps\": \"2500\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\": \"POTASH_BAY6_FC\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"networkUri\": \"%s\",\r\n                \"portId\": \"Mezz 3:2-b\",\r\n                \"macType\": \"Physical\",\r\n                \"wwpnType\": \"Physical\",\r\n                \"requestedMbps\": \"2500\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\": \"NITRO_BAY2_ETH\",\r\n                \"functionType\": \"Ethernet\",\r\n                \"networkUri\": \"%s\",\r\n                \"portId\": \"Mezz 2:1-a\",\r\n                \"macType\": \"Physical\",\r\n                \"wwpnType\": \"Physical\",\r\n                \"requestedMbps\": \"2500\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\": \"NITRO_BAY5_ETH\",\r\n                \"functionType\": \"Ethernet\",\r\n                \"networkUri\": \"%s\",\r\n                \"portId\": \"Mezz 2:2-a\",\r\n                \"macType\": \"Physical\",\r\n                \"wwpnType\": \"Physical\",\r\n                \"requestedMbps\": \"2500\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\": \"POTASH_BAY6_ETH\",\r\n                \"functionType\": \"Ethernet\",\r\n                \"networkUri\": \"%s\",\r\n                \"portId\": \"Mezz 3:2-a\",\r\n                \"macType\": \"Physical\",\r\n                \"wwpnType\": \"Physical\",\r\n                \"requestedMbps\": \"2500\"\r\n            }\r\n        ]\r\n    },\r\n    \"bootMode\": {\r\n        \"manageMode\": true,\r\n        \"mode\": \"UEFI\",\r\n        \"pxeBootPolicy\": \"Auto\",\r\n        \"secureBoot\": \"Disabled\"\r\n    }\r\n}" %(sp_name, server_hw_uri, enc_grp_uri, id_1, fc_net_enc1_bay1_uri, id_2, fc_net_enc1_bay4_uri, id_3, fc_net_nitro_bay2_uri, id_4 , fc_net_potash_bay6_uri, id_5, eth_net_vlan10_uri, id_6, eth_net_vlan30_uri, id_7, eth_net_vlan40_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    

    def CreateServerProfileEagle136Bay1(self, ip, auth, api, sp_name, server_hw_uri, enc_grp_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_net_potash_bay2_uri, fc_net_potash_bay5_uri, fc_net_nitro_bay3_uri, fc_net_nitro_bay6_uri, id_1, id_2, id_3, id_4, id_5, id_6):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n\t\"type\":\"ServerProfileV12\",\r\n\"name\":\"%s\",\r\n\"serverHardwareUri\":\"%s\",\r\n\"enclosureGroupUri\":\"%s\",\r\n\"description\":\"FIBER CHANNEL PROFILE\",\r\n\"affinity\" : \"Bay\",\r\n\"macType\" : \"Physical\",\r\n\"serialNumberType\" : \"Physical\",\r\n\"wwnType\" : \"Physical\",\r\n\"hideUnusedFlexNics\" : true,\r\n\"connectionSettings\": {\r\n    \"connections\": [\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"CARBON32-PORT-1\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 1:1\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"wwnn\": \"20:00:94:f1:28:9b:d3:04\",\r\n    \"wwpn\": \"10:00:94:f1:28:9b:d3:04\",\r\n    \"requestedMbps\": \"Auto\"\r\n    },\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"CARBON32-PORT-2\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 1:2\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"wwnn\": \"20:00:94:f1:28:9b:d3:05\",\r\n    \"wwpn\": \"10:00:94:f1:28:9b:d3:05\",\r\n    \"requestedMbps\": \"Auto\"\r\n    },\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"POTASH_FC_PORT-1\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 2:1-b\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"wwnn\": \"20:00:70:20:6f:76:b5:60\",\r\n    \"wwpn\": \"10:00:70:20:6f:76:b5:60\",\r\n    \"requestedMbps\": \"2500\"\r\n    },\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"POTASH_FC_PORT-2\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 2:2-b\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"wwnn\": \"20:00:70:20:6f:76:b5:61\",\r\n    \"wwpn\": \"10:00:70:20:6f:76:b5:61\",\r\n    \"requestedMbps\": \"2500\"\r\n    },\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"NITRO_FC_PORT-1\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 3:1-b\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"wwnn\": \"20:00:70:20:6f:76:b5:90\",\r\n    \"wwpn\": \"10:00:70:20:6f:76:b5:90\",\r\n    \"requestedMbps\": \"2500\"\r\n    },\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"NITRO_FC_PORT-2\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 3:2-b\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"wwnn\": \"20:00:70:20:6f:76:b5:91\",\r\n    \"wwpn\": \"10:00:70:20:6f:76:b5:91\",\r\n    \"requestedMbps\": \"2500\"\r\n    }\r\n    ]\r\n    },\r\n    \"bootMode\": {\r\n    \"manageMode\":true,\r\n    \"mode\":\"UEFI\"\r\n    }\r\n}" %(sp_name, server_hw_uri, enc_grp_uri, id_1, fc_net_enc1_bay1_uri, id_2, fc_net_enc1_bay4_uri, id_3, fc_net_potash_bay2_uri, id_4, fc_net_potash_bay5_uri, id_5, fc_net_nitro_bay3_uri, id_6, fc_net_nitro_bay6_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreateServerProfileEagle136Bay7(self, ip, auth, api, sp_name, server_hw_uri, enc_grp_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fcoe_net_potash_bay2_uri, fcoe_net_potash_bay5_uri, fcoe_net_nitro_bay3_uri, fcoe_net_nitro_bay6_uri, id_1, id_2, id_3, id_4, id_5, id_6):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n\t\"type\":\"ServerProfileV12\",\r\n\"name\":\"%s\",\r\n\"serverHardwareUri\":\"%s\",\r\n\"enclosureGroupUri\":\"%s\",\r\n\"description\":\"BFS AND FCOE PROFILE\",\r\n\"affinity\" : \"Bay\",\r\n\"macType\" : \"Physical\",\r\n\"serialNumberType\" : \"Physical\",\r\n\"wwnType\" : \"Physical\",\r\n\"hideUnusedFlexNics\" : true,\r\n\"connectionSettings\": {\r\n    \"connections\": [\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"CARBON32-PORT-1\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 1:1\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"wwnn\": \"20:00:00:00:c9:71:7b:30\",\r\n    \"wwpn\": \"10:00:00:00:c9:71:7b:30\",\r\n    \"requestedMbps\": \"Auto\",\r\n    \"boot\": {\r\n        \"priority\": \"Primary\",\r\n        \"bootVolumeSource\": \"UserDefined\",\r\n        \"targets\": [\r\n            {\r\n            \"arrayWwpn\": \"207000C0FF25B079\",\r\n            \"lun\": \"0\"\r\n            }\r\n        ]\r\n    }\r\n    },\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"CARBON32-PORT-2\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 1:2\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"mac\": \"A2:2D:AC:B0:00:09\",\r\n    \"wwnn\": \"20:00:00:00:c9:71:7b:31\",\r\n    \"wwpn\": \"10:00:00:00:c9:71:7b:31\",\r\n    \"requestedMbps\": \"Auto\",\r\n    \"boot\": {\r\n        \"priority\": \"Secondary\",\r\n        \"bootVolumeSource\": \"UserDefined\",\r\n        \"targets\": [\r\n            {\r\n            \"arrayWwpn\": \"207000C0FF25B079\",\r\n            \"lun\": \"0\"\r\n            }\r\n        ]\r\n    }\r\n    },\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"POTASH_BAY2_FCOE\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 2:1-b\",\r\n    \"macType\": \"UserDefined\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"mac\": \"9C:DC:71:DE:E8:91\",\r\n    \"wwnn\": \"20:00:70:20:6f:76:b5:72\",\r\n    \"wwpn\": \"10:00:70:20:6f:76:b5:72\",\r\n    \"requestedMbps\": \"2500\"\r\n    },\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"POTASH_BAY5_FCOE\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 2:2-b\",\r\n    \"macType\": \"UserDefined\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"mac\": \"9C:DC:71:DE:E8:99\",\r\n    \"wwnn\": \"20:00:70:20:6f:76:b5:73\",\r\n    \"wwpn\": \"10:00:70:20:6f:76:b5:73\",\r\n    \"requestedMbps\": \"2500\"\r\n    },\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"NITRO_BAY3_FCOE\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 3:1-b\",\r\n    \"macType\": \"UserDefined\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"mac\": \"14:02:EC:D2:02:36\",\r\n    \"wwnn\": \"20:00:70:20:6f:76:b5:82\",\r\n    \"wwpn\": \"10:00:70:20:6f:76:b5:82\",\r\n    \"requestedMbps\": \"2500\"\r\n    },\r\n    {\r\n    \"id\": \"%s\",\r\n    \"name\": \"NITRO_BAY6_FCOE\",\r\n    \"functionType\": \"FibreChannel\",\r\n    \"networkUri\": \"%s\",\r\n    \"portId\": \"Mezz 3:2-b\",\r\n    \"macType\": \"UserDefined\",\r\n    \"wwpnType\": \"UserDefined\",\r\n    \"mac\": \"14:02:EC:D2:02:37\",\r\n    \"wwnn\": \"20:00:70:20:6f:76:b5:83\",\r\n    \"wwpn\": \"10:00:70:20:6f:76:b5:83\",\r\n    \"requestedMbps\": \"2500\"\r\n    }\r\n]\r\n},\r\n    \"bootMode\": {\r\n    \"manageMode\":true,\r\n    \"mode\":\"UEFI\"\r\n    }\r\n}" %(sp_name, server_hw_uri, enc_grp_uri, id_1, fc_net_enc1_bay1_uri, id_2, fc_net_enc1_bay4_uri, id_3, fcoe_net_potash_bay2_uri, id_4, fcoe_net_potash_bay5_uri, id_5, fcoe_net_nitro_bay3_uri, id_6, fcoe_net_nitro_bay6_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateServerProfileEnc1(self, ip, auth, api, sp_name, server_hw_uri, enc_grp_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, eth_net_vlan10_uri, eth_net_vlan20_uri, eth_net_vlan30_uri, eth_net_vlan40_uri, id_1, id_2, id_3, id_4, id_5, id_6):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n\t\"type\":\"ServerProfileV12\",\r\n\t\"name\":\"%s\",\r\n\t\"serverHardwareUri\":\"%s\",\r\n\t\"enclosureGroupUri\":\"%s\",\r\n\t\"affinity\" : \"Bay\",\r\n\t\"macType\" : \"Physical\",\r\n\t\"serialNumberType\" : \"Physical\",\r\n\t\"wwnType\" : \"Physical\",\r\n\t\"hideUnusedFlexNics\" : true,\r\n\t\"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"Physical\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"Physical\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-10\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:1-a\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-20\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:2-a\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-30\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:1-c\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-40\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:2-c\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"bootMode\": {\r\n\t\t\"manageMode\": true,\r\n\t\t\"mode\": \"UEFI\",\r\n\t\t\"pxeBootPolicy\": \"Auto\",\r\n\t\t\"secureBoot\": \"Disabled\"\r\n\t}\r\n}"  %(sp_name, server_hw_uri, enc_grp_uri, id_1, fc_net_enc1_bay1_uri, id_2, fc_net_enc1_bay4_uri, id_3, eth_net_vlan10_uri, id_4, eth_net_vlan20_uri, id_5, eth_net_vlan30_uri, id_6, eth_net_vlan40_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreateServerProfileEnc2(self, ip, auth, api, sp_name,server_hw_uri, enc_grp_uri, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, eth_net_vlan10_uri, eth_net_vlan20_uri, eth_net_vlan30_uri, eth_net_vlan40_uri, id_1, id_2, id_3, id_4, id_5, id_6):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n\t\"type\":\"ServerProfileV12\",\r\n\t\"name\":\"%s\",\r\n\t\"serverHardwareUri\":\"%s\",\r\n\t\"enclosureGroupUri\":\"%s\",\r\n\t\"affinity\" : \"Bay\",\r\n\t\"macType\" : \"Physical\",\r\n\t\"serialNumberType\" : \"Physical\",\r\n\t\"wwnType\" : \"Physical\",\r\n\t\"hideUnusedFlexNics\" : true,\r\n\t\"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"Physical\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"Physical\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-10\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:1-a\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-20\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:2-a\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-30\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:1-c\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-40\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:2-c\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"bootMode\": {\r\n\t\t\"manageMode\": true,\r\n\t\t\"mode\": \"UEFI\",\r\n\t\t\"pxeBootPolicy\": \"Auto\",\r\n\t\t\"secureBoot\": \"Disabled\"\r\n\t}\r\n}"  %(sp_name, server_hw_uri, enc_grp_uri, id_1, fc_net_enc2_bay1_uri, id_2, fc_net_enc2_bay4_uri, id_3, eth_net_vlan10_uri, id_4, eth_net_vlan20_uri, id_5, eth_net_vlan30_uri, id_6, eth_net_vlan40_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreateServerProfileEnc3(self, ip, auth, api, sp_name, server_hw_uri, enc_grp_uri, fc_net_enc3_bay1_uri, fc_net_enc3_bay4_uri, eth_net_vlan10_uri, eth_net_vlan20_uri, eth_net_vlan30_uri, eth_net_vlan40_uri, id_1, id_2, id_3, id_4, id_5, id_6):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n\t\"type\":\"ServerProfileV12\",\r\n\t\"name\":\"%s\",\r\n\t\"serverHardwareUri\":\"%s\",\r\n\t\"enclosureGroupUri\":\"%s\",\r\n\t\"affinity\" : \"Bay\",\r\n\t\"macType\" : \"Physical\",\r\n\t\"serialNumberType\" : \"Physical\",\r\n\t\"wwnType\" : \"Physical\",\r\n\t\"hideUnusedFlexNics\" : true,\r\n\t\"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"Physical\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"Physical\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-10\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:1-a\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-20\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:2-a\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-30\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:1-c\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\": \"VLAN-40\",\r\n\t\t\t\t\"functionType\": \"Ethernet\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"portId\": \"Mezz 3:2-c\",\r\n\t\t\t\t\"requestedVFs\": \"0\",\r\n\t\t\t\t\"allocatedVFs\": 0,\r\n\t\t\t\t\"macType\": \"Physical\",\r\n\t\t\t\t\"wwpnType\": \"Physical\",\r\n\t\t\t\t\"requestedMbps\": \"2000\",\r\n\t\t\t\t\"allocatedMbps\": 2000,\r\n\t\t\t\t\"maximumMbps\": 10000,\r\n\t\t\t\t\"ipv4\": null,\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"NotBootable\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"bootMode\": {\r\n\t\t\"manageMode\": true,\r\n\t\t\"mode\": \"UEFI\",\r\n\t\t\"pxeBootPolicy\": \"Auto\",\r\n\t\t\"secureBoot\": \"Disabled\"\r\n\t}\r\n}" %(sp_name, server_hw_uri, enc_grp_uri, id_1, fc_net_enc3_bay1_uri, id_2, fc_net_enc3_bay4_uri, id_3, eth_net_vlan10_uri, id_4, eth_net_vlan20_uri, id_5, eth_net_vlan30_uri, id_6, eth_net_vlan40_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class ServerProfileBfsLunsEthernetICM(object):

    def CreateServerProfileLunsEnc1Bay1(self, ip, auth, api, server_hw_uri, enc_grp_uri, fc_net_enc1_bay1_uri, fc_net_enc2_bay4_uri, id_1, id_2):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"SP-ENC1-POTASH-BAY1\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"POTASH WITH MAPPED LUN\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"fc-conn\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : 2500,\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"fc-conn2\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : 2500,\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n           \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"UEFI\"\r\n        }\r\n}"  %(server_hw_uri, enc_grp_uri, id_1,fc_net_enc1_bay1_uri, id_2, fc_net_enc2_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreateServerProfileLunsEnc1Bay2(self, ip, auth, api, server_hw_uri, enc_grp_uri, fc_net_enc1_bay3_uri, fc_net_enc2_bay6_uri, id_1, id_2):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"SP-ENC1-NITRO-BAY2\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"NITRO WITH MAPPED LUN\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"fc-conn\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : 2500,\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"fc-conn2\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : 2500,\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n           \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"UEFI\"\r\n        }\r\n}"   %(server_hw_uri, enc_grp_uri, id_1, fc_net_enc1_bay3_uri, id_2, fc_net_enc2_bay6_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreateServerProfileBFSEnc1Bay3(self, ip, auth, api, server_hw_uri, enc_grp_uri, fc_net_enc1_bay3_uri, fc_net_enc2_bay6_uri, id_1, id_2, port1_q1_1, port1_q1_2, port2_q2_1, port2_q2_2):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"SP-ENC1-NITRO-BAY3\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"NITRO BOOT FROM SAN\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n        \"connections\": [{\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"networkUri\": \"%s\",\r\n                \"boot\": {\r\n                    \"priority\": \"Primary\",\r\n                    \"bootVolumeSource\" : \"UserDefined\",\r\n                    \"targets\": [\r\n                    {\r\n                        \"arrayWwpn\": \"%s\",\r\n                        \"lun\": \"0\"\r\n                    },\r\n                     {\r\n                         \"arrayWwpn\": \"%s\",\r\n                         \"lun\": \"0\"\r\n                     }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn2\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"networkUri\": \"%s\",\r\n                \"boot\": {\r\n                    \"priority\": \"Secondary\",\r\n                    \"bootVolumeSource\" : \"UserDefined\",\r\n                    \"targets\": [\r\n                    {\r\n                        \"arrayWwpn\": \"%s\",\r\n                        \"lun\": \"0\"\r\n                    },\r\n                     {\r\n                         \"arrayWwpn\": \"%s\",\r\n                         \"lun\": \"0\"\r\n                     }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    },\r\n           \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"UEFI\"\r\n        }\r\n}"  %(server_hw_uri, enc_grp_uri, id_1, fc_net_enc1_bay3_uri, port1_q1_1, port1_q1_2, id_2, fc_net_enc2_bay6_uri, port2_q2_1, port2_q2_2)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreateServerProfileBFSEnc2Bay1(self, ip, auth, api, server_hw_uri, enc_grp_uri, fc_net_enc1_bay1_uri, fc_net_enc2_bay4_uri, id_1, id_2, port1_q1_1, port1_q1_2, port2_q2_1, port2_q2_2):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"SP-ENC2-POTASH-BAY1\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"POTASH BOOT FROM SAN\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n        \"connections\": [{\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"networkUri\": \"%s\",\r\n                \"boot\": {\r\n                    \"priority\": \"Primary\",\r\n                    \"bootVolumeSource\" : \"UserDefined\",\r\n                    \"targets\": [\r\n                    {\r\n                        \"arrayWwpn\": \"%s\",\r\n                        \"lun\": \"0\"\r\n                    },\r\n                     {\r\n                         \"arrayWwpn\": \"%s\",\r\n                         \"lun\": \"0\"\r\n                     }\r\n                ]\r\n            }\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn2\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"networkUri\": \"%s\",\r\n                \"boot\": {\r\n                    \"priority\": \"Secondary\",\r\n                    \"bootVolumeSource\" : \"UserDefined\",\r\n                    \"targets\": [\r\n                    {\r\n                        \"arrayWwpn\": \"%s\",\r\n                        \"lun\": \"0\"\r\n                    },\r\n                     {\r\n                         \"arrayWwpn\": \"%s\",\r\n                         \"lun\": \"0\"\r\n                     }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    },\r\n           \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"UEFI\"\r\n        }\r\n}"  %(server_hw_uri, enc_grp_uri, id_1, fc_net_enc1_bay1_uri, port1_q1_1, port1_q1_2, id_2, fc_net_enc2_bay4_uri, port2_q2_1, port2_q2_2)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreateServerProfileBFSEnc2Bay2(self, ip, auth, api, server_hw_uri, enc_grp_uri, fc_net_enc1_bay3_uri, fc_net_enc2_bay6_uri, id_1, id_2, port1_q1_1, port1_q1_2, port2_q2_1, port2_q2_2):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"SP-ENC2-NITRO-BAY2\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"NITRO BOOT FROM SAN\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n        \"connections\": [{\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"networkUri\": \"%s\",\r\n                \"boot\": {\r\n                    \"priority\": \"Primary\",\r\n                    \"bootVolumeSource\" : \"UserDefined\",\r\n                    \"targets\": [\r\n                    {\r\n                        \"arrayWwpn\": \"%s\",\r\n                        \"lun\": \"0\"\r\n                    },\r\n                    {\r\n                         \"arrayWwpn\": \"%s\",\r\n                         \"lun\": \"0\"\r\n                    }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn2\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"networkUri\": \"%s\",\r\n                \"boot\": {\r\n                    \"priority\": \"Secondary\",\r\n                    \"bootVolumeSource\" : \"UserDefined\",\r\n                    \"targets\": [\r\n                    {\r\n                        \"arrayWwpn\": \"%s\",\r\n                        \"lun\": \"0\"\r\n                    },\r\n                    {\r\n                         \"arrayWwpn\": \"%s\",\r\n                         \"lun\": \"0\"\r\n                    }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    },\r\n           \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"UEFI\"\r\n        }\r\n}\r\n"   %(server_hw_uri, enc_grp_uri, id_1, fc_net_enc1_bay3_uri, port1_q1_1, port1_q1_2, id_2, fc_net_enc2_bay6_uri, port2_q2_1, port2_q2_2)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
        
    def CreateServerProfileLunsEnc2Bay3(self, ip, auth, api, server_hw_uri, enc_grp_uri, fc_net_enc1_bay1_uri, fc_net_enc2_bay4_uri, id_1, id_2):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"SP-ENC2-POTASH-BAY3\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"POTASH WITH MAPPED LUN\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"fc-conn\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : 2500,\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"fc-conn2\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : 2500,\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n           \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"UEFI\"\r\n        }\r\n}"  %(server_hw_uri, enc_grp_uri, id_1,fc_net_enc1_bay1_uri, id_2, fc_net_enc2_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class ServerProfileBfsLunsNewDTO(object):

    def CreateServerProfileBootFromSAN(self, ip, auth, api, sp_name, uri, enc_grp_uri, sp_descr, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, id_1, id_2, wwnn1, wwpn1, array_wwpn1, wwnn2, wwpn2, array_wwpn2, mode):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"Primary\",\r\n\t\t\t\t\t\"bootVolumeSource\": \"UserDefined\",\r\n\t\t\t\t\t\"targets\": [{\r\n\t\t\t\t\t\t\"arrayWwpn\": \"%s\",\r\n\t\t\t\t\t\t\"lun\": \"0\"\r\n\t\t\t\t\t}]\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"Secondary\",\r\n\t\t\t\t\t\"bootVolumeSource\": \"UserDefined\",\r\n\t\t\t\t\t\"targets\": [{\r\n\t\t\t\t\t\t\"arrayWwpn\": \"%s\",\r\n\t\t\t\t\t\t\"lun\": \"0\"\r\n\t\t\t\t\t}]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t       \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        }\r\n        \r\n\t\r\n}\r\n"  %(sp_name, uri, enc_grp_uri, sp_descr, id_1, wwnn1, wwpn1, fc_net_enc1_bay1_uri, array_wwpn1, id_2, wwnn2, wwpn2, fc_net_enc1_bay4_uri, array_wwpn2, mode)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateServerProfileLuns(self, ip, auth, api, sp_name, uri, enc_grp_uri, sp_descr, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, id_1, id_2, wwnn1, wwpn1, wwnn2, wwpn2, mode):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\r\n\t       \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        }\r\n        \r\n\t\r\n}"  %(sp_name, uri, enc_grp_uri, sp_descr, id_1, wwnn1, wwpn1, fc_net_enc1_bay1_uri, id_2, wwnn2, wwpn2, fc_net_enc1_bay4_uri, mode)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateServerProfileBootFromSANEnc2(self, ip, auth, api, sp_name, uri, enc_grp_uri, sp_descr, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, id_1, id_2, wwnn1, wwpn1, array_wwpn1, wwnn2, wwpn2, array_wwpn2, mode):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"Primary\",\r\n\t\t\t\t\t\"bootVolumeSource\": \"UserDefined\",\r\n\t\t\t\t\t\"targets\": [{\r\n\t\t\t\t\t\t\"arrayWwpn\": \"%s\",\r\n\t\t\t\t\t\t\"lun\": \"0\"\r\n\t\t\t\t\t}]\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"Secondary\",\r\n\t\t\t\t\t\"bootVolumeSource\": \"UserDefined\",\r\n\t\t\t\t\t\"targets\": [{\r\n\t\t\t\t\t\t\"arrayWwpn\": \"%s\",\r\n\t\t\t\t\t\t\"lun\": \"0\"\r\n\t\t\t\t\t}]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t       \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        }\r\n        \r\n\t\r\n}\r\n"  %(sp_name, uri, enc_grp_uri, sp_descr, id_1, wwnn1, wwpn1, fc_net_enc2_bay1_uri, array_wwpn1, id_2, wwnn2, wwpn2, fc_net_enc2_bay4_uri, array_wwpn2, mode) 
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        logging.debug("payload: %s" % payload)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreateServerProfileLunsEnc2(self, ip, auth, api, sp_name, uri, enc_grp_uri, sp_descr, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, id_1, id_2, wwnn1, wwpn1, wwnn2, wwpn2, mode):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" %ip
        
        querystring = {"force":"ignoreServerHealth"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\r\n\t       \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        }\r\n        \r\n\t\r\n}"  %(sp_name, uri, enc_grp_uri, sp_descr, id_1, wwnn1, wwpn1, fc_net_enc2_bay1_uri, id_2, wwnn2, wwpn2, fc_net_enc2_bay4_uri, mode)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        logging.debug("payload: %s" % payload)
        response = requests.request("POST", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class UpdateServerProfileBfsLunsNewDTO(object):

    def UpdateServerProfileBootFromSAN(self, ip, auth, api, sp_name, sp_uri, uri, enc_grp_uri, sp_descr, requested_bw, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, id_1, id_2, wwnn1, wwpn1, array_wwpn1, wwnn2, wwpn2, array_wwpn2, mode, etag):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, sp_uri)
        querystring = {"ignoreServerHealth":"true"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : \"%s\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"Primary\",\r\n\t\t\t\t\t\"bootVolumeSource\": \"UserDefined\",\r\n\t\t\t\t\t\"targets\": [{\r\n\t\t\t\t\t\t\"arrayWwpn\": \"%s\",\r\n\t\t\t\t\t\t\"lun\": \"0\"\r\n\t\t\t\t\t}]\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : \"%s\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"Secondary\",\r\n\t\t\t\t\t\"bootVolumeSource\": \"UserDefined\",\r\n\t\t\t\t\t\"targets\": [{\r\n\t\t\t\t\t\t\"arrayWwpn\": \"%s\",\r\n\t\t\t\t\t\t\"lun\": \"0\"\r\n\t\t\t\t\t}]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t       \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        },\r\n        \r\n\t\"eTag\": \"%s\"\r\n}"  %(sp_name, uri, enc_grp_uri, sp_descr, id_1, requested_bw, wwnn1, wwpn1, fc_net_enc1_bay1_uri, array_wwpn1, id_2, requested_bw, wwnn2, wwpn2, fc_net_enc1_bay4_uri, array_wwpn2, mode, etag)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        logging.debug("payload: %s" % payload)
        response = requests.request("PUT", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def UpdateServerProfileLuns(self, ip, auth, api, sp_name, sp_uri, uri, enc_grp_uri, sp_descr, requested_bw, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, id_1, id_2, wwnn1, wwpn1, wwnn2, wwpn2, mode, etag):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, sp_uri)
        querystring = {"ignoreServerHealth":"true"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : \"%s\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : \"%s\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\r\n\t       \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        },\r\n        \r\n\t\"eTag\": \"%s\"\r\n}"  %(sp_name, uri, enc_grp_uri, sp_descr, id_1, requested_bw, wwnn1, wwpn1 ,fc_net_enc1_bay1_uri, id_2, requested_bw, wwnn2, wwpn2, fc_net_enc1_bay4_uri, mode, etag)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        logging.debug("payload: %s" % payload)
        response = requests.request("PUT", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def UpdateServerProfileBootFromSANEnc2(self, ip, auth, api, sp_name, sp_uri, uri, enc_grp_uri, sp_descr, requested_bw, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, id_1, id_2, wwnn1, wwpn1, array_wwpn1, wwnn2, wwpn2, array_wwpn2, mode, etag):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, sp_uri)
        querystring = {"ignoreServerHealth":"true"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : \"%s\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"Primary\",\r\n\t\t\t\t\t\"bootVolumeSource\": \"UserDefined\",\r\n\t\t\t\t\t\"targets\": [{\r\n\t\t\t\t\t\t\"arrayWwpn\": \"%s\",\r\n\t\t\t\t\t\t\"lun\": \"0\"\r\n\t\t\t\t\t}]\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : \"%s\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\",\r\n\t\t\t\t\"boot\": {\r\n\t\t\t\t\t\"priority\": \"Secondary\",\r\n\t\t\t\t\t\"bootVolumeSource\": \"UserDefined\",\r\n\t\t\t\t\t\"targets\": [{\r\n\t\t\t\t\t\t\"arrayWwpn\": \"%s\",\r\n\t\t\t\t\t\t\"lun\": \"0\"\r\n\t\t\t\t\t}]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t       \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        },\r\n        \r\n\t\"eTag\": \"%s\"\r\n}"  %(sp_name, uri, enc_grp_uri, sp_descr, id_1, requested_bw, wwnn1, wwpn1, fc_net_enc2_bay1_uri, array_wwpn1, id_2, requested_bw, wwnn2, wwpn2, fc_net_enc2_bay4_uri, array_wwpn2, mode, etag)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        logging.debug("payload: %s" % payload)
        response = requests.request("PUT", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def UpdateServerProfileLunsEnc2(self, ip, auth, api, sp_name, sp_uri, uri, enc_grp_uri, sp_descr, requested_bw, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, id_1, id_2, wwnn1, wwpn1, wwnn2, wwpn2, mode, etag):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, sp_uri)
        querystring = {"ignoreServerHealth":"true"}
        payload = "{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"connectionSettings\": {\r\n\t\t\"connections\": [{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY1\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : \"%s\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t\t\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"id\": \"%s\",\r\n\t\t\t\t\"name\":\"BAY4\",\r\n\t\t\t\t\"functionType\": \"FibreChannel\",\r\n\t\t\t\t\"portId\": \"Auto\",\r\n\t\t\t\t\"requestedMbps\" : \"%s\",\r\n\t\t\t\t\"wwpnType\":\"UserDefined\",\r\n\t\t\t\t\"wwnn\":\"%s\",\r\n\t\t\t\t\"wwpn\":\"%s\",\r\n\t\t\t\t\"networkUri\": \"%s\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\r\n\t       \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        },\r\n        \r\n\t\"eTag\": \"%s\"\r\n}"  %(sp_name ,uri, enc_grp_uri, sp_descr, id_1, requested_bw, wwnn1, wwpn1, fc_net_enc2_bay1_uri, id_2, requested_bw, wwnn2, wwpn2, fc_net_enc2_bay4_uri, mode, etag)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        logging.debug("payload: %s" % payload)
        response = requests.request("PUT", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def UpdateServerProfileLunsEagle159_old(self, ip, auth, api, sp_name, sp_uri, server_hw_uri, enc_grp_uri, sp_desc, requested_bw, fc_net_enc1_bay1_uri, fc_net_enc2_bay4_uri, id_1, id_2, wwnn1, wwpn1, wwnn2, wwpn2, mode, etag):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, sp_uri)
        querystring = {"ignoreServerHealth":"true"}
        payload="{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"eTag\" : \"%s\",\r\n    \"connectionSettings\": {\r\n        \"connections\": [{\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"UserDefined\",\r\n                \"wwnn\":\"%s\",\r\n                \"wwpn\":\"%s\",\r\n                \"requestedMbps\" : \"%s\",\r\n                \"networkUri\": \"%s\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn2\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"UserDefined\",\r\n                \"wwnn\":\"%s\",\r\n                \"wwpn\":\"%s\",\r\n                \"requestedMbps\" : \"%s\",\r\n                \"networkUri\": \"%s\"\r\n            }\r\n        ]\r\n    },\r\n           \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        }\r\n}" %(sp_name, server_hw_uri, enc_grp_uri, sp_desc, etag, id_1, wwnn1, wwpn1, requested_bw, fc_net_enc1_bay1_uri, id_2, wwnn2, wwpn2, requested_bw, fc_net_enc2_bay4_uri, mode)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        logging.debug("payload: %s" % payload)
        response = requests.request("PUT", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.headers)
        logging.debug(response.headers)
        logging.debug(response.text)
    
    def UpdateServerProfileLunsEagle159(self, ip, auth, api, sp_name, sp_uri, server_hw_uri, enc_grp_uri, sp_desc, requested_bw, fc_net_enc1_bay1_uri, fc_net_enc2_bay4_uri, id_1, id_2, mode, etag):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, sp_uri)
        querystring = {"ignoreServerHealth":"true"}
        payload="{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"eTag\" : \"%s\",\r\n    \"connectionSettings\": {\r\n        \"connections\": [{\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"Physical\",\r\n                \"requestedMbps\" : \"%s\",\r\n                \"networkUri\": \"%s\"\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn2\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"Physical\",\r\n                \"requestedMbps\" : \"%s\",\r\n                \"networkUri\": \"%s\"\r\n            }\r\n        ]\r\n    },\r\n           \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        }\r\n}" %(sp_name, server_hw_uri, enc_grp_uri, sp_desc, etag, id_1, requested_bw, fc_net_enc1_bay1_uri, id_2, requested_bw, fc_net_enc2_bay4_uri, mode)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        logging.debug("payload: %s" % payload)
        response = requests.request("PUT", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.headers)
        logging.debug(response.headers)
        logging.debug(response.text)
    
    def UpdateServerProfileBfsEagle159_WITHWWPN(self, ip, auth, api, sp_name, sp_uri, server_hw_uri, enc_grp_uri, sp_desc, requested_bw, fc_net_enc1_bay3_uri, fc_net_enc2_bay6_uri, id_1, id_2, wwnn1, wwpn1, wwnn2, wwpn2, port1_q1_1, port1_q1_2, port2_q2_1, port2_q2_2, mode, etag ):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, sp_uri)
        querystring = {"ignoreServerHealth":"true"}
        payload="{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"eTag\" : \"%s\",\r\n    \"connectionSettings\": {\r\n        \"connections\": [{\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"Physical\",\r\n                \"wwnn\":\"%s\",\r\n                \"wwpn\":\"%s\",\r\n                \"requestedMbps\" : \"%s\",\r\n                \"networkUri\": \"%s\",\r\n                \"boot\": {\r\n                    \"priority\": \"Primary\",\r\n                    \"bootVolumeSource\" : \"UserDefined\",\r\n                    \"targets\": [\r\n                    {\r\n                        \"arrayWwpn\": \"%s\",\r\n                        \"lun\": \"0\"\r\n                    },\r\n                     {\r\n                         \"arrayWwpn\": \"%s\",\r\n                         \"lun\": \"0\"\r\n                     }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn2\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"Physical\",\r\n                \"wwnn\":\"%s\",\r\n                \"wwpn\":\"%s\",\r\n                \"requestedMbps\" : \"%s\",\r\n                \"networkUri\": \"%s\",\r\n                \"boot\": {\r\n                    \"priority\": \"Secondary\",\r\n                    \"bootVolumeSource\" : \"UserDefined\",\r\n                    \"targets\": [\r\n                    {\r\n                        \"arrayWwpn\": \"%s\",\r\n                        \"lun\": \"0\"\r\n                    },\r\n                     {\r\n                         \"arrayWwpn\": \"%s\",\r\n                         \"lun\": \"0\"\r\n                     }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    },\r\n           \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        }\r\n}" %(sp_name, server_hw_uri, enc_grp_uri, sp_desc, etag, id_1, wwnn1, wwpn1, requested_bw, fc_net_enc1_bay3_uri, port1_q1_1, port1_q1_2, id_2, wwnn2, wwpn2, requested_bw, fc_net_enc2_bay6_uri, port2_q2_1, port2_q2_2, mode)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        logging.debug("payload: %s" % payload)
        response = requests.request("PUT", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.headers)
        logging.debug(response.headers)
        logging.debug(response.text)
    
    def UpdateServerProfileBfsEagle159(self, ip, auth, api, sp_name, sp_uri, server_hw_uri, enc_grp_uri, sp_desc, requested_bw, fc_net_enc1_bay3_uri, fc_net_enc2_bay6_uri, id_1, id_2, port1_q1_1, port1_q1_2, port2_q2_1, port2_q2_2, mode, etag ):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, sp_uri)
        querystring = {"ignoreServerHealth":"true"}
        payload="{\r\n    \"type\":\"ServerProfileV12\",\r\n    \"name\":\"%s\",\r\n    \"serverHardwareUri\":\"%s\",\r\n    \"enclosureGroupUri\":\"%s\",\r\n    \"description\":\"%s\",\r\n    \"affinity\" : \"Bay\",\r\n    \"macType\" : \"Physical\",\r\n    \"serialNumberType\" : \"Physical\",\r\n    \"wwnType\" : \"Physical\",\r\n    \"hideUnusedFlexNics\" : true,\r\n    \"eTag\" : \"%s\",\r\n    \"connectionSettings\": {\r\n        \"connections\": [{\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"Physical\",\r\n                \"requestedMbps\" : \"%s\",\r\n                \"networkUri\": \"%s\",\r\n                \"boot\": {\r\n                    \"priority\": \"Primary\",\r\n                    \"bootVolumeSource\" : \"UserDefined\",\r\n                    \"targets\": [\r\n                    {\r\n                        \"arrayWwpn\": \"%s\",\r\n                        \"lun\": \"0\"\r\n                    },\r\n                     {\r\n                         \"arrayWwpn\": \"%s\",\r\n                         \"lun\": \"0\"\r\n                     }\r\n                    ]\r\n                }\r\n            },\r\n            {\r\n                \"id\": \"%s\",\r\n                \"name\":\"fc-conn2\",\r\n                \"functionType\": \"FibreChannel\",\r\n                \"portId\": \"Auto\",\r\n                \"wwpnType\":\"Physical\",\r\n                \"requestedMbps\" : \"%s\",\r\n                \"networkUri\": \"%s\",\r\n                \"boot\": {\r\n                    \"priority\": \"Secondary\",\r\n                    \"bootVolumeSource\" : \"UserDefined\",\r\n                    \"targets\": [\r\n                    {\r\n                        \"arrayWwpn\": \"%s\",\r\n                        \"lun\": \"0\"\r\n                    },\r\n                     {\r\n                         \"arrayWwpn\": \"%s\",\r\n                         \"lun\": \"0\"\r\n                     }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    },\r\n           \"bootMode\": {\r\n           \"manageMode\":true,\r\n           \"mode\":\"%s\"\r\n        }\r\n}" %(sp_name, server_hw_uri, enc_grp_uri, sp_desc, etag, id_1, requested_bw, fc_net_enc1_bay3_uri, port1_q1_1, port1_q1_2, id_2, requested_bw, fc_net_enc2_bay6_uri, port2_q2_1, port2_q2_2, mode)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        logging.debug("payload: %s" % payload)
        response = requests.request("PUT", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.headers)
        logging.debug(response.headers)
        logging.debug(response.text)


class ServerProfileConnectionSpeeds(object):

    def ServerProfileConnectionSpeed16GB(self, ip, auth, api):
        logging.info("Getting Server HW and Profiles")
        server_hw_profiles_inst = Servers()
        sp_dict = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
        sp_names_conn_list = printDict(sp_dict, ['name', 'connectionSettings'])
        for x, value in enumerate(sp_names_conn_list):
            fc_conns = sp_names_conn_list[x]['connectionSettings']
            sp_name = sp_names_conn_list[x]['name']
            fc_conns_list = fc_conns['connections']
            for i, value in enumerate(fc_conns_list):
                requested_bw = fc_conns_list[i]['requestedMbps']
                allocated_bw = fc_conns_list[i]['allocatedMbps']
                maximum_bw = fc_conns_list[i]['maximumMbps']
                if sp_name == "Server Profile 1":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == '16000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 2":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == '16000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 3":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == '16000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 4":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == '16000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 5":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == '16000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 6":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == '16000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
    
    def ServerProfileConnectionSpeedAuto(self, ip, auth, api):
        logging.info("Getting Server HW and Profiles")
        server_hw_profiles_inst = Servers()
        sp_dict = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
        sp_names_conn_list = printDict(sp_dict, ['name', 'connectionSettings'])
        for x, value in enumerate(sp_names_conn_list):
            fc_conns = sp_names_conn_list[x]['connectionSettings']
            sp_name = sp_names_conn_list[x]['name']
            fc_conns_list = fc_conns['connections']
            for i, value in enumerate(fc_conns_list):
                requested_bw = fc_conns_list[i]['requestedMbps']
                allocated_bw = fc_conns_list[i]['allocatedMbps']
                maximum_bw = fc_conns_list[i]['maximumMbps']
                if sp_name == "Server Profile 1":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 2":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 3":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 4":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 5":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 6":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 16000 and maximum_bw == 16000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
    
    def ServerProfileConnectionSpeedAuto32GB(self, ip, auth, api):
        logging.info("Getting Server HW and Profiles")
        server_hw_profiles_inst = Servers()
        sp_dict = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
        sp_names_conn_list = printDict(sp_dict, ['name', 'connectionSettings'])
        for x, value in enumerate(sp_names_conn_list):
            fc_conns = sp_names_conn_list[x]['connectionSettings']
            sp_name = sp_names_conn_list[x]['name']
            fc_conns_list = fc_conns['connections']
            for i, value in enumerate(fc_conns_list):
                requested_bw = fc_conns_list[i]['requestedMbps']
                allocated_bw = fc_conns_list[i]['allocatedMbps']
                maximum_bw = fc_conns_list[i]['maximumMbps']
                if sp_name == "Server Profile 1":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 2":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 3":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 4":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 5":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 6":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == 'Auto':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
    
    def ServerProfileConnectionSpeed32GB(self, ip, auth, api):
        logging.info("Getting Server HW and Profiles")
        server_hw_profiles_inst = Servers()
        sp_dict = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
        sp_names_conn_list = printDict(sp_dict, ['name', 'connectionSettings'])
        for x, value in enumerate(sp_names_conn_list):
            fc_conns = sp_names_conn_list[x]['connectionSettings']
            sp_name = sp_names_conn_list[x]['name']
            fc_conns_list = fc_conns['connections']
            for i, value in enumerate(fc_conns_list):
                requested_bw = fc_conns_list[i]['requestedMbps']
                allocated_bw = fc_conns_list[i]['allocatedMbps']
                maximum_bw = fc_conns_list[i]['maximumMbps']
                if sp_name == "Server Profile 1":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == '32000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 2":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == '32000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 3":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == '32000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 4":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == '32000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 5":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == '32000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                elif sp_name == "Server Profile 6":
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 32000 and maximum_bw == 32000 and requested_bw == '32000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)

    def ServerProfileConnectionSpeed7_5GB(self, ip, auth, api):
        logging.info("Getting Server HW and Profiles")
        server_hw_profiles_inst = Servers()
        sp_dict = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
        sp_names_conn_list = printDict(sp_dict, ['name', 'connectionSettings'])
        for x, value in enumerate(sp_names_conn_list):
            fc_conns = sp_names_conn_list[x]['connectionSettings']
            sp_name = sp_names_conn_list[x]['name']
            fc_conns_list = fc_conns['connections']
            for i, value in enumerate(fc_conns_list):
                requested_bw = fc_conns_list[i]['requestedMbps']
                allocated_bw = fc_conns_list[i]['allocatedMbps']
                maximum_bw = fc_conns_list[i]['maximumMbps']
                if sp_name == sp_name:
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 7500 and maximum_bw == 10000 and requested_bw == '7500':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                else:
                    pass

    def ServerProfileConnectionSpeed10GB(self, ip, auth, api):
        logging.info("Getting Server HW and Profiles")
        server_hw_profiles_inst = Servers()
        sp_dict = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
        sp_names_conn_list = printDict(sp_dict, ['name', 'connectionSettings'])
        for x, value in enumerate(sp_names_conn_list):
            fc_conns = sp_names_conn_list[x]['connectionSettings']
            sp_name = sp_names_conn_list[x]['name']
            fc_conns_list = fc_conns['connections']
            for i, value in enumerate(fc_conns_list):
                requested_bw = fc_conns_list[i]['requestedMbps']
                allocated_bw = fc_conns_list[i]['allocatedMbps']
                maximum_bw = fc_conns_list[i]['maximumMbps']
                if sp_name == sp_name:
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 10000 and maximum_bw == 10000 and requested_bw == '10000':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                else:
                    pass

    def ServerProfileConnectionSpeed4_5GB(self, ip, auth, api):
        logging.info("Getting Server HW and Profiles")
        server_hw_profiles_inst = Servers()
        sp_dict = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
        sp_names_conn_list = printDict(sp_dict, ['name', 'connectionSettings'])
        for x, value in enumerate(sp_names_conn_list):
            fc_conns = sp_names_conn_list[x]['connectionSettings']
            sp_name = sp_names_conn_list[x]['name']
            fc_conns_list = fc_conns['connections']
            for i, value in enumerate(fc_conns_list):
                requested_bw = fc_conns_list[i]['requestedMbps']
                allocated_bw = fc_conns_list[i]['allocatedMbps']
                maximum_bw = fc_conns_list[i]['maximumMbps']
                if sp_name == sp_name:
                    tc = "FC Connection set to %s, allocated bw set %s, maximum bw set %s on %s" %(requested_bw, allocated_bw, maximum_bw, sp_name)
                    if allocated_bw == 4500 and maximum_bw == 10000 and requested_bw == '4500':
                        result = "Pass"
                        PassOrFail(result, tc)
                    else:
                        result = "Fail"
                        PassOrFail(result, tc)
                else:
                    pass



class CheckServerPower(object):

    def PowerOnServer(self, ip, auth, api, srvr_hw_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/powerState" %(ip, srvr_hw_uri)
        payload = "{\r\n     \"powerState\": \"On\",\r\n     \"powerControl\":\"MomentaryPress\"\r\n}"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def PowerOffServer(self, ip, auth ,api, srvr_hw_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/powerState" %(ip, srvr_hw_uri)
        payload = "{\r\n     \"powerState\": \"Off\",\r\n     \"powerControl\":\"PressAndHold\"\r\n}"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def PowerOffOnServersFunc(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info ("*******************POWERING OFF SERVERS ***************************")
        srvr_power_check_inst = CheckServerPower()
        logging.info("Getting Server HW and Profiles")
        server_hw_profiles_inst = Servers()
        server_hw_list = server_hw_profiles_inst.ServerHW(ip, auth, api)
        server_hw_name_uri_model = printDict(server_hw_list, ['name', 'uri', 'model'])
        logging.info("Getting Server Powerstate")
        srvr_hw_power_state = printDict(server_hw_list, ['powerState'])
        
        logging.info("starting Server HW list loop")
        for i, value in enumerate(server_hw_name_uri_model):
            srvr_hw_uri = server_hw_name_uri_model[i]['uri']
            srvr_hw_name = server_hw_name_uri_model[i]['name']
            srvr_hw_model = server_hw_name_uri_model[i]['model']
            power_state = srvr_hw_power_state[i]['powerState']
            logging.info("Server %s power is %s" %(srvr_hw_model, power_state))
            if power_state == "On":
                logging.info( "The server power is on. Powering off Server:  %s in %s " % (srvr_hw_model, srvr_hw_name))
                srvr_power_check_inst.PowerOffServer(ip, auth, api, srvr_hw_uri)
                logging.info("pausing 20 secs to power off server")
                countdown(20)
            else:
                pass
    
        countdown(120)
        logging.info ("*******************POWERING ON SERVERS ***************************")
        logging.info("Getting Server HW and Profiles")
        server_hw_profiles_inst = Servers()
        server_hw_list = server_hw_profiles_inst.ServerHW(ip, auth, api)
        server_hw_name_uri_model = printDict(server_hw_list, ['name', 'uri', 'model'])
        logging.info("Getting Server Powerstate")
        srvr_hw_power_state = printDict(server_hw_list, ['powerState'])
        
        for i, value in enumerate(server_hw_name_uri_model):
            srvr_hw_uri = server_hw_name_uri_model[i]['uri']
            srvr_hw_model = server_hw_name_uri_model[i]['model']
            power_state = srvr_hw_power_state[i]['powerState']
            logging.info("Server %s power is %s" %(srvr_hw_model, power_state))
            if power_state == "Off":
                logging.info( "The server power is off. Powering on Server:  %s in %s " % (srvr_hw_model, name))
                srvr_power_check_inst.PowerOnServer(ip, auth, api, srvr_hw_uri)
                countdown(30)
            else:
                pass
    
        countdown(600)


class LogicalInterconnectGroup(object):

    def GetListOfLIGs(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        headers = {
            'auth': auth,
            'x-api-version': api,
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))


class Servers(object):

    def ServerProfiles(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profiles" % ip
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def ServerProfilesTemplates(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-profile-templates" % ip
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def ServerHW(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/server-hardware" % ip
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def server_hw_firmware_inventory(self, ip, auth, api, server_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/firmware" %(ip, server_uri)
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))

    def server_wwwn_wwpn(self, wwnn1_start, wwpn1_start, wwnn2_start, wwpn2_start):
        wwnn1 = [wwnn1_start+str(i) for i in range(80,100,2)]
        wwpn1 = [wwpn1_start+str(i) for i in range(80,100,2)]
        wwnn2 = [wwnn2_start+str(i) for i in range(81,100,2)]
        wwpn2 = [wwpn2_start+str(i) for i in range(81,100,2)]
        return wwnn1, wwpn1, wwnn2, wwpn2
    
    def server_profile_config_eagle3(self):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        agency = ['NASA','DEFENSE DEPT','NSA','STATE DEPT','TREASURY DEPT','CIA','COMMERCE DEPT','EDUCATION DEPT','CONGRESS','SUPREME COURT','AUSTIN','DALLAS','HOUSTON','JERUSALEM','LOS ANGELES','FRANKFURT','LONDON','MIAMI','TOKYO','SYDNEY','DENVER']
        sp_names_start = 'Server Profile '
        sp_name = [sp_names_start+str(i) for i in range(1,25,1)]
        SP_desc = 'Server Profile for '
        ServerProfilesDescriptions = [SP_desc+str(i) for i in (agency)]
        sp_descr = sorted(ServerProfilesDescriptions)
        ID1_start = ''
        id_1 = [ID1_start+str(i) for i in range(1,40,2)]
        ID2_start = ''
        id_2 = [ID2_start+str(i) for i in range(2,40,2)]
        ID3_start = ''
        id_3 = [ID3_start+str(i) for i in range(30,70,2)]
        ID4_start = ''
        id_4 = [ID4_start+str(i) for i in range(31,70,2)]
        ID5_start = ''
        id_5 = [ID5_start+str(i) for i in range(60,100,2)]
        ID6_start = ''
        id_6 = [ID6_start+str(i) for i in range(61,100,2)]
        return sp_name, sp_descr, id_1, id_2, id_3, id_4, id_5, id_6

    def server_profile_config_eagle30(self):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        agency = ['NASA','DEFENSE DEPT','NSA','STATE DEPT','TREASURY DEPT','CIA','COMMERCE DEPT','EDUCATION DEPT','CONGRESS','SUPREME COURT','AUSTIN','DALLAS','HOUSTON','JERUSALEM','LOS ANGELES','FRANKFURT','LONDON','MIAMI','TOKYO','SYDNEY','DENVER']
        sp_names_start = 'Server Profile '
        sp_name = [sp_names_start+str(i) for i in range(1,25,1)]
        SP_desc = 'Server Profile for '
        ServerProfilesDescriptions = [SP_desc+str(i) for i in (agency)]
        sp_descr = sorted(ServerProfilesDescriptions)
        ID1_start = ''
        id_1 = [ID1_start+str(i) for i in range(1,40,2)]
        ID2_start = ''
        id_2 = [ID2_start+str(i) for i in range(2,40,2)]
        ID3_start = ''
        id_3 = [ID3_start+str(i) for i in range(30,70,2)]
        ID4_start = ''
        id_4 = [ID4_start+str(i) for i in range(31,70,2)]
        ID5_start = ''
        id_5 = [ID5_start+str(i) for i in range(60,100,2)]
        ID6_start = ''
        id_6 = [ID6_start+str(i) for i in range(61,100,2)]
        ID7_start = ''
        id_7 = [ID7_start+str(i) for i in range(101,120,2)]
        return sp_name, sp_descr, id_1, id_2, id_3, id_4, id_5, id_6, id_7


    def server_profile_config(self):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        agency = ['NASA','DEFENSE DEPT','NSA','STATE DEPT','TREASURY DEPT','CIA','COMMERCE DEPT','EDUCATION DEPT','CONGRESS','SUPREME COURT']
        sp_names_start = 'Server Profile '
        sp_names_list = [sp_names_start+str(i) for i in range(1,10,1)]
        sp_names = sorted(sp_names_list)
        SP_desc = 'Server Profile for '
        ServerProfilesDescriptions = [SP_desc+str(i) for i in (agency)]
        sp_descr = sorted(ServerProfilesDescriptions)
        id1_start = ''
        id_1 = [id1_start+str(i) for i in range(1,50,2)]
        id2_start = ''
        id_2 = [id2_start+str(i) for i in range(2,50,2)]
        return sp_names, sp_descr, id_1, id_2
        
    def server_wwnn_start_wwpn_start(self, enc):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        if enc == 'Eagle155':
            array_wwpn1 = '21:70:00:c0:ff:1e:85:70'
            array_wwpn2 = '25:70:00:c0:ff:1e:85:70'
            wwnn1_start = '20:00:70:10:6F:76:B5:'
            wwpn1_start = '10:00:70:10:6F:76:B5:'
            wwnn2_start = '20:00:70:10:6F:76:B5:'
            wwpn2_start = '10:00:70:10:6F:76:B5:'
        elif enc == 'Eagle21':
            array_wwpn1 = '20:70:00:c0:ff:1e:85:70'
            array_wwpn2 = '24:70:00:c0:ff:1e:85:70'
            wwnn1_start = '20:00:70:11:6F:76:B5:'
            wwpn1_start = '10:00:70:11:6F:76:B5:'
            wwnn2_start = '20:00:70:11:6F:76:B5:'
            wwpn2_start = '10:00:70:11:6F:76:B5:'
        elif enc == 'Eagle28':
            array_wwpn1 = "21:70:00:c0:ff:25:b0:79"
            array_wwpn2 = "25:70:00:c0:ff:25:b0:79"
            wwnn1_start = '20:00:70:12:6F:76:B5:'
            wwpn1_start = '10:00:70:12:6F:76:B5:'
            wwnn2_start = '20:00:70:12:6F:76:B5:'
            wwpn2_start = '10:00:70:12:6F:76:B5:'
        elif enc == 'Eagle136':
            array_wwpn1 = '20:02:00:02:ac:01:cd:ec'
            array_wwpn2 = '21:02:00:02:ac:01:cd:ec'
            wwnn1_start = '20:00:70:13:6F:76:B5:'
            wwpn1_start = '10:00:70:13:6F:76:B5:'
            wwnn2_start = '20:00:70:13:6F:76:B5:'
            wwpn2_start = '10:00:70:13:6F:76:B5:'
        elif enc == 'Eagle20':
            array_wwpn1 = '20:70:00:c0:ff:1e:85:70'
            array_wwpn2 = '24:70:00:c0:ff:1e:85:70'
            wwnn1_start = '20:00:70:14:6F:76:B5:'
            wwpn1_start = '10:00:70:14:6F:76:B5:'
            wwnn2_start = '20:00:70:14:6F:76:B5:'
            wwpn2_start = '10:00:70:14:6F:76:B5:'
        elif enc == 'Eagle40':
            array_wwpn1 = '20:70:00:c0:ff:1e:85:70'
            array_wwpn2 = '24:70:00:c0:ff:1e:85:70'
            wwnn1_start = '20:00:70:15:6F:76:B5:'
            wwpn1_start = '10:00:70:15:6F:76:B5:'
            wwnn2_start = '20:00:70:15:6F:76:B5:'
            wwpn2_start = '10:00:70:15:6F:76:B5:'
        elif enc == 'Eagle13':
            array_wwpn1 = '20:70:00:c0:ff:1e:85:70'
            array_wwpn2 = '24:70:00:c0:ff:1e:85:70'
            wwnn1_start = '20:00:70:16:6F:76:B5:'
            wwpn1_start = '10:00:70:16:6F:76:B5:'
            wwnn2_start = '20:00:70:16:6F:76:B5:'
            wwpn2_start = '10:00:70:16:6F:76:B5:'
            
        return array_wwpn1, array_wwpn2, wwnn1_start, wwpn1_start, wwnn2_start, wwpn2_start
    
    def allocate_target_wwpn(self, icm):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        if icm == 'nitro':
            array_dict = {'Q1:1': '56:c9:ce:90:8f:75:25:01', 'Q1:2': '56:c9:ce:90:8f:75:25:0d', 'Q2:1': '56:c9:ce:90:8f:75:25:05', 'Q2:2': '56:c9:ce:90:8f:75:25:11'}
        elif icm == 'potash':
            array_dict = {'Q1:1': '56:c9:ce:90:8f:75:25:04', 'Q1:2': '56:c9:ce:90:8f:75:25:10', 'Q2:1': '56:c9:ce:90:8f:75:25:07', 'Q2:2': '56:c9:ce:90:8f:75:25:13'}
        
        for i in (array_dict):
            if i == 'Q1:1':
                port1_q1_1 = array_dict[i]
            elif i == 'Q1:2':
                port1_q1_2 = array_dict[i]
            elif i == 'Q2:1':
                port2_q2_1 = array_dict[i]
            elif i == 'Q2:2':
                port2_q2_2 = array_dict[i]
    
        return port1_q1_1, port1_q1_2, port2_q2_1, port2_q2_2


class Networks(object):

    def GetFcNetworks(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/fc-networks?start=0&count=275" % ip
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def GetEthernetNetworks(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/ethernet-networks?start=0&count=4000" % ip
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def GetFCoENetworks(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/fcoe-networks?start=0&count=20" % ip
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def get_fc_network_uri_eagle32(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        fc_net_inst = Networks()
        fc_net_dict = fc_net_inst.GetFcNetworks(ip, auth, api)
        fc_net_list = printDict(fc_net_dict, ['name', 'uri'])
        for n in range (0, len(fc_net_list)):
            fc_net_name = fc_net_list[n]['name']
            fc_net_uri = fc_net_list[n]['uri']
            if fc_net_name == "BAY1-FC":
                fc_net_enc1_bay1_uri = fc_net_uri
            elif fc_net_name == "BAY4-FC":
                fc_net_enc1_bay4_uri = fc_net_uri
            elif fc_net_name == "NITRO-BAY5-FC":
                fc_net_nitro_bay5_uri = fc_net_uri
        return fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_net_nitro_bay5_uri
    
    def get_fc_network_uri_eagle30(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        fc_net_inst = Networks()
        fc_net_dict = fc_net_inst.GetFcNetworks(ip, auth, api)
        fc_net_list = printDict(fc_net_dict, ['name', 'uri'])
        for n in range (0, len(fc_net_list)):
            fc_net_name = fc_net_list[n]['name']
            fc_net_uri = fc_net_list[n]['uri']
            if fc_net_name == "BAY1-FC":
                fc_net_enc1_bay1_uri = fc_net_uri
            elif fc_net_name == "BAY4-FC":
                fc_net_enc1_bay4_uri = fc_net_uri
            elif fc_net_name == "NITRO-BAY2-FC":
                fc_net_nitro_bay2_uri = fc_net_uri
            elif fc_net_name == "POTASH-BAY6-FC":
                fc_net_potash_bay6_uri = fc_net_uri
        return fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_net_nitro_bay2_uri, fc_net_potash_bay6_uri

    def get_eth_network_uri_eagle30(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        eth_net_inst = Networks()
        eth_net_dict = eth_net_inst.GetEthernetNetworks(ip, auth, api)
        eth_net_list = printDict(eth_net_dict, ['name', 'uri'])
        for n in range (0, len(eth_net_list)):
            eth_net_name = eth_net_list[n]['name']
            eth_net_uri = eth_net_list[n]['uri']
            if eth_net_name == "VLAN-10":
                eth_net_vlan10_uri = eth_net_uri
            elif eth_net_name == "VLAN-30":
                eth_net_vlan30_uri = eth_net_uri
            elif eth_net_name == "VLAN-40":
                eth_net_vlan40_uri = eth_net_uri
        return eth_net_vlan10_uri, eth_net_vlan30_uri, eth_net_vlan40_uri
    
    def get_nitro_potash_fc_network_uri_eagle136(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        fc_net_inst = Networks()
        fc_net_dict = fc_net_inst.GetFcNetworks(ip, auth, api)
        fc_net_list = printDict(fc_net_dict, ['name', 'uri'])
        for n in range (0, len(fc_net_list)):
            fc_net_name = fc_net_list[n]['name']
            fc_net_uri = fc_net_list[n]['uri']
            if fc_net_name == "POTASH_BAY2_FC":
                fc_net_potash_bay2_uri = fc_net_uri
            elif fc_net_name == "POTASH_BAY5_FC":
                fc_net_potash_bay5_uri = fc_net_uri
            elif fc_net_name == "NITRO_BAY3_FC":
                fc_net_nitro_bay3_uri = fc_net_uri
            elif fc_net_name == "NITRO_BAY6_FC":
                fc_net_nitro_bay6_uri = fc_net_uri
        return fc_net_potash_bay2_uri, fc_net_potash_bay5_uri, fc_net_nitro_bay3_uri, fc_net_nitro_bay6_uri
    
    def get_carbon_fc_network_uri_eagle136(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        fc_net_inst = Networks()
        fc_net_dict = fc_net_inst.GetFcNetworks(ip, auth, api)
        fc_net_list = printDict(fc_net_dict, ['name', 'uri'])
        for n in range (0, len(fc_net_list)):
            fc_net_name = fc_net_list[n]['name']
            fc_net_uri = fc_net_list[n]['uri']
            if fc_net_name == "BAY1_ENC1":
                fc_net_enc1_bay1_uri = fc_net_uri
            elif fc_net_name == "BAY4_ENC1":
                fc_net_enc1_bay4_uri = fc_net_uri
            elif fc_net_name == "BAY1_ENC2":
                fc_net_enc2_bay1_uri = fc_net_uri
            elif fc_net_name == "BAY4_ENC2":
                fc_net_enc2_bay4_uri = fc_net_uri
        return fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri
    
    def get_fcoe_network_uri_eagle136(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        fc_net_inst = Networks()
        fc_net_dict = fc_net_inst.GetFCoENetworks(ip, auth, api)
        fc_net_list = printDict(fc_net_dict, ['name', 'uri'])
        for n in range (0, len(fc_net_list)):
            fcoe_net_name = fc_net_list[n]['name']
            fcoe_net_uri = fc_net_list[n]['uri']
            if fcoe_net_name == "POTASH_BAY2_FCOE":
                fcoe_net_potash_bay2_uri = fcoe_net_uri
            elif fcoe_net_name == "POTASH_BAY5_FCOE":
                fcoe_net_potash_bay5_uri = fcoe_net_uri
            elif fcoe_net_name == "NITRO_BAY3_FCOE":
                fcoe_net_nitro_bay3_uri = fcoe_net_uri
            elif fcoe_net_name == "NITRO_BAY6_FCOE":
                fcoe_net_nitro_bay6_uri = fcoe_net_uri
        return fcoe_net_potash_bay2_uri, fcoe_net_potash_bay5_uri, fcoe_net_nitro_bay3_uri, fcoe_net_nitro_bay6_uri
    
    def get_eth_network_uri_eagle3(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        eth_net_inst = Networks()
        eth_net_dict = eth_net_inst.GetEthernetNetworks(ip, auth, api)
        eth_net_list = printDict(eth_net_dict, ['name', 'uri'])
        for n in range (0, len(eth_net_list)):
            eth_net_name = eth_net_list[n]['name']
            eth_net_uri = eth_net_list[n]['uri']
            if eth_net_name == "VLAN-10":
                eth_net_vlan10_uri = eth_net_uri
            elif eth_net_name == "VLAN-20":
                eth_net_vlan20_uri = eth_net_uri
            elif eth_net_name == "VLAN-30":
                eth_net_vlan30_uri = eth_net_uri
            elif eth_net_name == "VLAN-40":
                eth_net_vlan40_uri = eth_net_uri
        return eth_net_vlan10_uri, eth_net_vlan20_uri, eth_net_vlan30_uri, eth_net_vlan40_uri

    def get_fc_network_uri_eagle3(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        fc_net_inst = Networks()
        fc_net_dict = fc_net_inst.GetFcNetworks(ip, auth, api)
        fc_net_list = printDict(fc_net_dict, ['name', 'uri'])
        for n in range (0, len(fc_net_list)):
            fc_net_name = fc_net_list[n]['name']
            fc_net_uri = fc_net_list[n]['uri']
            if fc_net_name == "BAY1_ENC1":
                fc_net_enc1_bay1_uri = fc_net_uri
            elif fc_net_name == "BAY4_ENC1":
                fc_net_enc1_bay4_uri = fc_net_uri
            elif fc_net_name == "BAY1_ENC2":
                fc_net_enc2_bay1_uri = fc_net_uri
            elif fc_net_name == "BAY4_ENC2":
                fc_net_enc2_bay4_uri = fc_net_uri
            elif fc_net_name == "BAY1_ENC3":
                fc_net_enc3_bay1_uri = fc_net_uri
            elif fc_net_name == "BAY4_ENC3":
                fc_net_enc3_bay4_uri = fc_net_uri
        return fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, fc_net_enc3_bay1_uri, fc_net_enc3_bay4_uri
    
    def get_fc_network_uri_eagle28(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        fc_net_inst = Networks()
        fc_net_dict = fc_net_inst.GetFcNetworks(ip, auth, api)
        fc_net_list = printDict(fc_net_dict, ['name', 'uri'])
        for n in range (0, len(fc_net_list)):
            fc_net_name = fc_net_list[n]['name']
            fc_net_uri = fc_net_list[n]['uri']
            if fc_net_name == "BAY1_ENC1":
                fc_net_enc1_bay1_uri = fc_net_uri
            elif fc_net_name == "BAY4_ENC1":
                fc_net_enc1_bay4_uri = fc_net_uri
            elif fc_net_name == "BAY1_ENC2":
                fc_net_enc2_bay1_uri = fc_net_uri
            elif fc_net_name == "BAY4_ENC2":
                fc_net_enc2_bay4_uri = fc_net_uri
            elif fc_net_name == "BAY1-Q3-PORTS-ENC1":
                fc_net_enc1_bay1_quri = fc_net_uri
        return fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, fc_net_enc1_bay1_quri
    
    def get_fc_network_uri_eagle21(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        fc_net_inst = Networks()
        fc_net_dict = fc_net_inst.GetFcNetworks(ip, auth, api)
        fc_net_list = printDict(fc_net_dict, ['name', 'uri'])
        for n in range (0, len(fc_net_list)):
            fc_net_name = fc_net_list[n]['name']
            fc_net_uri = fc_net_list[n]['uri']
            if fc_net_name == "BAY1":
                fc_net_enc1_bay1_uri = fc_net_uri
            elif fc_net_name == "BAY4":
                fc_net_enc1_bay4_uri = fc_net_uri
            elif fc_net_name == "BAY1-Q1-PORTS":
                fc_net_enc1_bay1_quri = fc_net_uri
        return fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_net_enc1_bay1_quri
    
    def get_fc_network_uri_eagle159(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        fc_net_inst = Networks()
        fc_net_dict = fc_net_inst.GetFcNetworks(ip, auth, api)
        fc_net_list = printDict(fc_net_dict, ['name', 'uri'])
        for n in range (0, len(fc_net_list)):
            fc_net_name = fc_net_list[n]['name']
            fc_net_uri = fc_net_list[n]['uri']
            if fc_net_name == "DA-NITRO-1":
                fc_net_enc1_bay3_uri = fc_net_uri
            elif fc_net_name == "DA-NITRO-2":
                fc_net_enc2_bay6_uri = fc_net_uri
            elif fc_net_name == "DA-POTASH-1":
                fc_net_enc1_bay1_uri = fc_net_uri
            elif fc_net_name == "DA-POTASH-2":
                fc_net_enc2_bay4_uri = fc_net_uri
        return fc_net_enc1_bay1_uri, fc_net_enc2_bay4_uri, fc_net_enc1_bay3_uri, fc_net_enc2_bay6_uri
    
    def get_uplink_set_uri_eagle28(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Uplink Sets")
        get_li_inst = LogicalInterconnects()
        uls_dict = get_li_inst.GetUplinkSets(ip, auth, api)
        uls_name_uri_list = printDict(uls_dict, ['uri','name'])
        for n in range (0, len(uls_name_uri_list)):
            uls_name = uls_name_uri_list[n]['name']
            uls_uri = uls_name_uri_list[n]['uri']
            if uls_name == "BAY1-EAGLE28":
                uls_enc1_bay1_uri = uls_uri
            elif uls_name == "BAY4-EAGLE28":
                uls_enc1_bay4_uri = uls_uri
            elif uls_name == "BAY1-EAGLE29":
                uls_enc2_bay1_uri = uls_uri
            elif uls_name == "BAY4-EAGLE29":
                uls_enc2_bay4_uri = uls_uri
        return uls_enc1_bay1_uri, uls_enc1_bay4_uri, uls_enc2_bay1_uri, uls_enc2_bay4_uri
    
    def get_uplink_set_uri_eagle155(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Uplink Sets")
        get_li_inst = LogicalInterconnects()
        uls_dict = get_li_inst.GetUplinkSets(ip, auth, api)
        uls_name_uri_list = printDict(uls_dict, ['uri','name'])
        for n in range (0, len(uls_name_uri_list)):
            uls_name = uls_name_uri_list[n]['name']
            uls_uri = uls_name_uri_list[n]['uri']
            if uls_name == "BAY1":
                uls_enc1_bay1_uri = uls_uri
            elif uls_name == "BAY4":
                uls_enc1_bay4_uri = uls_uri
        return uls_enc1_bay1_uri, uls_enc1_bay4_uri


class UpdateNetworks(object):

    
    def UpdateFCNetwork(self, ip, api, auth, fc_net_etag, fc_net_name, fc_net_uri, conn_template_uri, link_stab_time, auto_login_dist):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, fc_net_uri)
        payload = "{\r\n    \"eTag\" : \"%s\",\r\n    \"name\" : \"%s\",\r\n    \"uri\" : \"%s\",\r\n    \"connectionTemplateUri\" : \"%s\",\r\n    \"linkStabilityTime\" : \"%s\",\r\n    \"autoLoginRedistribution\" : %s,\r\n    \"fabricType\" : \"FabricAttach\",\r\n    \"type\" : \"fc-networkV4\"\r\n}" %(fc_net_etag, fc_net_name, fc_net_uri, conn_template_uri, link_stab_time, auto_login_dist)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        logging.debug(response.headers)
        return(response.headers)
    
    def update_fc_net_rdl(self, ip, auth, api, fc_name, link_stab_time, auto_login_dist):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting list of Fc networks")
        update_net_inst = UpdateNetworks()
        fc_net_inst = Networks()
        fc_net_dict = fc_net_inst.GetFcNetworks(ip, auth, api)
        fc_net_list = printDict(fc_net_dict, ['name', 'uri', 'connectionTemplateUri', 'eTag'])
        for n in range (0, len(fc_net_list)):
            fc_net_name = fc_net_list[n]['name']
            fc_net_uri = fc_net_list[n]['uri']
            fc_conn_tmplt_uri = fc_net_list[n]['connectionTemplateUri']
            fc_net_etag = fc_net_list[n]['eTag']
            if fc_net_name == fc_name:
                task_headers = update_net_inst.UpdateFCNetwork(ip, api, auth, fc_net_etag, fc_net_name, fc_net_uri, fc_conn_tmplt_uri, link_stab_time, auto_login_dist)
            else:
                pass
        return task_headers
    
    def update_network_rdl_func(self, ip, auth, api, fc_name, link_stab_time, auto_login_dist):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        update_net_inst = UpdateNetworks()
        headers_dict = update_net_inst.update_fc_net_rdl(ip, auth, api, fc_name, link_stab_time, auto_login_dist)
        task_uri = headers_dict['Location']
        logging.info("The update FC Network task is: {}" .format(task_uri))
        countdown(5)
        task_dict = get_task(ip, auth, api, task_uri)
        task_state = task_dict['taskState']
        while task_state == 'Running':
            task_dict = get_task(ip, auth, api, task_uri)
            task_state = task_dict['taskState']
            logging.info("The state of update FC Network task: {}" .format(task_state))
            if task_state == 'Running':
                logging.info("FC network is being updated")
            elif task_state == 'Completed':
                logging.info("The FC network rdl is set to {}" .format(auto_login_dist))
                break
            countdown(20)


class NetworkSets(object):

    def CreateNetworkSet(self, ip, auth, api, ns_name, net1_uri, net2_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/network-sets" % ip
        payload = "{\r\n    \"name\" : \"%s\",\r\n    \"networkUris\" : [\r\n        \"%s\",\r\n        \"%s\"\r\n    ],\r\n    \"type\" : \"network-setV5\"\r\n}"  %(ns_name, net1_uri, net2_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def GetNetworkSets(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/network-sets" % ip
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def DeleteNetworkSets(self, ip, auth, api, network_set_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/%s" % (ip, network_set_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'accept-language': "en_US"
            }
        response = requests.request("DELETE", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(response.text)


class Interconnects(object):

    def GetInterconnectTypes(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/interconnect-types" %ip
        headers = {
            'auth': auth,
            'x-api-version': api,
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def GetInterconnect(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/interconnects?start=0&count=20" % ip
        headers = {
            'auth': auth,
            'x-api-version': api,
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def GetInterconnectMultiEnc(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/interconnects?start=0&count=20" % ip
        querystring = {"filter":"\"'enclosureName' = %s\""  %enc_name} 
        headers = {
            'auth': auth,
            'x-api-version': api,
            }
        response = requests.request("GET", url, headers=headers,params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def getCarbonFwVersion(self, ip, auth, api, enc_name):
        logging.info("Getting Carbon fw version")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['name','model', 'enclosureName', 'firmwareVersion'])
            for n, value in enumerate(ic_list):
                model = ic_list[n]['model']
                if model == "Virtual Connect SE 16Gb FC Module for Synergy":
                    carbon_fw_version = ic_list[n]['firmwareVersion']
                elif model == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                    carbon_fw_version = ic_list[n]['firmwareVersion']
                elif model == "Virtual Connect SE 32Gb FC Module for Synergy":
                    carbon_fw_version = ic_list[n]['firmwareVersion']
                elif model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                    carbon_fw_version = ic_list[n]['firmwareVersion']
                else:
                    pass
        try:
            return carbon_fw_version
        except UnboundLocalError as error:
            logging.error("unable to retrieve carbon version")
    
    def getPotashFwVersion(self, ip, auth, api, enc_name):
        logging.info("Getting Potash fw version")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['name','model', 'enclosureName', 'firmwareVersion'])
            for n, value in enumerate(ic_list):
                model = ic_list[n]['model']
                if model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    potash_fw_version = ic_list[n]['firmwareVersion']
                    return potash_fw_version
                else:
                    pass
        
    def getNitroFwVersion(self, ip, auth, api, enc_name):
        logging.info("Getting Nitro fw version")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['name','model', 'enclosureName', 'firmwareVersion'])
            for n, value in enumerate(ic_list):
                model = ic_list[n]['model']
                if model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    nitro_fw_version = ic_list[n]['firmwareVersion']
                    return nitro_fw_version
                else:
                    pass

    def getCarbonHostname(self, ip, auth, api, enc_name, ic_name):
        logging.info("Getting Carbon hostname")
        ic_inst = Interconnects()
        get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_list = printDict(get_ic_dict, ['name', 'hostName'])
        for n, value in enumerate(ic_list):
            icm_name = ic_list[n]['name']
            if icm_name == ic_name:
                carbon_hostname = ic_list[n]['hostName']
                break
            else:
                pass
        try:
            return carbon_hostname
        except UnboundLocalError as error:
            logging.error("unable to retrieve carbon hostname")

    def CarbonHostnameUpdate(self, ip, auth, api, icm_uri, hostname):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" % (ip, icm_uri)
        
        payload = "[ { \"op\": \"replace\", \"path\": \"/hostname\", \"value\": \"%s\" } ]" %hostname
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PATCH", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def get_carbon_utilization(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        def get_icm_util_func(ip, auth, api, icm_uri):
            logging.info("Inside function %s", sys._getframe().f_code.co_name)
            url = "https://%s%s/utilization" %(ip, icm_uri)
            headers = {
                'auth': auth,
                'x-api-version': api,
                }
            response = requests.request("GET", url, headers=headers, verify=False)
            ValidateResponse(response.status_code, response.reason, response.text)
            logging.debug(response.text)
            try:
                return(json.loads(response.text))
            except ValueError as e:
                logging.info("No JSON object to be decoded")
            except TypeError as b:
                logging.info("There was a type error")


        logging.info("Getting Interconnects")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            icm_list = printDict(get_ic_dict, ['name','uri','model','enclosureName','firmwareVersion','state'])
            perm_metric_name_configured_list = [ 'Cpu', 'Memory', 'Temperature', 'PowerAverageWatts', 'PowerPeakWatts', 'PowerMinimumWatts', 'PowerAllocatedWatts']
            perm_metric_name_monitored_list = [ 'Temperature', 'PowerAverageWatts', 'PowerPeakWatts', 'PowerMinimumWatts', 'PowerAllocatedWatts']
            for ic, value in enumerate(icm_list):
                icm_uri = icm_list[ic]['uri']
                model = icm_list[ic]['model']
                ic_name = icm_list[ic]['name']
                fw_version = icm_list[ic]['firmwareVersion']
                state = icm_list[ic]['state']
                if model == "Virtual Connect SE 16Gb FC Module for Synergy":
                    icm_util_list = get_icm_util_func(ip, auth, api, icm_uri)
                    metric_list = icm_util_list['metricList']
                    logging.testcases("Here are the utilization samples on ICM {}" .format(ic_name))
                    logging.testcases("Carbon model: {}" .format(model))
                    logging.testcases("Carbon firmware: {}" .format(fw_version))
                    logging.testcases("State of Carbon: {}" .format(state))
                    metric_name_list = []
                    if state == 'Configured':
                        for n, value in enumerate(metric_list):
                            metric_name = metric_list[n]['metricName']
                            metric_name_list.append(metric_name)
                            metric_sample = metric_list[n]['metricSamples']
                            sample = metric_sample
                            my_sample_list =  str(sample).replace('[','').replace(']','')
                            sample = my_sample_list[16:]
                            if metric_name == "Temperature" or metric_name == "PowerAverageWatts" or metric_name == "PowerPeakWatts" or metric_name == "PowerMinimumWatts" or metric_name == "PowerAllocatedWatts" or metric_name == "Cpu" or metric_name == "Memory":
                                tc = ("{}: {}" .format(metric_name, sample))
                                if sample != "null":
                                    result = "Pass"
                                    PassOrFail(result, tc)
                                else:
                                    result = "Fail"
                                    PassOrFail(result, tc)
                        if metric_name_list != perm_metric_name_configured_list:
                            logging.testcases("One or more metric names are missing")
                            tc = "Carbon Utilization Samples"
                            result = "Fail"
                            PassOrFail(result, tc)
                        else:
                            logging.testcases("All metric names are present")
                    elif state == 'Monitored':
                        for n, value in enumerate(metric_list):
                            metric_name = metric_list[n]['metricName']
                            metric_name_list.append(metric_name)
                            metric_sample = metric_list[n]['metricSamples']
                            sample = metric_sample
                            my_sample_list =  str(sample).replace('[','').replace(']','')
                            sample = my_sample_list[16:]
                            if metric_name == "Temperature" or metric_name == "PowerAverageWatts" or metric_name == "PowerPeakWatts" or metric_name == "PowerMinimumWatts" or metric_name == "PowerAllocatedWatts":
                                tc = ("{}: {}" .format(metric_name, sample))
                                if sample != "null":
                                    result = "Pass"
                                    PassOrFail(result, tc)
                                else:
                                    result = "Fail"
                                    PassOrFail(result, tc)
                        if metric_name_list != perm_metric_name_monitored_list:
                            logging.testcases("One or more metric names are missing")
                            tc = "Carbon Utilization Samples"
                            result = "Fail"
                            PassOrFail(result, tc)
                        else:
                            logging.testcases("All metric names are present")
                elif model == "Virtual Connect SE 32Gb FC Module for Synergy":
                    icm_util_list = get_icm_util_func(ip, auth, api, icm_uri)
                    metric_list = icm_util_list['metricList']
                    logging.testcases("Here are the utilization samples on ICM {}" .format(ic_name))
                    logging.testcases("Carbon model: {}" .format(model))
                    logging.testcases("Carbon firmware: {}" .format(fw_version))
                    logging.testcases("State of Carbon: {}" .format(state))
                    metric_name_list = []
                    if state == 'Configured':
                        for n, value in enumerate(metric_list):
                            metric_name = metric_list[n]['metricName']
                            metric_name_list.append(metric_name)
                            metric_sample = metric_list[n]['metricSamples']
                            sample = metric_sample
                            my_sample_list =  str(sample).replace('[','').replace(']','')
                            sample = my_sample_list[16:]
                            if metric_name == "Temperature" or metric_name == "PowerAverageWatts" or metric_name == "PowerPeakWatts" or metric_name == "PowerMinimumWatts" or metric_name == "PowerAllocatedWatts" or metric_name == "Cpu" or metric_name == "Memory":
                                tc = ("{}: {}" .format(metric_name, sample))
                                if sample != "null":
                                    result = "Pass"
                                    PassOrFail(result, tc)
                                else:
                                    result = "Fail"
                                    PassOrFail(result, tc)
                        if metric_name_list != perm_metric_name_configured_list:
                            logging.testcases("One or more metric names are missing")
                            tc = "Carbon Utilization Samples"
                            result = "Fail"
                            PassOrFail(result, tc)
                        else:
                            logging.testcases("All metric names are present")
                    elif state == 'Monitored':
                        for n, value in enumerate(metric_list):
                            metric_name = metric_list[n]['metricName']
                            metric_name_list.append(metric_name)
                            metric_sample = metric_list[n]['metricSamples']
                            sample = metric_sample
                            my_sample_list =  str(sample).replace('[','').replace(']','')
                            sample = my_sample_list[16:]
                            if metric_name == "Temperature" or metric_name == "PowerAverageWatts" or metric_name == "PowerPeakWatts" or metric_name == "PowerMinimumWatts" or metric_name == "PowerAllocatedWatts":
                                tc = ("{}: {}" .format(metric_name, sample))
                                if sample != "null":
                                    result = "Pass"
                                    PassOrFail(result, tc)
                                else:
                                    result = "Fail"
                                    PassOrFail(result, tc)
                        if metric_name_list != perm_metric_name_monitored_list:
                            logging.testcases("One or more metric names are missing")
                            tc = "Carbon Utilization Samples"
                            result = "Fail"
                            PassOrFail(result, tc)
                        else:
                            logging.testcases("All metric names are present")
                elif model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                    icm_util_list = get_icm_util_func(ip, auth, api, icm_uri)
                    metric_list = icm_util_list['metricList']
                    logging.testcases("Here are the utilization samples on ICM {}" .format(ic_name))
                    logging.testcases("Carbon model: {}" .format(model))
                    logging.testcases("Carbon firmware: {}" .format(fw_version))
                    logging.testcases("State of Carbon: {}" .format(state))
                    metric_name_list = []
                    if state == 'Configured':
                        for n, value in enumerate(metric_list):
                            metric_name = metric_list[n]['metricName']
                            metric_name_list.append(metric_name)
                            metric_sample = metric_list[n]['metricSamples']
                            sample = metric_sample
                            my_sample_list =  str(sample).replace('[','').replace(']','')
                            sample = my_sample_list[16:]
                            if metric_name == "Temperature" or metric_name == "PowerAverageWatts" or metric_name == "PowerPeakWatts" or metric_name == "PowerMinimumWatts" or metric_name == "PowerAllocatedWatts" or metric_name == "Cpu" or metric_name == "Memory":
                                tc = ("{}: {}" .format(metric_name, sample))
                                if sample != "null":
                                    result = "Pass"
                                    PassOrFail(result, tc)
                                else:
                                    result = "Fail"
                                    PassOrFail(result, tc)
                        if metric_name_list != perm_metric_name_configured_list:
                            logging.testcases("One or more metric names are missing")
                            tc = "Carbon Utilization Samples"
                            result = "Fail"
                            PassOrFail(result, tc)
                        else:
                            logging.testcases("All metric names are present")
                    elif state == 'Monitored':
                        for n, value in enumerate(metric_list):
                            metric_name = metric_list[n]['metricName']
                            metric_name_list.append(metric_name)
                            metric_sample = metric_list[n]['metricSamples']
                            sample = metric_sample
                            my_sample_list =  str(sample).replace('[','').replace(']','')
                            sample = my_sample_list[16:]
                            if metric_name == "Temperature" or metric_name == "PowerAverageWatts" or metric_name == "PowerPeakWatts" or metric_name == "PowerMinimumWatts" or metric_name == "PowerAllocatedWatts":
                                tc = ("{}: {}" .format(metric_name, sample))
                                if sample != "null":
                                    result = "Pass"
                                    PassOrFail(result, tc)
                                else:
                                    result = "Fail"
                                    PassOrFail(result, tc)
                        if metric_name_list != perm_metric_name_monitored_list:
                            logging.testcases("One or more metric names are missing")
                            tc = "Carbon Utilization Samples"
                            result = "Fail"
                            PassOrFail(result, tc)
                        else:
                            logging.testcases("All metric names are present")
                elif model == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                    icm_util_list = get_icm_util_func(ip, auth, api, icm_uri)
                    metric_list = icm_util_list['metricList']
                    logging.testcases("Here are the utilization samples on ICM {}" .format(ic_name))
                    logging.testcases("Carbon model: {}" .format(model))
                    logging.testcases("Carbon firmware: {}" .format(fw_version))
                    logging.testcases("State of Carbon: {}" .format(state))
                    metric_name_list = []
                    if state == 'Configured':
                        for n, value in enumerate(metric_list):
                            metric_name = metric_list[n]['metricName']
                            metric_name_list.append(metric_name)
                            metric_sample = metric_list[n]['metricSamples']
                            sample = metric_sample
                            my_sample_list =  str(sample).replace('[','').replace(']','')
                            sample = my_sample_list[16:]
                            if metric_name == "Temperature" or metric_name == "PowerAverageWatts" or metric_name == "PowerPeakWatts" or metric_name == "PowerMinimumWatts" or metric_name == "PowerAllocatedWatts" or metric_name == "Cpu" or metric_name == "Memory":
                                tc = ("{}: {}" .format(metric_name, sample))
                                if sample != "null":
                                    result = "Pass"
                                    PassOrFail(result, tc)
                                else:
                                    result = "Fail"
                                    PassOrFail(result, tc)
                        if metric_name_list != perm_metric_name_configured_list:
                            logging.testcases("One or more metric names are missing")
                            tc = "Carbon Utilization Samples"
                            result = "Fail"
                            PassOrFail(result, tc)
                        else:
                            logging.testcases("All metric names are present")
                    elif state == 'Monitored':
                        for n, value in enumerate(metric_list):
                            metric_name = metric_list[n]['metricName']
                            metric_name_list.append(metric_name)
                            metric_sample = metric_list[n]['metricSamples']
                            sample = metric_sample
                            my_sample_list =  str(sample).replace('[','').replace(']','')
                            sample = my_sample_list[16:]
                            if metric_name == "Temperature" or metric_name == "PowerAverageWatts" or metric_name == "PowerPeakWatts" or metric_name == "PowerMinimumWatts" or metric_name == "PowerAllocatedWatts":
                                tc = ("{}: {}" .format(metric_name, sample))
                                if sample != "null":
                                    result = "Pass"
                                    PassOrFail(result, tc)
                                else:
                                    result = "Fail"
                                    PassOrFail(result, tc)
                        if metric_name_list != perm_metric_name_monitored_list:
                            logging.testcases("One or more metric names are missing")
                            tc = "Carbon Utilization Samples"
                            result = "Fail"
                            PassOrFail(result, tc)
                        else:
                            logging.testcases("All metric names are present")
                else:
                    logging.info("The ICM is not a carbon")

    
    def get_carbon_downlink_port_map(self, ip, api, auth):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        get_interconnect_list = ic_inst.GetInterconnect(ip, auth, api)
        icm_list = printDict(get_interconnect_list, ['model', 'ports','name', 'state'])
        port_list_dict = []
        logging.info("Getting a list of downlink ports that are online\n")
        for i, value in enumerate(ic_list):
            port_list = icm_list[i]['ports']
            ic_state = icm_list[i]['state']
            if ic_state == "Configured":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    port_name = port_list[p]['portName']
                    port_type = port_list[p]['portType']
                    port_local = port_list[p]['interconnectName']
                    fc_port_properties = port_list[p]['fcPortProperties']
                    if ic_port_status_reason == "LoggedIn" and port_type == "Downlink":
                        port_list_dict.append(ic_port_status_reason)
                        port_list_dict.append(port_type)
                        port_list_dict.append(port_name)
                        port_list_dict.append(port_local)
                        fc_port_map = fc_port_properties['downlinkToUplinkPortMapping']
                        port_list_dict.append(fc_port_map)
                        fc_port_map_is_trunk_master = fc_port_properties['mappedUplinkPortIsTrunkMaster']
                        port_list_dict.append(fc_port_map_is_trunk_master)
                        logging.info("The ICM in %s with downlink port %s is mapped to UL port %s and is trunk master %s" %(port_local,port_name,fc_port_map,fc_port_map_is_trunk_master))
        return port_list_dict
    
    
    def get_fc_logins_before(self, ip, auth, api, enc_name, icm_name_rdl):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting Interconnects")
        ic_ports_uri_dict = []
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_ports_uri_list = printDict(get_ic_dict, ['name', 'uri', 'model', 'enclosureName', 'ports'])
            for ic, value in enumerate(ic_ports_uri_list):
                ic_uri = ic_ports_uri_list[ic]['uri']
                ic_name = ic_ports_uri_list[ic]['name']
                ic_ports = ic_ports_uri_list[ic]['ports']
                ic_model = ic_ports_uri_list[ic]['model']
                if ic_model == "Virtual Connect SE 16Gb FC Module for Synergy" and ic_name == icm_name_rdl:
                    for p, value in enumerate(ic_ports):
                        ic_ports_uri = ic_ports[p]['uri']
                        ic_port_status_reason = ic_ports[p]['portStatusReason']
                        ic_port_properties = ic_ports[p]['fcPortProperties']
                        portName = ic_ports[p]['portName']
                        PortType = ic_ports[p]['portType']
                        PortLocal = ic_ports[p]['interconnectName']
                        if ic_port_status_reason == "LoggedIn" and PortType == "Uplink":
                            count_logins = ic_port_properties['loginsCount']
                            if count_logins == 4:
                                ic_ports_uri_dict.append(ic_ports_uri)
    
                elif ic_model == "Virtual Connect SE 32Gb FC Module for Synergy" and ic_name == icm_name_rdl:
                    for p, value in enumerate(ic_ports):
                        ic_ports_uri = ic_ports[p]['uri']
                        ic_port_status_reason = ic_ports[p]['portStatusReason']
                        ic_port_properties = ic_ports[p]['fcPortProperties']
                        portName = ic_ports[p]['portName']
                        PortType = ic_ports[p]['portType']
                        PortLocal = ic_ports[p]['interconnectName']
                        if ic_port_status_reason == "LoggedIn" and PortType == "Uplink":
                            count_logins = ic_port_properties['loginsCount']
                            if count_logins == 4:
                                ic_ports_uri_dict.append(ic_ports_uri)
        return ic_ports_uri_dict
    
    def get_fc_logins_after(self, ip, auth, api, enc_name, icm_name_rdl):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting Interconnects")
        ic_ports_uri_dict = []
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_ports_uri_list = printDict(get_ic_dict, ['name', 'uri', 'model', 'enclosureName', 'ports'])
            for ic, value in enumerate(ic_ports_uri_list):
                ic_uri = ic_ports_uri_list[ic]['uri']
                ic_name = ic_ports_uri_list[ic]['name']
                ic_ports = ic_ports_uri_list[ic]['ports']
                ic_model = ic_ports_uri_list[ic]['model']
                if ic_model == "Virtual Connect SE 16Gb FC Module for Synergy" and ic_name == icm_name_rdl:
                    for p, value in enumerate(ic_ports):
                        ic_ports_uri = ic_ports[p]['uri']
                        ic_port_status_reason = ic_ports[p]['portStatusReason']
                        ic_port_properties = ic_ports[p]['fcPortProperties']
                        portName = ic_ports[p]['portName']
                        PortType = ic_ports[p]['portType']
                        PortLocal = ic_ports[p]['interconnectName']
                        if ic_port_status_reason == "LoggedIn" and PortType == "Uplink":
                            count_logins = ic_port_properties['loginsCount']
                            if count_logins == 1:
                                ic_ports_uri_dict.append(ic_ports_uri)

                elif ic_model == "Virtual Connect SE 32Gb FC Module for Synergy" and ic_name == icm_name_rdl:
                    for p, value in enumerate(ic_ports):
                        ic_ports_uri = ic_ports[p]['uri']
                        ic_port_status_reason = ic_ports[p]['portStatusReason']
                        ic_port_properties = ic_ports[p]['fcPortProperties']
                        portName = ic_ports[p]['portName']
                        PortType = ic_ports[p]['portType']
                        PortLocal = ic_ports[p]['interconnectName']
                        if ic_port_status_reason == "LoggedIn" and PortType == "Uplink":
                            count_logins = ic_port_properties['loginsCount']
                            if count_logins == 1:
                                ic_ports_uri_dict.append(ic_ports_uri)
        return ic_ports_uri_dict



class LogicalEnclosure(object):

    def GetLogicalEnclosure(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-enclosures" %ip
        headers = {
            'auth': auth,
            'x-api-version': api,
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
        
    def GenerateLESupportDump(self, ip, auth, api, le_uri, encrypted, support_dump_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/support-dumps" %(ip, le_uri)
        payload = "{\r\n    \"encrypt\": %s,\r\n    \"errorCode\": \"%s\",\r\n    \"excludeApplianceDump\": false\r\n}" %(encrypted, support_dump_name)
        headers = {
        'Content-Type': 'application/json',
        'x-api-version': api,
            'auth': auth
        }
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.headers)
        logging.debug(response.headers)
        return(response.headers)
        
    def DownloadLEsupportDump(self, ip, auth, api, encrypted, support_dump_link, eagle):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        TimeStamp = time.strftime("%Y%m%d_%H%M%S")
        file_name = (TimeStamp +'_LE_SupportDump_' + eagle + '_' + encrypted +'.sdmp')
        folder_path = os.path.join('C:', os.sep, 'SupportDumps', '{}') .format(file_name)
        url = "https://%s%s" %(ip, support_dump_link)
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        with open (folder_path, 'wb') as f:
            logging.info("Downloading %s" % file_name)
            response = requests.get(url, headers=headers, stream=True, verify=False)
            total_length = response.headers.get('content-length')
            ValidateResponse(response.status_code, response.reason, response.text)
            if total_length is None: # no content length header
                f.write(response.content)
            else:
                dl = 0
                total_length = int(total_length)
                for data in response.iter_content(chunk_size=4096):
                    dl += len(data)
                    f.write(data)
                    done = int(50 * dl / total_length)
                    sys.stdout.write("\r[%s%s]" % ('=' * done, ' ' * (50-done)) )
                    sys.stdout.flush()
        return folder_path, file_name
        
    def Create_le_support_dump(self, ip, auth, api, encrypted, eagle):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        support_dump_name = eagle
        logging.info("Getting Logical Enclosure")
        le_inst = LogicalEnclosure()
        le_dict = le_inst.GetLogicalEnclosure(ip, auth, api)
        le_list_uri = printDict(le_dict, ['uri'])
        le_uri = le_list_uri[0]['uri']
        
        headers_dict = le_inst.GenerateLESupportDump(ip, auth, api, le_uri, encrypted, support_dump_name)
        task_uri = headers_dict['Location']
        logging.info("The support dump task is: {}" .format(task_uri))
        countdown(5)
        task_dict = get_task(ip, auth, api, task_uri)
        task_state = task_dict['taskState']
        while task_state == 'Running':
            task_dict = get_task(ip, auth, api, task_uri)
            task_state = task_dict['taskState']
            logging.info("The state of support dump task: {}" .format(task_state))
            if task_state == 'Running':
                logging.info ("Support Dump is being created")
            elif task_state == 'Completed':
                support_dump_link = task_dict['associatedResource']['resourceUri']
                logging.info("The support dump has been created, downloading support dump.")
                sd_file = le_inst.DownloadLEsupportDump(ip, auth, api, encrypted, support_dump_link, eagle)
                break
            countdown(180)
        return sd_file



class DeleteLogicalEnclosure(object):

    def DeleteLE(self, ip, auth, api, le_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, le_uri)
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        logging.debug("url: %s" % url)
        response = requests.request("DELETE", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class  ApplianceBackup(object):


    def GetApplianceBackup(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/backups/" % ip
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def CreateApplianceBackup(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/backups" %ip
        payload = {}
        headers = {
        'x-api-version': api,
            'auth': auth
        }
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.headers)
        logging.debug(response.headers)
        return(response.headers)

    def RestoreApplianceFromBackup(self, ip, auth, api, backup_filename):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/restores" %ip
        payload = "{\r\n    \"uriOfBackupToRestore\" : \"%s\"\r\n}" %backup_filename
        headers = {
        'x-api-version': api,
        'auth': auth,
        'Content-Type': 'application/json'
        }
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.headers)
        logging.debug(response.headers)
        return(response.headers)
    
    def GetApplianceRestoreStatus(self, ip, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/restores" %ip
        headers = {
            'x-api-version': api
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def download_backup(self, ip, auth, api, download_filename, eagle):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        TimeStamp = time.strftime("%Y%m%d_%H%M%S")
        file_name = (TimeStamp +'_Backup_' + eagle + '.bkp')
        folder_path = os.path.join('C:', os.sep, 'ApplianceBackup', '{}') .format(file_name)
        url = "https://%s%s" %(ip, download_filename)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'Accept': 'application/octet-stream',
            'Accept': 'application/json'
            }
        with open (folder_path, 'wb') as f:
            logging.info("Downloading %s" % file_name)
            response = requests.get(url, headers=headers, stream=True, verify=False)
            total_length = response.headers.get('content-length')
            ValidateResponse(response.status_code, response.reason, response.text)
            if total_length is None: # no content length header
                f.write(response.content)
            else:
                dl = 0
                total_length = int(total_length)
                for data in response.iter_content(chunk_size=4096):
                    dl += len(data)
                    f.write(data)
                    done = int(50 * dl / total_length)
                    sys.stdout.write("\r[%s%s]" % ('=' * done, ' ' * (50-done)) )
                    sys.stdout.flush()
        return folder_path
        
    def create_appl_backup(self, ip, auth, api, eagle):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        backup_filename = eagle
        backup_restore_inst = ApplianceBackup()
        headers_dict = backup_restore_inst.CreateApplianceBackup(ip, auth, api)
        task_uri = headers_dict['Location']
        logging.info("The backup task is: {}" .format(task_uri))
        countdown(5)
        task_dict = get_backup_task(ip, auth, api, task_uri)
        task_state = task_dict['taskState']
        while task_state == 'Running':
            task_dict = get_backup_task(ip, auth, api, task_uri)
            task_state = task_dict['taskState']
            logging.info("The state of backup task: {}" .format(task_state))
            if task_state == 'Running':
                logging.info("backup file is being created")
            elif task_state == 'Completed':
                backup_file_link = task_dict['associatedResource']['resourceUri']
                logging.info("The backup file has been created")
                break
            countdown(30)
        return backup_file_link



class ApplianceSettings(object):

    def GetIPv4Subnet(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/id-pools/ipv4/subnets" % ip
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def CreateIPv4Subnet(self, ip, auth, api, network_id, gateway):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/id-pools/ipv4/subnets/" %ip
        payload = "{\r\n    \"type\": \"Subnet\",\r\n    \"name\": \"IPv4Subnet\",\r\n    \"networkId\": \"%s\",\r\n     \"subnetmask\":\"255.255.255.0\",\r\n    \"gateway\":\"%s\",\r\n     \"domain\":\"Austinlab.net\",\r\n    \"dnsServers\":[]\r\n}" %(network_id, gateway)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreateIPv4Range(self, ip, auth, api, start_address, end_address , subnet_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/id-pools/ipv4/ranges/" %ip
        payload = "{\r\n    \"type\": \"Range\",\r\n    \"name\": \"IPv4-Range\",\r\n    \"startStopFragments\": [\r\n    {\"startAddress\": \"%s\",    \"endAddress\": \"%s\"}\r\n   ],\r\n    \"subnetUri\":\"%s\"\r\n}" %(start_address, end_address, subnet_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


    def delete_ipv4_subnet(self, ip, auth, api, subnet_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, subnet_uri)
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        response = requests.request("DELETE", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class ConnectorDigDiagInfo(object):

    def GetInterconnectConnectorDigDiagInfo(self, ip, auth, api, ic_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/pluggableModuleInformation/" %(ip, ic_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))


class Enclosures(object):

    def GetEnc(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/enclosures" % ip
        headers = {
            'x-api-version': api,
            'content-type': "application/json",
            'auth': auth
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def EncGroup(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/enclosure-groups" % ip
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def IcLinkTopologies(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/interconnect-link-topologies" %ip
        headers = {
            'auth': auth,
            'x-api-version': api,
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def RestartOneview(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Restarting OneView\n")
        url = "https://%s/rest/appliance/shutdown?type=REBOOT" %ip
        headers = {
            'auth': auth,
            'x-api-version': api,
            }
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def get_enclosure_name_old(self, ip, auth, api):
        logging.info("Getting Enclosure Group ")
        enc_instance = Enclosures()
        enc_dict = enc_instance.GetEnc(ip, auth, api)
        enc_name_list = printDict(enc_dict, ['name'])
        for x, value in enumerate(enc_name_list):
            each_enc_name = enc_name_list[x]['name']
        return each_enc_name
    
    def get_enclosure_name(self, ip, auth, api):
        EncNameDict = []
        logging.info("Getting Enclosure Group ")
        enc_instance = Enclosures()
        enc_dict = enc_instance.GetEnc(ip, auth, api)
        enc_name_list = printDict(enc_dict, ['name'])
        for x, value in enumerate(enc_name_list):
            each_enc_name_list = enc_name_list[x]['name']
            EncNameDict.append(each_enc_name_list)
        return EncNameDict
    
    def update_enc_name(self, ip, api, auth, id, new_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://{}/rest/enclosures/{}" .format(ip, id)
        payload = "[\r\n    { \"op\": \"replace\", \"path\": \"/name\", \"value\": \"%s\" }\r\n]" %new_name
        headers = {
            'auth': auth,
            'x-api-version': api,
            'Content-Type': "application/json",
            'If-Match': "*"
            }
        response = requests.request("PATCH", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class StateOfEnclosure(object):

    def EncRefreshState(self, ip, auth, api):
        logging.info("Getting Enclosures ")
        enc_instance = Enclosures()
        enc_dict = enc_instance.GetEnc(ip, auth, api)
        enc_name_list = printDict(enc_dict, ['name'])
        enc_refresh_state = printDict(enc_dict, ['refreshState'])
        for i, value in enumerate(enc_name_list):
            enc_name = enc_name_list[i]['name'] 
            refresh = enc_refresh_state[i]['refreshState']
            if refresh == "NotRefreshing": 
                logging.info ("%s is not refreshing" %enc_name)
            elif refresh == "Refreshing":
                logging.info ("%s is refreshing" %enc_name)
                logging.info("Waiting 2 min for refresh to complete")
                countdown(120)
                logging.info("Checking refresh state again")
                count = 0
                while refresh == "Refreshing":
                    enc_dict = enc_instance.GetEnc(ip, auth, api)
                    enc_refresh_state = printDict(enc_dict, ['refreshState'])
                    refresh = enc_refresh_state[i]['refreshState']
                    if refresh == "Refreshing":
                        logging.info("Waiting another 2 mins for refresh to complete")
                        countdown(120)
                        count +=1
                        if count == 25:
                            logging.info("There must something wrong, quiting script")
                            sys.exit(0)
                    elif refresh == "NotRefreshing":
                        logging.info("The refresh has completed, moving on.")
            elif refresh == "RefreshPending":
                logging.info ("%s is prending a refresh task" %enc_name)
                logging.info("Waiting 2 min for refresh task to complete")
                countdown(120)
                logging.info("Checking refresh state again")
                count = 0
                while refresh == "RefreshPending":
                    enc_dict = enc_instance.GetEnc(ip, auth, api)
                    enc_refresh_state = printDict(enc_dict, ['refreshState'])
                    refresh = enc_refresh_state[i]['refreshState']
                    if refresh == "RefreshPending":
                        logging.info("Waiting another 1 min for refresh to complete")
                        countdown(60)
                        count +=1
                        if count == 25:
                            logging.info("There must something wrong, quiting script")
                            sys.exit(0)
                    elif refresh == "Refreshing":
                        logging.info("Waiting another 2 mins for refresh to complete")
                        countdown(120)
                        count +=1
                        if count == 25:
                            logging.info("There must something wrong, quiting script")
                            sys.exit(0)
                    elif refresh == "NotRefreshing":
                        logging.info("The refresh has completed, moving on.")
                    else:
                        continue

        return refresh


class DeleteEnclosureGroup(object):

    def DeleteEG(self, ip, auth, api, enc_grp_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        logging.debug("url: %s" % url)    
        response = requests.request("DELETE", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class DeleteLogicalInterconnectGroup(object):

    def DeleteLIG(self, ip, auth, api, lig_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            }
        response = requests.request("DELETE", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class DeleteNetworks(object):

    def DeleteFcNetwork(self, ip, auth, api, network_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/%s" % (ip, network_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'accept-language': "en_US"
            }
        response = requests.request("DELETE", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(response.text)


class CreateLogicalEnclosure(object):

    def CreateLE(self, ip, auth, api, enc_uri, enc_grp_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-enclosures" %ip
        payload = "{\r\n   \"name\" : \"LE\",\r\n   \"enclosureUris\":\r\n   [\r\n                \"%s\"\r\n   ],\r\n  \"enclosureGroupUri\": \"%s\", \r\n   \"firmwareBaselineUri\" : null,\r\n   \"forceInstallFirmware\" : false\r\n}" %(enc_uri, enc_grp_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            'accept-language': "en-US",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class CreateLogicalEnclosureME(object):

    def CreateLeE28(self, ip, auth, api, enc1_uri, enc2_uri, enc_grp_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-enclosures" %ip
        payload = "{\r\n   \"name\" : \"LE\",\r\n   \"enclosureUris\":\r\n   [\r\n  \"%s\",\r\n\t\t\t\t\"%s\"\r\n   ],\r\n  \"enclosureGroupUri\": \"%s\", \r\n   \"firmwareBaselineUri\" : null,\r\n   \"forceInstallFirmware\" : false\r\n}" %(enc1_uri, enc2_uri, enc_grp_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            'accept-language': "en-US"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreateLeE3(self, ip, auth, api, enc1_uri, enc2_uri, enc3_uri, enc_grp_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-enclosures" %ip
        payload = "{\r\r   \"name\" : \"LE\",\r\r   \"enclosureUris\":\r\r   [ \"%s\", \"%s\", \"%s\"\r   ],\r\r  \"enclosureGroupUri\": \"%s\", \r\r   \"firmwareBaselineUri\" : null,\r\r   \"forceInstallFirmware\" : false\r\r}" %(enc1_uri, enc2_uri, enc3_uri, enc_grp_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            'accept-language': "en-US"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class CreateLogicalInterconnectGroup(object):

    def CreateLigE21_NonSnmpv3(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV300\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 19,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 20,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 19,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 20,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"1.2.3.7\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\"\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}" %(ic_type_uri, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateLigE21(self, ip, auth, api, ic_type_uri, fc_mode, v3_enabled, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, fc_mode, consistency_check ,fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, fc_mode, consistency_check, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateLigE21NonTrunkNonSnmpv3(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"NONE\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"NONE\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"NONE\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": false,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"%(ic_type_uri, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateLigE20(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t\t{\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n       ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n}" %(ic_type_uri, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateLigASideE21(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_A-SIDE\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 19,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 20,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantASide\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"1.2.3.7\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\"\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}" %(ic_type_uri, fc_net_enc1_bay1_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateLigASideE21Trunk(self, ip, auth, api, ic_type_uri, fc_mode, v3_enabled, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_A-SIDE\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantASide\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": %s,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, fc_mode, fc_net_enc1_bay1_uri, fc_mode, fc_net_enc1_bay1_quri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateLigASideE21Trunk_old(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_A-SIDE\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"fcMode\" : \"TRUNK\",\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n    ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"fcMode\" : \"TRUNK\",\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q1-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantASide\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin5\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": true,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 1024\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 4096\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 1\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin5\",\r\n        \"port\": 8092\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 1024\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateLigBSideE21(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay4_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_B-SIDE\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 19,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 20,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantBSide\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 3600,\r\n      \"sampleCount\": 24,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"1.2.3.7\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\"\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}" %(ic_type_uri, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateLigBSideE21Trunk(self, ip, auth, api, ic_type_uri, fc_mode, v3_enabled, fc_net_enc1_bay4_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_B-SIDE\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantBSide\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": %s,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, fc_mode, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateLigE155(self, ip, auth, api, lig_name, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, fc_mode, v3_enabled, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES256\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(lig_name, ic_type_uri, ic_type_uri, fc_mode, consistency_check ,fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay4_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreateLigASideE155Trunk(self, ip, auth, api, ic_type_uri, fc_mode, v3_enabled, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_A-SIDE\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantASide\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES256\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES256\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES256\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, fc_mode, consistency_check, fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreateLigBSideE155Trunk(self, ip, auth, api, ic_type_uri, fc_mode, fc_net_enc1_bay4_uri, v3_enabled, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_B-SIDE\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n   \"consistencyChecking\" : \"%s\",\r\n  \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantBSide\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES256\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES256\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, fc_mode, consistency_check, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


    def CreateLigE30(self, ip, auth, api, lig_name_carbon, ic_type_uri_carbon, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_mode, v3_enabled, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload="{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-FC\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-FC\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(lig_name_carbon, ic_type_uri_carbon, ic_type_uri_carbon, fc_mode, consistency_check ,fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreatePotashLigE30(self, ip, auth, api, lig_name_potash, consistency_check, icm_type_uri_potash, fc_net_potash_bay6_uri, eth_net_vlan10_uri, eth_net_vlan30_uri, eth_net_vlan40_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload="{\r\n\"type\": \"logical-interconnect-groupV8\",\r\n\"name\": \"%s\",\r\n\"enclosureType\": \"SY12000\",\r\n\"enclosureIndexes\": [1],\r\n\"interconnectBaySet\": 3,\r\n\"redundancyType\": \"Redundant\",\r\n\"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 3\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 6\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        }\r\n    ]\r\n},\r\n\"uplinkSets\": [\r\n    {\r\n    \"networkType\": \"Ethernet\",\r\n    \"networkUris\": [\"%s\"],\r\n    \"mode\": \"Auto\",\r\n    \"fcMode\": \"NA\",\r\n    \"name\": \"POTASH-BAY6-VL-40\",\r\n    \"ethernetNetworkType\": \"Tagged\",\r\n    \"lacpTimer\": \"Short\",\r\n    \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n    \"consistencyChecking\": \"%s\",\r\n    \"failoverActiveMemberThreshold\": 4,\r\n    \"failoverBandwidthThreshold\": 50,\r\n    \"failoverType\": \"AllActiveUplinksOffline\",\r\n    \"lagPortBalance\": \"Enabled\",\r\n    \"logicalPortConfigInfos\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Port\",\r\n                        \"relativeValue\": 61\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 6\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"desiredSpeed\": \"Auto\",\r\n            \"desiredFecMode\": \"Auto\"\r\n        }\r\n    ]\r\n    },\r\n    {\r\n        \"networkType\": \"Ethernet\",\r\n        \"networkUris\": [\"%s\",\r\n                        \"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"primaryPort\": null,\r\n        \"name\": \"POTASH-BAY3-LAG-VL10-30\",\r\n        \"ethernetNetworkType\": \"Tagged\",\r\n        \"lacpTimer\": \"Short\",\r\n        \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"failoverActiveMemberThreshold\": 4,\r\n        \"failoverBandwidthThreshold\": 50,\r\n        \"failoverType\": \"AllActiveUplinksOffline\",\r\n        \"lagPortBalance\": \"Enabled\",\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 61\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 66\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ]\r\n    },\r\n    {\r\n        \"networkType\": \"FibreChannel\",\r\n        \"networkUris\": [\"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"name\": \"POTASH-BAY6-FC\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 67\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n}\r\n\r\n" %(lig_name_potash, icm_type_uri_potash, icm_type_uri_potash, eth_net_vlan40_uri, consistency_check, eth_net_vlan10_uri, eth_net_vlan30_uri, consistency_check, fc_net_potash_bay6_uri, consistency_check)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreateNitroLigE30(self, ip, auth, api, lig_name_nitro, consistency_check, icm_type_uri_nitro, fc_net_nitro_bay2_uri, eth_net_vlan10_uri, eth_net_vlan30_uri, eth_net_vlan40_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload="{\r\n\"type\": \"logical-interconnect-groupV8\",\r\n\"name\": \"%s\",\r\n\"enclosureType\": \"SY12000\",\r\n\"enclosureIndexes\": [1],\r\n\"interconnectBaySet\": 2,\r\n\"redundancyType\": \"Redundant\",\r\n\"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 5\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 2\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        }\r\n    ]\r\n},\r\n\"uplinkSets\": [\r\n    {\r\n    \"networkType\": \"Ethernet\",\r\n    \"networkUris\": [\"%s\"],\r\n    \"mode\": \"Auto\",\r\n    \"fcMode\": \"NA\",\r\n    \"name\": \"NITRO-BAY5-VLAN-40\",\r\n    \"ethernetNetworkType\": \"Tagged\",\r\n    \"lacpTimer\": \"Short\",\r\n    \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n    \"consistencyChecking\": \"%s\",\r\n    \"failoverActiveMemberThreshold\": 4,\r\n    \"failoverBandwidthThreshold\": 50,\r\n    \"failoverType\": \"AllActiveUplinksOffline\",\r\n    \"lagPortBalance\": \"Enabled\",\r\n    \"logicalPortConfigInfos\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Port\",\r\n                        \"relativeValue\": 61\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 5\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"desiredSpeed\": \"Auto\",\r\n            \"desiredFecMode\": \"Auto\"\r\n        }\r\n    ]\r\n    },\r\n    {\r\n        \"networkType\": \"Ethernet\",\r\n        \"networkUris\": [\"%s\",\r\n                        \"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"primaryPort\": null,\r\n        \"name\": \"NITRO-BAY2-VLAN-10_30\",\r\n        \"ethernetNetworkType\": \"Tagged\",\r\n        \"lacpTimer\": \"Short\",\r\n        \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"failoverActiveMemberThreshold\": 4,\r\n        \"failoverBandwidthThreshold\": 50,\r\n        \"failoverType\": \"AllActiveUplinksOffline\",\r\n        \"lagPortBalance\": \"Enabled\",\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 61\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 2\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ]\r\n    },\r\n    {\r\n        \"networkType\": \"FibreChannel\",\r\n        \"networkUris\": [\"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"name\": \"NITRO-BAY2-FC\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 66\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Speed32G\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n}" %(lig_name_nitro, icm_type_uri_nitro, icm_type_uri_nitro, eth_net_vlan40_uri, consistency_check, eth_net_vlan10_uri, eth_net_vlan30_uri, consistency_check, fc_net_nitro_bay2_uri, consistency_check)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreatePotashLigE31(self, ip, auth, api, lig_name_potash, consistency_check, icm_type_uri_potash, fc_net_potash_bay6_uri, eth_net_vlan10_uri, eth_net_vlan30_uri, eth_net_vlan40_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload="{\r\n\"type\": \"logical-interconnect-groupV8\",\r\n\"name\": \"%s\",\r\n\"enclosureType\": \"SY12000\",\r\n\"enclosureIndexes\": [1],\r\n\"interconnectBaySet\": 3,\r\n\"redundancyType\": \"Redundant\",\r\n\"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 3\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 6\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        }\r\n    ]\r\n},\r\n\"uplinkSets\": [\r\n    {\r\n    \"networkType\": \"Ethernet\",\r\n    \"networkUris\": [\"%s\"],\r\n    \"mode\": \"Auto\",\r\n    \"fcMode\": \"NA\",\r\n    \"name\": \"POTASH-BAY6-VL-40\",\r\n    \"ethernetNetworkType\": \"Tagged\",\r\n    \"lacpTimer\": \"Short\",\r\n    \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n    \"consistencyChecking\": \"%s\",\r\n    \"failoverActiveMemberThreshold\": 4,\r\n    \"failoverBandwidthThreshold\": 50,\r\n    \"failoverType\": \"AllActiveUplinksOffline\",\r\n    \"lagPortBalance\": \"Enabled\",\r\n    \"logicalPortConfigInfos\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Port\",\r\n                        \"relativeValue\": 62\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 6\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"desiredSpeed\": \"Auto\",\r\n            \"desiredFecMode\": \"Auto\"\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 6\r\n                    },\r\n                    {\r\n                        \"type\": \"Port\",\r\n                        \"relativeValue\": 63\r\n                    }\r\n                ]\r\n            },\r\n            \"desiredSpeed\": \"Auto\",\r\n            \"desiredFecMode\": \"Auto\"\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 6\r\n                    },\r\n                    {\r\n                        \"type\": \"Port\",\r\n                        \"relativeValue\": 64\r\n                    }\r\n                ]\r\n            },\r\n            \"desiredSpeed\": \"Auto\",\r\n            \"desiredFecMode\": \"Auto\"\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 6\r\n                    },\r\n                    {\r\n                        \"type\": \"Port\",\r\n                        \"relativeValue\": 65\r\n                    }\r\n                ]\r\n            },\r\n            \"desiredSpeed\": \"Auto\",\r\n            \"desiredFecMode\": \"Auto\"\r\n        }\r\n    ]\r\n    },\r\n    {\r\n        \"networkType\": \"Ethernet\",\r\n        \"networkUris\": [\"%s\",\r\n                        \"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"primaryPort\": null,\r\n        \"name\": \"POTASH-BAY3-LAG-VL10-30\",\r\n        \"ethernetNetworkType\": \"Tagged\",\r\n        \"lacpTimer\": \"Short\",\r\n        \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"failoverActiveMemberThreshold\": 4,\r\n        \"failoverBandwidthThreshold\": 50,\r\n        \"failoverType\": \"AllActiveUplinksOffline\",\r\n        \"lagPortBalance\": \"Enabled\",\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 61\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ]\r\n    },\r\n    {\r\n        \"networkType\": \"FibreChannel\",\r\n        \"networkUris\": [\"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"name\": \"POTASH-BAY6-FC\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 67\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n}\r\n" %(lig_name_potash, icm_type_uri_potash, icm_type_uri_potash, eth_net_vlan40_uri, consistency_check, eth_net_vlan10_uri, eth_net_vlan30_uri, consistency_check, fc_net_potash_bay6_uri, consistency_check)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreateNitroLigE32(self, ip, auth, api, lig_name_nitro, consistency_check, icm_type_uri_nitro, fc_net_nitro_bay5_uri, eth_net_vlan10_uri, eth_net_vlan30_uri, eth_net_vlan40_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload="{\r\n\"type\": \"logical-interconnect-groupV8\",\r\n\"name\": \"%s\",\r\n\"enclosureType\": \"SY12000\",\r\n\"enclosureIndexes\": [1],\r\n\"interconnectBaySet\": 2,\r\n\"redundancyType\": \"Redundant\",\r\n\"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 5\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 2\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        }\r\n    ]\r\n},\r\n\"uplinkSets\": [\r\n    {\r\n    \"networkType\": \"Ethernet\",\r\n    \"networkUris\": [\"%s\"],\r\n    \"mode\": \"Auto\",\r\n    \"fcMode\": \"NA\",\r\n    \"name\": \"NITRO-BAY5-VLAN-40\",\r\n    \"ethernetNetworkType\": \"Tagged\",\r\n    \"lacpTimer\": \"Short\",\r\n    \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n    \"consistencyChecking\": \"%s\",\r\n    \"failoverActiveMemberThreshold\": 4,\r\n    \"failoverBandwidthThreshold\": 50,\r\n    \"failoverType\": \"AllActiveUplinksOffline\",\r\n    \"lagPortBalance\": \"Enabled\",\r\n    \"logicalPortConfigInfos\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Port\",\r\n                        \"relativeValue\": 61\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 5\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"desiredSpeed\": \"Auto\",\r\n            \"desiredFecMode\": \"Auto\"\r\n        }\r\n    ]\r\n    },\r\n    {\r\n        \"networkType\": \"Ethernet\",\r\n        \"networkUris\": [\"%s\",\r\n                        \"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"primaryPort\": null,\r\n        \"name\": \"NITRO-BAY2-VLAN-10_30\",\r\n        \"ethernetNetworkType\": \"Tagged\",\r\n        \"lacpTimer\": \"Short\",\r\n        \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"failoverActiveMemberThreshold\": 4,\r\n        \"failoverBandwidthThreshold\": 50,\r\n        \"failoverType\": \"AllActiveUplinksOffline\",\r\n        \"lagPortBalance\": \"Enabled\",\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 61\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 2\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ]\r\n    },\r\n    {\r\n        \"networkType\": \"FibreChannel\",\r\n        \"networkUris\": [\"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"name\": \"NITRO-BAY5-FC\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 5\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 66\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Speed32G\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n}" %(lig_name_nitro, icm_type_uri_nitro, icm_type_uri_nitro, eth_net_vlan40_uri, consistency_check, eth_net_vlan10_uri, eth_net_vlan30_uri, consistency_check, fc_net_nitro_bay5_uri, consistency_check)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    


class UpdateLogicalInterconnectGroup(object):

    def UpdateLIGE21Ports7And8(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, lig_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_Ports_7_8\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 19,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 20,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1_Ports_7_8\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n\t\t{\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 19,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 20,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4_Ports_7_8\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri,fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def UpdateLigE21Default(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, lig_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 19,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 20,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 19,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 20,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"1.2.3.7\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\"\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}" %(ic_type_uri, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def UpdateLigNoTrunkE21(self, ip, auth, api, ic_type_uri, lig_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, fc_mode, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n   \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n   \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": true,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, fc_mode, consistency_check, fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, fc_mode, consistency_check, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def UpdateLigTrunkE21(self, ip, auth, api, ic_type_uri, lig_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, fc_mode, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n   \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": true,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, fc_mode, consistency_check, fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, fc_mode, consistency_check, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def UpdateLigTrunkVariousSpeedsE21(self, ip, auth, api, ic_type_uri, lig_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, fc_mode, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n  \"consistencyChecking\" : \"%s\",\r\n    \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n       \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": true,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, fc_mode, consistency_check, fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, fc_mode, consistency_check, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def UpdateLigTrunkVariousSpeedsE21_2(self, ip, auth, api, ic_type_uri, lig_uri, fc_mode, v3_enabled, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, fc_mode, fc_net_enc1_bay1_uri, fc_mode, fc_net_enc1_bay1_quri, fc_mode, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def UpdateLigE21VariousSpeedsLigULSNames(self, ip, auth, api, ic_type_uri, lig_uri, fc_mode, v3_enabled, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG-UPDATED\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n     \"consistencyChecking\" : \"%s\",\r\n    \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-UPDATED\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n     \"consistencyChecking\" : \"%s\",\r\n    \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS-UPDATED\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n   \"consistencyChecking\" : \"%s\",\r\n    \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-UPDATED\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": %s,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, fc_mode, consistency_check, fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, fc_mode, consistency_check, fc_net_enc1_bay4_uri,v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def UpdateLigEagle136VariousSpeeds(self, ip, auth, api, ic_type_uri, lig_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, fc_mode, v3_enabled):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed32G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed32G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed32G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed32G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, fc_mode, fc_net_enc1_bay1_uri, fc_mode, fc_net_enc1_bay1_quri, fc_mode, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def update_lig_no_network_bay1_eagle155(self, ip, auth, api, ic_type_uri, lig_uri, fc_mode, v3_enabled, fc_net_enc1_bay4_uri, fc_net_enc1_bay1_quri, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES256\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, fc_mode, consistency_check, fc_mode, consistency_check, fc_net_enc1_bay4_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def update_lig_no_network_bay4_eagle155(self, ip, auth, api, ic_type_uri, lig_uri, fc_mode, v3_enabled, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES256\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, fc_mode, consistency_check, fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_mode, consistency_check, fc_net_enc1_bay1_quri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def update_lig_both_networks_eagle155(self, ip, auth, api, ic_type_uri, lig_uri, fc_mode, v3_enabled, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_net_enc1_bay1_quri, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES256\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, fc_mode, consistency_check ,fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay4_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class PowerStateOfCarbon(object):

    def PowerOnCarbon(self, ip, auth, api, icm_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" % (ip, icm_uri)
        payload = "[\r\n        { \"op\": \"replace\", \"path\": \"/powerState\", \"value\": \"On\"}\r\n    ]\r\n"
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PATCH", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def PowerOffCarbon(self, ip, auth, api, icm_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" % (ip, icm_uri)
        
        payload = "[\r\n        { \"op\": \"replace\", \"path\": \"/powerState\", \"value\": \"Off\"}\r\n    ]\r\n"
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PATCH", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def ResetCarbon(self, ip, auth, api, icm_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" % (ip, icm_uri)
        
        payload = "[\r\n        { \"op\": \"replace\", \"path\": \"/deviceResetState\", \"value\": \"Reset\"}\r\n    ]\r\n"
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PATCH", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class EfuseResource(object):

    def EfuseCarbon(self, ip, auth, api, enc_uri, bay):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_uri)
        
        payload = "[\r\n\r\n\t{\"op\": \"replace\", \"path\": \"/interconnectBays/%s/bayPowerState\", \"value\": \"E-Fuse\"}\r\n\r\n]\r\n" %bay
        headers = {
            'content-type': "application/json",
            'x-api-version': api,
            'auth': auth,
            'if-match': "*",
            }
        
        response = requests.request("PATCH", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def EfuseCarbonBay1(self, ip, auth, api, enc_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_uri)
        
        payload = "[\r\n\r\n\t{\"op\": \"replace\", \"path\": \"/interconnectBays/1/bayPowerState\", \"value\": \"E-Fuse\"}\r\n\r\n]\r\n    "
        headers = {
            'content-type': "application/json",
            'x-api-version': api,
            'auth': auth,
            'if-match': "*",
            }
        
        response = requests.request("PATCH", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def EfuseBladeServer(self, ip, auth, api, enc_uri, bay):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_uri)
        
        payload = "[\r\n\r\n\t{\"op\": \"replace\", \"path\": \"/deviceBays/%s/bayPowerState\", \"value\": \"E-Fuse\"}\r\n\r\n]\r\n" %bay
        headers = {
            'content-type': "application/json",
            'x-api-version': api,
            'auth': auth,
            'if-match': "*",
            }
        
        response = requests.request("PATCH", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class LogicalInterconnects(object):

    def GetLogicalInterconnects(self, ip, auth, api):
        logging.debug("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnects" % ip
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def GetUplinkSets(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/uplink-sets" % ip
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def RedistributeLogins(self, ip, api, auth, li_uri, uls_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/redistributeLogins" %(ip, li_uri)
        payload = "{\r\n    \"uplinkSets\": [\"%s\"]\r\n}" %(uls_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        logging.debug(response.headers)
        return(response.headers)


class UpdateLogicalInterconnects(object):

    def UpdateLiFromGroup(self, ip, auth, api, li_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s/compliance" % (ip,li_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("url: %s" % url)
        success = False
        while success == False:
            response = requests.request("PUT", url, headers=headers, verify=False)
            success = ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    


class UpdateLogicalInterconnectGroupME(object):

    def UpdateLigTwoE28Default(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, lig2_uri, consistency_check, v3_enabled):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig2_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n  \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n   \"fcMode\": \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n  \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n   \"v3Enabled\": \"%s\",\r\n  \"trapDestinations\": [\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"1.2.3.8\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.0.0\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"communityString\": \"public\"\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(lig_name, icm_type_uri, icm_type_uri, fc_net_enc2_bay1_uri, consistency_check, fc_net_enc2_bay4_uri, consistency_check, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)  
    
    def UpdateLigE28Default(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, lig1_uri, consistency_check, v3_enabled):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig1_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"fcMode\" : \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"fcMode\" : \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 29,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 30,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 31,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 32,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q3-PORTS-Eagle28\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"fcMode\" : \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n    \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 3600,\r\n      \"sampleCount\": 24,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n  \"v3Enabled\": \"%s\",\r\n  \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 1024\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 4096\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 1\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 8092\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 1024\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, icm_type_uri, icm_type_uri, fc_net_enc1_bay1_uri,  consistency_check, fc_net_enc1_bay1_quri, consistency_check, fc_net_enc1_bay4_uri, consistency_check, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)   
    
    def UpdateLigE28NoFcNetBay1(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc1_bay4_uri, lig1_uri, consistency_check, v3_enabled):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig1_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n  \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n   \"fcMode\": \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n  \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 3600,\r\n      \"sampleCount\": 24,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n  \"v3Enabled\": \"%s\",\r\n   \"trapDestinations\": [\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"1.2.3.7\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\"\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, icm_type_uri, icm_type_uri, consistency_check, fc_net_enc1_bay4_uri, consistency_check, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)  
    
    def UpdateLig2E28NoFcNetBay1(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc2_bay4_uri, lig2_uri, consistency_check, v3_enabled):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig2_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n   \"fcMode\": \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n  \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n  \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 3600,\r\n      \"sampleCount\": 24,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n  \"v3Enabled\": \"%s\",\r\n   \"trapDestinations\": [\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"1.2.3.7\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\"\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, icm_type_uri, icm_type_uri, consistency_check, fc_net_enc2_bay4_uri, consistency_check, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def UpdateLigE28NoFcNetBay4(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc1_bay1_uri, lig1_uri, consistency_check, v3_enabled):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig1_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n   \"fcMode\": \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n  \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n   \"fcMode\": \"TRUNK\",\r\n   \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 3600,\r\n      \"sampleCount\": 24,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"1.2.3.7\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\"\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, icm_type_uri, icm_type_uri, fc_net_enc1_bay1_uri, consistency_check, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)  
    
    def UpdateLig2E28NoFcNetBay4(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc2_bay1_uri, lig2_uri, consistency_check, v3_enabled):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig2_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n   \"fcMode\": \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n  \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n\t    {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n    \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 3600,\r\n      \"sampleCount\": 24,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n   \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"1.2.3.7\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\"\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\"\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, icm_type_uri, icm_type_uri, fc_net_enc2_bay1_uri, consistency_check, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
    
    def UpdateLig1TrunkE28(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, lig1_uri, fc_mode, v3_enabled, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig1_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 29,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 30,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 31,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 32,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q3-PORTS-Eagle28\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n  \"consistencyChecking\" : \"%s\",\r\n  \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 3600,\r\n      \"sampleCount\": 24,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 1024\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 4096\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 1\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 8092\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 1024\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, icm_type_uri, icm_type_uri, fc_mode, consistency_check, fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, fc_mode, consistency_check, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def UpdateLig1VariousSpeedsE28(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, lig1_uri, fc_mode,v3_enabled, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig1_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n     \"consistencyChecking\" : \"%s\",\r\n    \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n     \"consistencyChecking\" : \"%s\",\r\n    \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 29,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 30,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 31,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 32,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q3-PORTS-Eagle28\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n    \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed16G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 3600,\r\n      \"sampleCount\": 24,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 1024\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 4096\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 1\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 8092\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 1024\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(lig_name, icm_type_uri, icm_type_uri, fc_mode, consistency_check, fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, fc_mode, consistency_check, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def UpdateLig2TrunkE28(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, lig2_uri, fc_mode, v3_enabled, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig2_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n  \"consistencyChecking\" : \"%s\",\r\n  \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2025\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 1024\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 4096\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 1\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 8092\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 1024\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, icm_type_uri, icm_type_uri, fc_mode, consistency_check, fc_net_enc2_bay1_uri, fc_mode, consistency_check, fc_net_enc2_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def UpdateLig2VariousSpeedsE28(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, lig2_uri, fc_mode, v3_enabled, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig2_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n     \"consistencyChecking\" : \"%s\",\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed4G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n    \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Speed8G\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2025\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 1024\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 4096\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 1\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 8092\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 1024\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(lig_name, icm_type_uri, icm_type_uri, fc_mode, consistency_check, fc_net_enc2_bay1_uri, fc_mode, consistency_check, fc_net_enc2_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    


class CreateLogicalInterconnectGroupME(object):

    def CreateLig1E3(self, ip, auth, api, lig_name, ic_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay4_uri, fc_mode, v3_enabled):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"ENC1_BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"ENC1_BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, ic_uri, ic_uri, fc_mode, fc_net_enc1_bay1_uri, fc_mode, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLig2E3(self, ip, auth, api, lig_name, ic_uri, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, fc_mode, v3_enabled):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"ENC2_BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"ENC2_BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, ic_uri, ic_uri, fc_mode, fc_net_enc2_bay1_uri, fc_mode, fc_net_enc2_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLig3E3(self, ip, auth, api, lig_name, ic_uri, fc_net_enc3_bay1_uri, fc_net_enc3_bay4_uri, fc_mode, v3_enabled):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"ENC3_BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"ENC3_BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"   %(lig_name, ic_uri, ic_uri, fc_mode, fc_net_enc3_bay1_uri, fc_mode, fc_net_enc3_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLigE28(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, fc_mode, v3_enabled, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n     \"consistencyChecking\" : \"%s\",\r\n     \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n    \"consistencyChecking\" : \"%s\",\r\n    \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 29,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 30,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 31,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 32,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q3-PORTS-Eagle28\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n     \"consistencyChecking\" : \"%s\",\r\n   \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE28\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 3600,\r\n      \"sampleCount\": 24,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": %s,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 1024\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 4096\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 8092\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 1024\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, icm_type_uri, icm_type_uri, fc_mode, consistency_check, fc_net_enc1_bay1_uri, fc_mode, consistency_check, fc_net_enc1_bay1_quri, fc_mode, consistency_check, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLig1E28(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, fc_mode, v3_enabled, consistency_check):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n     \"consistencyChecking\" : \"%s\",\r\n    \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"consistencyChecking\" : \"%s\",\r\n    \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE29\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2025\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 1024\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 4096\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 8092\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 1024\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n"  %(lig_name, icm_type_uri, icm_type_uri, fc_mode, consistency_check, fc_net_enc2_bay1_uri, fc_mode, consistency_check, fc_net_enc2_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreateLigASideEnc3E28(self, ip, auth, api, icm_type_uri, fc_net_enc3_bay1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_A-SIDE-ENC3\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n     {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n   \"fcMode\" : \"TRUNK\",\r\n    \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-ENC3\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantASide\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(icm_type_uri, fc_net_enc3_bay1_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLigBSideEnc3E28(self, ip, auth, api, icm_type_uri, fc_net_enc3_bay4_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_B-SIDE-ENC3\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n     {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n  \"fcMode\" : \"TRUNK\",\r\n    \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-ENC3\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantBSide\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(icm_type_uri, fc_net_enc3_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    

    def CreateLigASideEnc2E28(self, ip, auth, api, icm_type_uri, fc_net_enc2_bay1_uri):
    #The icm_type_uri used here is Interconnect Type icm_type_uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_A-SIDE-ENC2\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n     {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n   \"fcMode\" : \"TRUNK\",\r\n    \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-ENC2\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantASide\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(icm_type_uri, fc_net_enc2_bay1_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLigBSideEnc2E28(self, ip, auth, api, icm_type_uri, fc_net_enc2_bay4_uri):
    #The icm_type_uri used here is Interconnect Type icm_type_uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_B-SIDE-ENC2\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n     {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n  \"fcMode\" : \"TRUNK\",\r\n    \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-ENC2\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantBSide\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(icm_type_uri, fc_net_enc2_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLigASideEnc1E3(self, ip, auth, api, icm_type_uri, fc_net_enc1_bay1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_A-SIDE-ENC1\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n     {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"TRUNK\",\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1_ENC1\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantASide\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}" %(icm_type_uri, fc_net_enc1_bay1_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def CreateLigASideEnc1E28(self, ip, auth, api, icm_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri):
    #The icm_type_uri used here is Interconnect Type
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_A-SIDE-ENC1\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"fcMode\" : \"TRUNK\",\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n    ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"fcMode\" : \"TRUNK\",\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 29,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 30,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 31,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 32,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q1-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantASide\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin5\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": true,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 1024\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 4096\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 1\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin5\",\r\n        \"port\": 8092\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 65535\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 1024\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(icm_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLigBSideEnc1E28(self, ip, auth, api, icm_type_uri, fc_net_enc1_bay4_uri):
    #The icm_type_uri used here is Interconnect Type icm_type_uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_B-SIDE-ENC1\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n     {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n   \"fcMode\" : \"TRUNK\",\r\n   \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-ENC1\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantBSide\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(icm_type_uri, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLigE136(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, fc_mode, v3_enabled):
    #The icm_type_uri used here is Interconnect Type icm_type_uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE136\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS-EAGLE136\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE136\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(lig_name, icm_type_uri, icm_type_uri, fc_mode, fc_net_enc1_bay1_uri, fc_mode, fc_net_enc1_bay1_quri, fc_mode, fc_net_enc1_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLig1E136(self, ip, auth, api, lig_name, icm_type_uri, fc_net_enc2_bay1_uri, fc_net_enc2_bay4_uri, fc_mode, v3_enabled):
    #The icm_type_uri used here is Interconnect Type icm_type_uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"%s\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE137\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"%s\",\r\n      \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE137\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"user1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": \"%s\",\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F888071F26C0ED6B8E15800000000\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.25\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"user1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.32.64\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(lig_name, icm_type_uri, icm_type_uri, fc_mode, fc_net_enc2_bay1_uri, fc_mode, fc_net_enc2_bay4_uri, v3_enabled)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLigASideEnc2E136(self, ip, auth, api, icm_type_uri, fc_mode, fc_net_enc2_bay1_uri):
    #The icm_type_uri used here is Interconnect Type icm_type_uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_A-SIDE-EAGLE137\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n     {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE137\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantASide\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(icm_type_uri, fc_mode, fc_net_enc2_bay1_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLigBSideEnc2E136(self, ip, auth, api, icm_type_uri, fc_mode, fc_net_enc2_bay4_uri):
    #The icm_type_uri used here is Interconnect Type icm_type_uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_B-SIDE-EAGLE137\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n     {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE137\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantBSide\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}" %(icm_type_uri, fc_mode, fc_net_enc2_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLigASideEnc1E136(self, ip, auth, api, icm_type_uri, fc_mode, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri):
    #The icm_type_uri used here is Interconnect Type
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_A-SIDE-EAGLE136\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-EAGLE136\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS-EAGLE136\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantASide\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(icm_type_uri, fc_mode, fc_net_enc1_bay1_uri, fc_mode, fc_net_enc1_bay1_quri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def CreateLigBSideEnc1E136(self, ip, auth, api, icm_type_uri, fc_mode, fc_net_enc1_bay4_uri):
    #The icm_type_uri used here is Interconnect Type icm_type_uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG_B-SIDE-EAGLE136\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n     {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"lacpTimer\": null,\r\n      \"fcMode\" : \"%s\",\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4-EAGLE136\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"NonRedundantBSide\",\r\n  \"internalNetworkUris\": [],\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"trapDestinations\": null,\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(icm_type_uri, fc_mode, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    


class CreateLogicalInterconnectGroupEthernetME(object):

    def CreatePotashLigEagle136(self, ip, auth, api, lig_name, consistency_check, icm_type_uri_potash, icm_type_uri_chloride, fcoe_net_potash_bay2_uri, fcoe_net_potash_bay5_uri, fc_net_potash_bay2_uri, fc_net_potash_bay5_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n\"type\": \"logical-interconnect-groupV8\",\r\n\"name\": \"%s\",\r\n\"enclosureType\": \"SY12000\",\r\n\"enclosureIndexes\": [1, 2],\r\n\"interconnectBaySet\": 2,\r\n\"redundancyType\": \"HighlyAvailable\",\r\n\"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 2\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 5\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 2\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 2\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 2\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 2\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 5\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 2\r\n        }\r\n    ]\r\n},\r\n\"uplinkSets\": [\r\n    {\r\n        \"networkType\": \"Ethernet\",\r\n        \"networkUris\": [\"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"name\": \"POTASH-BAY2-FCOE\",\r\n        \"ethernetNetworkType\": \"Tagged\",\r\n        \"lacpTimer\": \"Short\",\r\n        \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"failoverActiveMemberThreshold\": 4,\r\n        \"failoverBandwidthThreshold\": 50,\r\n        \"failoverType\": \"AllActiveUplinksOffline\",\r\n        \"lagPortBalance\": \"Enabled\",\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 66\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 61\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"networkType\": \"Ethernet\",\r\n        \"networkUris\": [\"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"primaryPort\": null,\r\n        \"name\": \"POTASH-BAY5-FCOE\",\r\n        \"ethernetNetworkType\": \"Tagged\",\r\n        \"lacpTimer\": \"Short\",\r\n        \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"failoverActiveMemberThreshold\": 4,\r\n        \"failoverBandwidthThreshold\": 50,\r\n        \"failoverType\": \"AllActiveUplinksOffline\",\r\n        \"lagPortBalance\": \"Enabled\",\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 5\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 66\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 5\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 61\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"networkType\": \"FibreChannel\",\r\n        \"networkUris\": [\"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"name\": \"POTASH-BAY2-FC\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 77\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        \"networkType\": \"FibreChannel\",\r\n        \"networkUris\": [\"%s\"],\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"name\": \"POTASH-BAY5-FC\",\r\n        \"consistencyChecking\": \"%s\",\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 5\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 77\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n}\r\n\r\n}" %(lig_name, icm_type_uri_potash, icm_type_uri_chloride, icm_type_uri_chloride, icm_type_uri_potash, fcoe_net_potash_bay2_uri, consistency_check, fcoe_net_potash_bay5_uri, consistency_check, fc_net_potash_bay2_uri, consistency_check, fc_net_potash_bay5_uri, consistency_check)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


    def CreateNitroLigEagle136(self, ip, auth, api, lig_name, downlink_speed, consistency_check, icm_type_uri_nitro, icm_type_uri_methane, fcoe_net_nitro_bay3_uri, fcoe_net_nitro_bay6_uri, fc_net_nitro_bay3_uri, fc_net_nitro_bay6_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n    \"type\": \"logical-interconnect-groupV8\",\r\n    \"name\": \"%s\",\r\n    \"enclosureType\": \"SY12000\",\r\n    \"enclosureIndexes\": [1, 2],\r\n    \"interconnectBaySet\": 3,\r\n    \"redundancyType\": \"HighlyAvailable\",\r\n    \"downlinkSpeedMode\": \"%s\",\r\n    \"interconnectMapTemplate\": {\r\n        \"interconnectMapEntryTemplates\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 2\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 3\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 3\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 2\r\n            }\r\n        ]\r\n    },\r\n    \"uplinkSets\": [\r\n        {\r\n            \"networkType\": \"Ethernet\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"name\": \"NITRO_BAY6_FCoE\",\r\n            \"ethernetNetworkType\": \"Tagged\",\r\n            \"lacpTimer\": \"Short\",\r\n            \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n            \"consistencyChecking\": \"%s\",\r\n            \"failoverActiveMemberThreshold\": 4,\r\n            \"failoverBandwidthThreshold\": 50,\r\n            \"failoverType\": \"AllActiveUplinksOffline\",\r\n            \"lagPortBalance\": \"Enabled\",\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 2\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 66\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 2\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 61\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"networkType\": \"Ethernet\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"name\": \"NITRO_BAY3_FCoE\",\r\n            \"ethernetNetworkType\": \"Tagged\",\r\n            \"lacpTimer\": \"Short\",\r\n            \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n            \"consistencyChecking\": \"%s\",\r\n            \"failoverActiveMemberThreshold\": 4,\r\n            \"failoverBandwidthThreshold\": 50,\r\n            \"failoverType\": \"AllActiveUplinksOffline\",\r\n            \"lagPortBalance\": \"Enabled\",\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 66\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 61\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"networkType\": \"FibreChannel\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"name\": \"NITRO_BAY3_FC\",\r\n            \"consistencyChecking\": \"%s\",\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 71\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Speed32G\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"networkType\": \"FibreChannel\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"name\": \"NITRO_BAY6_FC\",\r\n            \"consistencyChecking\": \"%s\",\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 2\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 71\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Speed32G\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}" %(lig_name, downlink_speed, icm_type_uri_nitro, icm_type_uri_nitro, icm_type_uri_methane, icm_type_uri_methane, fcoe_net_nitro_bay6_uri, consistency_check, fcoe_net_nitro_bay3_uri, consistency_check, fc_net_nitro_bay3_uri, consistency_check, fc_net_nitro_bay6_uri, consistency_check)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


    def CreatePotashLigEagle3(self, ip, auth, api, icm_type_uri_potash, icm_type_uri_chloride, eth_net_vlan10_uri, eth_net_vlan20_uri, eth_net_vlan30_uri, eth_net_vlan40_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG-POTASH\",\r\n  \"redundancyType\": \"HighlyAvailable\",\r\n  \"enclosureIndexes\": [\r\n    1,\r\n    2,\r\n    3\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"interconnectBaySet\": 3,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 6\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": 1\r\n            }\r\n          ]\r\n        },\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": 1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 6\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": 3\r\n            }\r\n          ]\r\n        },\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": 3\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 3\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": 1\r\n            }\r\n          ]\r\n        },\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": 1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 6\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": 2\r\n            }\r\n          ]\r\n        },\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": 2\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 3\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": 3\r\n            }\r\n          ]\r\n        },\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": 3\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 3\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": 2\r\n            }\r\n          ]\r\n        },\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": 2\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"Ethernet\",\r\n    \"networkUris\": [\"%s\", \"%s\" ],\r\n      \"nativeNetworkUri\": null,\r\n      \"mode\": \"Auto\",\r\n      \"fcMode\": \"NA\",\r\n      \"primaryPort\": null,\r\n      \"name\": \"BAY3\",\r\n      \"reachability\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"type\": \"Bay\",\r\n                \"relativeValue\": 3\r\n              },\r\n              {\r\n                \"type\": \"Enclosure\",\r\n                \"relativeValue\": 1\r\n              },\r\n              {\r\n                \"type\": \"Port\",\r\n                \"relativeValue\": 62\r\n              }\r\n            ]\r\n          },\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"desiredFecMode\": \"Auto\"\r\n        },\r\n        {\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"type\": \"Bay\",\r\n                \"relativeValue\": 3\r\n              },\r\n              {\r\n                \"type\": \"Enclosure\",\r\n                \"relativeValue\": 1\r\n              },\r\n              {\r\n                \"type\": \"Port\",\r\n                \"relativeValue\": 63\r\n              }\r\n            ]\r\n          },\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"desiredFecMode\": \"Auto\"\r\n        },\r\n        {\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"type\": \"Bay\",\r\n                \"relativeValue\": 3\r\n              },\r\n              {\r\n                \"type\": \"Enclosure\",\r\n                \"relativeValue\": 1\r\n              },\r\n              {\r\n                \"type\": \"Port\",\r\n                \"relativeValue\": 64\r\n              }\r\n            ]\r\n          },\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"desiredFecMode\": \"Auto\"\r\n        },\r\n        {\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"type\": \"Bay\",\r\n                \"relativeValue\": 3\r\n              },\r\n              {\r\n                \"type\": \"Enclosure\",\r\n                \"relativeValue\": 1\r\n              },\r\n              {\r\n                \"type\": \"Port\",\r\n                \"relativeValue\": 65\r\n              }\r\n            ]\r\n          },\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"desiredFecMode\": \"Auto\"\r\n        }\r\n      ],\r\n      \"ethernetNetworkType\": \"Tagged\",\r\n      \"lacpTimer\": \"Short\",\r\n      \"privateVlanDomains\": [],\r\n      \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n      \"consistencyChecking\": \"ExactMatch\"\r\n    },\r\n    {\r\n      \"networkType\": \"Ethernet\",\r\n      \"networkUris\": [\"%s\", \"%s\" ],\r\n      \"nativeNetworkUri\": null,\r\n      \"mode\": \"Auto\",\r\n      \"fcMode\": \"NA\",\r\n      \"primaryPort\": null,\r\n      \"name\": \"BAY6\",\r\n      \"reachability\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"type\": \"Bay\",\r\n                \"relativeValue\": 6\r\n              },\r\n              {\r\n                \"type\": \"Enclosure\",\r\n                \"relativeValue\": 2\r\n              },\r\n              {\r\n                \"type\": \"Port\",\r\n                \"relativeValue\": 62\r\n              }\r\n            ]\r\n          },\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"desiredFecMode\": \"Auto\"\r\n        },\r\n        {\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"type\": \"Bay\",\r\n                \"relativeValue\": 6\r\n              },\r\n              {\r\n                \"type\": \"Enclosure\",\r\n                \"relativeValue\": 2\r\n              },\r\n              {\r\n                \"type\": \"Port\",\r\n                \"relativeValue\": 63\r\n              }\r\n            ]\r\n          },\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"desiredFecMode\": \"Auto\"\r\n        },\r\n        {\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"type\": \"Bay\",\r\n                \"relativeValue\": 6\r\n              },\r\n              {\r\n                \"type\": \"Enclosure\",\r\n                \"relativeValue\": 2\r\n              },\r\n              {\r\n                \"type\": \"Port\",\r\n                \"relativeValue\": 64\r\n              }\r\n            ]\r\n          },\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"desiredFecMode\": \"Auto\"\r\n        },\r\n        {\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"type\": \"Bay\",\r\n                \"relativeValue\": 6\r\n              },\r\n              {\r\n                \"type\": \"Enclosure\",\r\n                \"relativeValue\": 2\r\n              },\r\n              {\r\n                \"type\": \"Port\",\r\n                \"relativeValue\": 65\r\n              }\r\n            ]\r\n          },\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"desiredFecMode\": \"Auto\"\r\n        }\r\n      ],\r\n      \"ethernetNetworkType\": \"Tagged\",\r\n      \"lacpTimer\": \"Short\",\r\n      \"privateVlanDomains\": [],\r\n      \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n      \"consistencyChecking\": \"ExactMatch\"\r\n    }\r\n  ]\r\n}"  %(icm_type_uri_chloride, icm_type_uri_chloride, icm_type_uri_potash, icm_type_uri_potash, icm_type_uri_chloride, icm_type_uri_chloride, eth_net_vlan10_uri, eth_net_vlan20_uri, eth_net_vlan30_uri, eth_net_vlan40_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def CreatePotashLigASideEagle3(self, ip, auth, api, lig_name, icm_type_uri_potash, icm_type_uri_chloride, eth_net_vlan10_uri, eth_net_vlan20_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n\"type\": \"logical-interconnect-groupV8\",\r\n\"category\": \"logical-interconnect-groups\",\r\n\"enclosureType\": \"SY12000\",\r\n\"enclosureIndexes\": [\r\n    1,\r\n    2,\r\n    3\r\n],\r\n\"interconnectBaySet\": 3,\r\n\"redundancyType\": \"NonRedundantASide\",\r\n\"name\": \"%s\",\r\n\"uplinkSets\": [\r\n    {\r\n        \"networkType\": \"Ethernet\",\r\n        \"networkUris\": [\"%s\", \"%s\" ],\r\n        \"nativeNetworkUri\": null,\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"primaryPort\": null,\r\n        \"name\": \"BAY3\",\r\n        \"reachability\": null,\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 3\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 63\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 62\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 3\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 3\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 65\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 3\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 64\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ],\r\n        \"ethernetNetworkType\": \"Tagged\",\r\n        \"lacpTimer\": \"Short\",\r\n        \"privateVlanDomains\": [],\r\n        \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n        \"consistencyChecking\": \"ExactMatch\"\r\n    }\r\n],\r\n\"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 3\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 2\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 2\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 3\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 3\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\", \r\n            \"enclosureIndex\": 3\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 3\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\",\r\n            \"enclosureIndex\": 1\r\n        }\r\n    ]\r\n}\r\n}" %(lig_name, eth_net_vlan10_uri, eth_net_vlan20_uri, icm_type_uri_chloride, icm_type_uri_chloride, icm_type_uri_potash)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreatePotashLigBSideEagle3(self, ip, auth, api, lig_name, icm_type_uri_potash, icm_type_uri_chloride, eth_net_vlan30_uri, eth_net_vlan40_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n\"type\": \"logical-interconnect-groupV8\",\r\n\"category\": \"logical-interconnect-groups\",\r\n\"enclosureType\": \"SY12000\",\r\n\"enclosureIndexes\": [\r\n    1,\r\n    2,\r\n    3\r\n],\r\n\"interconnectBaySet\": 3,\r\n\"redundancyType\": \"NonRedundantBSide\",\r\n\"name\": \"%s\",\r\n\"uplinkSets\": [\r\n    {\r\n        \"networkType\": \"Ethernet\",\r\n        \"networkUris\": [\"%s\", \"%s\" ],\r\n        \"nativeNetworkUri\": null,\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"primaryPort\": null,\r\n        \"name\": \"BAY6\",\r\n        \"reachability\": null,\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 63\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 62\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 65\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 64\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ],\r\n        \"ethernetNetworkType\": \"Tagged\",\r\n        \"lacpTimer\": \"Short\",\r\n        \"privateVlanDomains\": [],\r\n        \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n        \"consistencyChecking\": \"ExactMatch\"\r\n    }\r\n],\r\n\"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 6\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 2\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\", \r\n            \"enclosureIndex\": 2\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 6\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 3\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\", \r\n            \"enclosureIndex\": 3\r\n        },\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 6\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    }\r\n                ]\r\n            },\r\n            \"permittedInterconnectTypeUri\": \"%s\", \r\n            \"enclosureIndex\": 1\r\n        }\r\n    ]\r\n}\r\n}" %(lig_name, eth_net_vlan30_uri, eth_net_vlan40_uri, icm_type_uri_potash, icm_type_uri_chloride, icm_type_uri_chloride)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreatePotashLigEagle1000(self, ip, auth, api, icm_type_uri_potash, potash_lig_name, eth_net_vlan10_uri, eth_net_vlan20_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n    \"type\" : \"logical-interconnect-groupV8\",\r\n    \"name\" : \"%s\",\r\n    \"redundancyType\" : \"Redundant\",\r\n    \"enclosureIndexes\": [1],\r\n    \"enclosureType\" : \"SY12000\",\r\n    \"interconnectBaySet\" : 2,\r\n    \"interconnectMapTemplate\": {\r\n        \"interconnectMapEntryTemplates\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 5\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            }\r\n        ]\r\n    },\r\n    \"uplinkSets\": [\r\n    {\r\n    \"networkType\": \"Ethernet\",\r\n    \"networkUris\": [\"%s\"],\r\n    \"nativeNetworkUri\": null,\r\n    \"mode\": \"Auto\",\r\n    \"fcMode\": \"NA\",\r\n    \"primaryPort\": null,\r\n    \"name\": \"BAY5\",\r\n    \"reachability\": null,\r\n    \"logicalPortConfigInfos\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Port\",\r\n                        \"relativeValue\": 71\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 5\r\n                    }\r\n                ]\r\n            },\r\n            \"desiredSpeed\": \"Auto\",\r\n            \"desiredFecMode\": \"Auto\"\r\n        }\r\n    ],\r\n    \"ethernetNetworkType\": \"Tagged\",\r\n    \"lacpTimer\": \"Short\",\r\n    \"privateVlanDomains\": [],\r\n    \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n    \"consistencyChecking\": \"ExactMatch\",\r\n    \"networkSetUris\": []\r\n},\r\n    {\r\n        \"networkType\": \"Ethernet\",\r\n        \"networkUris\": [\"%s\"],\r\n        \"nativeNetworkUri\": null,\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"primaryPort\": null,\r\n        \"name\": \"BAY2\",\r\n        \"reachability\": null,\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 71\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 2\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ],\r\n        \"ethernetNetworkType\": \"Tagged\",\r\n        \"lacpTimer\": \"Short\",\r\n        \"privateVlanDomains\": [],\r\n        \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n        \"consistencyChecking\": \"ExactMatch\",\r\n        \"networkSetUris\": []\r\n    }\r\n    ]\r\n}"  %(potash_lig_name, icm_type_uri_potash, icm_type_uri_potash, eth_net_vlan20_uri, eth_net_vlan10_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreateNitroLigEagle1000(self, ip, auth, api, icm_type_uri_nitro, nitro_lig_name, eth_net_vlan30_uri, eth_net_vlan40_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n    \"type\" : \"logical-interconnect-groupV8\",\r\n    \"name\" : \"%s\",\r\n    \"redundancyType\" : \"Redundant\",\r\n    \"enclosureIndexes\": [1],\r\n    \"enclosureType\" : \"SY12000\",\r\n    \"interconnectBaySet\" : 3,\r\n    \"interconnectMapTemplate\": {\r\n        \"interconnectMapEntryTemplates\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 3\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            }\r\n        ]\r\n    },\r\n    \"uplinkSets\": [\r\n        {\r\n            \"networkType\": \"Ethernet\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"nativeNetworkUri\": null,\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"primaryPort\": null,\r\n            \"name\": \"BAY6\",\r\n            \"reachability\": null,\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 89\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 90\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 87\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 88\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ],\r\n            \"ethernetNetworkType\": \"Tagged\",\r\n            \"lacpTimer\": \"Short\",\r\n            \"privateVlanDomains\": [],\r\n            \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n            \"consistencyChecking\": \"ExactMatch\",\r\n            \"networkSetUris\": []\r\n        },\r\n        {\r\n            \"networkType\": \"Ethernet\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"nativeNetworkUri\": null,\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"primaryPort\": null,\r\n            \"name\": \"BAY3\",\r\n            \"reachability\": null,\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 76\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 71\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ],\r\n            \"ethernetNetworkType\": \"Tagged\",\r\n            \"lacpTimer\": \"Short\",\r\n            \"privateVlanDomains\": [],\r\n            \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n            \"consistencyChecking\": \"ExactMatch\",\r\n            \"networkSetUris\": []\r\n        }\r\n    ]\r\n}"  %(nitro_lig_name, icm_type_uri_nitro, icm_type_uri_nitro, eth_net_vlan40_uri, eth_net_vlan30_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreatePotashAsideLigEagle1000(self, ip, auth, api, icm_type_uri_potash, eth_net_vlan10_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n    \"type\" : \"logical-interconnect-groupV8\",\r\n    \"name\" : \"LIG-POTASH-A-SIDE\",\r\n    \"redundancyType\" : \"NonRedundantASide\",\r\n    \"enclosureIndexes\": [1],\r\n    \"enclosureType\" : \"SY12000\",\r\n    \"interconnectBaySet\" : 2,\r\n    \"interconnectMapTemplate\": {\r\n        \"interconnectMapEntryTemplates\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 2\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            }\r\n        ]\r\n    },\r\n    \"uplinkSets\": [\r\n    {\r\n        \"networkType\": \"Ethernet\",\r\n        \"networkUris\": [\"%s\"],\r\n        \"nativeNetworkUri\": null,\r\n        \"mode\": \"Auto\",\r\n        \"fcMode\": \"NA\",\r\n        \"primaryPort\": null,\r\n        \"name\": \"BAY2\",\r\n        \"reachability\": null,\r\n        \"logicalPortConfigInfos\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Port\",\r\n                            \"relativeValue\": 71\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 2\r\n                        }\r\n                    ]\r\n                },\r\n                \"desiredSpeed\": \"Auto\",\r\n                \"desiredFecMode\": \"Auto\"\r\n            }\r\n        ],\r\n        \"ethernetNetworkType\": \"Tagged\",\r\n        \"lacpTimer\": \"Short\",\r\n        \"privateVlanDomains\": [],\r\n        \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n        \"consistencyChecking\": \"ExactMatch\",\r\n        \"networkSetUris\": []\r\n    }\r\n   ]\r\n}"  %(icm_type_uri_potash, eth_net_vlan10_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreatePotashBsideLigEagle1000(self, ip, auth, api, icm_type_uri_potash, eth_net_vlan20_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n    \"type\" : \"logical-interconnect-groupV8\",\r\n    \"name\" : \"LIG-POTASH-B-SIDE\",\r\n    \"redundancyType\" : \"NonRedundantBSide\",\r\n    \"enclosureIndexes\": [1],\r\n    \"enclosureType\" : \"SY12000\",\r\n    \"interconnectBaySet\" : 2,\r\n    \"interconnectMapTemplate\": {\r\n        \"interconnectMapEntryTemplates\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 5\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            }\r\n        ]\r\n    },\r\n    \"uplinkSets\": [\r\n    {\r\n    \"networkType\": \"Ethernet\",\r\n    \"networkUris\": [\"%s\"],\r\n    \"nativeNetworkUri\": null,\r\n    \"mode\": \"Auto\",\r\n    \"fcMode\": \"NA\",\r\n    \"primaryPort\": null,\r\n    \"name\": \"BAY5\",\r\n    \"reachability\": null,\r\n    \"logicalPortConfigInfos\": [\r\n        {\r\n            \"logicalLocation\": {\r\n                \"locationEntries\": [\r\n                    {\r\n                        \"type\": \"Port\",\r\n                        \"relativeValue\": 71\r\n                    },\r\n                    {\r\n                        \"type\": \"Enclosure\",\r\n                        \"relativeValue\": 1\r\n                    },\r\n                    {\r\n                        \"type\": \"Bay\",\r\n                        \"relativeValue\": 5\r\n                    }\r\n                ]\r\n            },\r\n            \"desiredSpeed\": \"Auto\",\r\n            \"desiredFecMode\": \"Auto\"\r\n        }\r\n    ],\r\n    \"ethernetNetworkType\": \"Tagged\",\r\n    \"lacpTimer\": \"Short\",\r\n    \"privateVlanDomains\": [],\r\n    \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n    \"consistencyChecking\": \"ExactMatch\",\r\n    \"networkSetUris\": []\r\n   }\r\n   ]\r\n}"  %(icm_type_uri_potash, eth_net_vlan20_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreateNitroAsideLigEagle1000(self, ip, auth, api, icm_type_uri_nitro, eth_net_vlan30_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n    \"type\" : \"logical-interconnect-groupV8\",\r\n    \"name\" : \"LIG-NITRO-A-SIDE\",\r\n    \"redundancyType\" : \"NonRedundantASide\",\r\n    \"enclosureIndexes\": [1],\r\n    \"enclosureType\" : \"SY12000\",\r\n    \"interconnectBaySet\" : 3,\r\n    \"interconnectMapTemplate\": {\r\n        \"interconnectMapEntryTemplates\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 3\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            }\r\n        ]\r\n    },\r\n    \"uplinkSets\": [\r\n        {\r\n            \"networkType\": \"Ethernet\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"nativeNetworkUri\": null,\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"primaryPort\": null,\r\n            \"name\": \"BAY3\",\r\n            \"reachability\": null,\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 76\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 71\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ],\r\n            \"ethernetNetworkType\": \"Tagged\",\r\n            \"lacpTimer\": \"Short\",\r\n            \"privateVlanDomains\": [],\r\n            \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n            \"consistencyChecking\": \"ExactMatch\",\r\n            \"networkSetUris\": []\r\n        }\r\n    ]\r\n}"  %(icm_type_uri_nitro, eth_net_vlan30_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreateNitroBsideLigEagle1000(self, ip, auth, api, icm_type_uri_nitro, eth_net_vlan40_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n    \"type\" : \"logical-interconnect-groupV8\",\r\n    \"name\" : \"LIG-NITRO-B-SIDE\",\r\n    \"redundancyType\" : \"NonRedundantBSide\",\r\n    \"enclosureIndexes\": [1],\r\n    \"enclosureType\" : \"SY12000\",\r\n    \"interconnectBaySet\" : 3,\r\n    \"interconnectMapTemplate\": {\r\n        \"interconnectMapEntryTemplates\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            }\r\n        ]\r\n    },\r\n    \"uplinkSets\": [\r\n        {\r\n            \"networkType\": \"Ethernet\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"nativeNetworkUri\": null,\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"primaryPort\": null,\r\n            \"name\": \"BAY6\",\r\n            \"reachability\": null,\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 89\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 90\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 87\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 88\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"Auto\",\r\n                    \"desiredFecMode\": \"Auto\"\r\n                }\r\n            ],\r\n            \"ethernetNetworkType\": \"Tagged\",\r\n            \"lacpTimer\": \"Short\",\r\n            \"privateVlanDomains\": [],\r\n            \"loadBalancingMode\": \"SourceAndDestinationMac\",\r\n            \"consistencyChecking\": \"ExactMatch\",\r\n            \"networkSetUris\": []\r\n        }\r\n    ]\r\n}"  %(icm_type_uri_nitro, eth_net_vlan40_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreatePotashLigEagle159(self, ip, auth, api, lig_name, icm_type_uri_potash, icm_type_uri_chloride, fc_net_enc1_bay1_uri, fc_net_enc2_bay4_uri, potash_fc_port_speed):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n    \"category\" : null,\r\n    \"created\" : null,\r\n    \"description\" : null,\r\n    \"eTag\" : null,\r\n    \"uri\" : null,\r\n    \"name\" : \"%s\",\r\n    \"redundancyType\": \"HighlyAvailable\",\r\n    \"state\" : null,\r\n    \"status\" : null,\r\n    \"type\" : \"logical-interconnect-groupV8\",\r\n    \"enclosureIndexes\": [1, 2],\r\n    \"enclosureType\" : \"SY12000\",\r\n    \"interconnectBaySet\": 1,\r\n    \"interconnectMapTemplate\": {\r\n        \"interconnectMapEntryTemplates\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 4\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 2\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 2\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 1\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 4\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            }\r\n        ]\r\n    },\r\n    \"uplinkSets\": [\r\n        {\r\n            \"networkType\": \"FibreChannel\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"nativeNetworkUri\": null,\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"primaryPort\": null,\r\n            \"name\": \"BAY1-POTASH\",\r\n            \"reachability\": null,\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 67\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"%s\",\r\n                    \"desiredFecMode\": \"Auto\",\r\n                    \"mlagFcoePort\": \"NA\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 1\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 62\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"%s\",\r\n                    \"desiredFecMode\": \"Auto\",\r\n                    \"mlagFcoePort\": \"NA\"\r\n                }\r\n            ],\r\n            \"ethernetNetworkType\": \"NotApplicable\",\r\n            \"lacpTimer\": null,\r\n            \"fcoeMlagMode\": \"None\",\r\n            \"fcoeNetworkMlagBays\": [],\r\n            \"privateVlanDomains\": [],\r\n            \"loadBalancingMode\": \"None\"\r\n        },\r\n        {\r\n            \"networkType\": \"FibreChannel\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"nativeNetworkUri\": null,\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"primaryPort\": null,\r\n            \"name\": \"BAY4-POTASH\",\r\n            \"reachability\": null,\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 4\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 67\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 2\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"%s\",\r\n                    \"desiredFecMode\": \"Auto\",\r\n                    \"mlagFcoePort\": \"NA\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 62\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 4\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 2\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"%s\",\r\n                    \"desiredFecMode\": \"Auto\",\r\n                    \"mlagFcoePort\": \"NA\"\r\n                }\r\n            ],\r\n            \"ethernetNetworkType\": \"NotApplicable\",\r\n            \"lacpTimer\": null,\r\n            \"fcoeMlagMode\": \"None\",\r\n            \"fcoeNetworkMlagBays\": [],\r\n            \"privateVlanDomains\": [],\r\n            \"loadBalancingMode\": \"None\"\r\n        }\r\n    ]\r\n\r\n}\r\n\r\n"  %(lig_name, icm_type_uri_potash, icm_type_uri_chloride, icm_type_uri_potash, icm_type_uri_chloride, fc_net_enc1_bay1_uri, potash_fc_port_speed, potash_fc_port_speed, fc_net_enc2_bay4_uri, potash_fc_port_speed, potash_fc_port_speed)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        
    def CreateNitroLigEagle159(self, ip, auth, api, lig_name, downlink_speed, icm_type_uri_nitro, icm_type_uri_methane, fc_net_enc1_bay3_uri, fc_net_enc2_bay6_uri, nitro_fc_port_speed):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/logical-interconnect-groups" %ip
        payload = "{\r\n    \"category\" : null,\r\n    \"created\" : null,\r\n    \"description\" : null,\r\n    \"eTag\" : null,\r\n    \"uri\" : null,\r\n    \"name\" : \"%s\",\r\n    \"redundancyType\": \"HighlyAvailable\",\r\n    \"downlinkSpeedMode\": \"%s\",\r\n    \"state\" : null,\r\n    \"status\" : null,\r\n    \"type\" : \"logical-interconnect-groupV8\",\r\n    \"enclosureIndexes\": [1, 2],\r\n    \"enclosureType\" : \"SY12000\",\r\n    \"interconnectBaySet\": 3,\r\n    \"interconnectMapTemplate\": {\r\n        \"interconnectMapEntryTemplates\": [\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 2\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 3\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 2\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 2\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 3\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            },\r\n            {\r\n                \"logicalLocation\": {\r\n                    \"locationEntries\": [\r\n                        {\r\n                            \"type\": \"Bay\",\r\n                            \"relativeValue\": 6\r\n                        },\r\n                        {\r\n                            \"type\": \"Enclosure\",\r\n                            \"relativeValue\": 1\r\n                        }\r\n                    ]\r\n                },\r\n                \"permittedInterconnectTypeUri\": \"%s\",\r\n                \"enclosureIndex\": 1\r\n            }\r\n        ]\r\n    },\r\n    \"uplinkSets\": [\r\n        {\r\n            \"networkType\": \"FibreChannel\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"nativeNetworkUri\": null,\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"primaryPort\": null,\r\n            \"name\": \"BAY3-NITRO\",\r\n            \"reachability\": null,\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 61\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"%s\",\r\n                    \"desiredFecMode\": \"Auto\",\r\n                    \"mlagFcoePort\": \"NA\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 3\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 66\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 1\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"%s\",\r\n                    \"desiredFecMode\": \"Auto\",\r\n                    \"mlagFcoePort\": \"NA\"\r\n                }\r\n            ],\r\n            \"ethernetNetworkType\": \"NotApplicable\",\r\n            \"lacpTimer\": null,\r\n            \"fcoeMlagMode\": \"None\",\r\n            \"fcoeNetworkMlagBays\": [],\r\n            \"privateVlanDomains\": [],\r\n            \"loadBalancingMode\": \"None\"\r\n        },\r\n        {\r\n            \"networkType\": \"FibreChannel\",\r\n            \"networkUris\": [\"%s\"],\r\n            \"nativeNetworkUri\": null,\r\n            \"mode\": \"Auto\",\r\n            \"fcMode\": \"NA\",\r\n            \"primaryPort\": null,\r\n            \"name\": \"BAY6-NITRO\",\r\n            \"reachability\": null,\r\n            \"logicalPortConfigInfos\": [\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            },\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 66\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 2\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"%s\",\r\n                    \"desiredFecMode\": \"Auto\",\r\n                    \"mlagFcoePort\": \"NA\"\r\n                },\r\n                {\r\n                    \"logicalLocation\": {\r\n                        \"locationEntries\": [\r\n                            {\r\n                                \"type\": \"Port\",\r\n                                \"relativeValue\": 61\r\n                            },\r\n                            {\r\n                                \"type\": \"Bay\",\r\n                                \"relativeValue\": 6\r\n                            },\r\n                            {\r\n                                \"type\": \"Enclosure\",\r\n                                \"relativeValue\": 2\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"desiredSpeed\": \"%s\",\r\n                    \"desiredFecMode\": \"Auto\",\r\n                    \"mlagFcoePort\": \"NA\"\r\n                }\r\n            ],\r\n            \"ethernetNetworkType\": \"NotApplicable\",\r\n            \"lacpTimer\": null,\r\n            \"fcoeMlagMode\": \"None\",\r\n            \"fcoeNetworkMlagBays\": [],\r\n            \"privateVlanDomains\": [],\r\n            \"loadBalancingMode\": \"None\"\r\n        }\r\n    ]\r\n\r\n}\r\n"  %(lig_name, downlink_speed, icm_type_uri_nitro, icm_type_uri_methane, icm_type_uri_nitro, icm_type_uri_methane, fc_net_enc1_bay3_uri, nitro_fc_port_speed, nitro_fc_port_speed, fc_net_enc2_bay6_uri, nitro_fc_port_speed, nitro_fc_port_speed)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    


class UpdateEnclosureGroup(object):

    def UpdateEgE21(self, ip, auth, api, enc_grp_uri, enc_grp_etag, lig1_uri, lig2_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n\t\"uri\": \"%s\",\r\n      \"category\": \"enclosure-groups\",\r\n      \"name\": \"EG1\",\r\n      \"created\": \"2016-09-01T17:55:02.513Z\",\r\n      \"modified\": \"2016-09-02T15:06:35.289Z\",\r\n      \"eTag\": \"%s\",\r\n      \"status\": \"OK\",\r\n      \"ipAddressingMode\": \"DHCP\",\r\n      \"powerMode\": \"RedundantPowerSupply\",\r\n      \"state\": \"Normal\",\r\n      \"enclosureCount\": 1,\r\n      \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n      \"stackingMode\": \"Enclosure\",\r\n      \"portMappingCount\": 8,\r\n      \"portMappings\": [\r\n        {\r\n          \"midplanePort\": 1,\r\n          \"interconnectBay\": 1\r\n        },\r\n        {\r\n          \"midplanePort\": 2,\r\n          \"interconnectBay\": 2\r\n        },\r\n        {\r\n          \"midplanePort\": 3,\r\n          \"interconnectBay\": 3\r\n        },\r\n        {\r\n          \"midplanePort\": 4,\r\n          \"interconnectBay\": 4\r\n        },\r\n        {\r\n          \"midplanePort\": 5,\r\n          \"interconnectBay\": 5\r\n        },\r\n        {\r\n          \"midplanePort\": 6,\r\n          \"interconnectBay\": 6\r\n        },\r\n        {\r\n          \"midplanePort\": 7,\r\n          \"interconnectBay\": 7\r\n        },\r\n        {\r\n          \"midplanePort\": 8,\r\n          \"interconnectBay\": 8\r\n        }\r\n      ],\r\n      \"interconnectBayMappingCount\": 2,\r\n      \"interconnectBayMappings\": [\r\n        {\r\n          \"interconnectBay\": 1,\r\n          \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n          \"interconnectBay\": 4,\r\n          \"logicalInterconnectGroupUri\": \"%s\"\r\n        }\r\n  ]\r\n}\r\n" %(enc_grp_uri, enc_grp_etag, lig1_uri, lig2_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))

    def UpdateEgNoLIGsE21(self, ip, auth, api, enc_grp_uri, enc_grp_etag):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n\t\"uri\": \"%s\",\r\n\t\"stackingMode\": \"Enclosure\",\r\n\t\"powerMode\": \"RedundantPowerSupply\",\r\n\t\"name\": \"EG1\",\r\n\t\"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n\t\"eTag\": \"%s\",\r\n\t\"enclosureCount\": \"1\",\r\n\t\"ipAddressingMode\": \"DHCP\",\r\n\t\"osDeploymentSettings\": {\r\n\t\t\"deploymentModeSettings\": null,\r\n\t\t\"manageOSDeployment\": false\r\n\t},\r\n\t\"portMappingCount\": 8,\r\n\t\"portMappings\": [{\r\n\t\t\"midplanePort\": 1,\r\n\t\t\"interconnectBay\": 1\r\n\t}, {\r\n\t\t\"midplanePort\": 2,\r\n\t\t\"interconnectBay\": 2\r\n\t}, {\r\n\t\t\"midplanePort\": 3,\r\n\t\t\"interconnectBay\": 3\r\n\t}, {\r\n\t\t\"midplanePort\": 4,\r\n\t\t\"interconnectBay\": 4\r\n\t}, {\r\n\t\t\"midplanePort\": 5,\r\n\t\t\"interconnectBay\": 5\r\n\t}, {\r\n\t\t\"midplanePort\": 6,\r\n\t\t\"interconnectBay\": 6\r\n\t}, {\r\n\t\t\"midplanePort\": 7,\r\n\t\t\"interconnectBay\": 7\r\n\t}, {\r\n\t\t\"midplanePort\": 8,\r\n\t\t\"interconnectBay\": 8\r\n\t}],\r\n\t\"interconnectBayMappingCount\": 0,\r\n\t\"interconnectBayMappings\": []\r\n\r\n}" %(enc_grp_uri, enc_grp_etag)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))

    def UpdateEgDefaultE21(self, ip, auth, api, enc_grp_uri, enc_grp_etag, lig1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n\t\"uri\": \"%s\",\r\n      \"category\": \"enclosure-groups\",\r\n      \"name\": \"EG1\",\r\n      \"created\": \"2016-09-01T17:55:02.513Z\",\r\n      \"modified\": \"2016-09-02T15:06:35.289Z\",\r\n      \"eTag\": \"%s\",\r\n      \"status\": \"OK\",\r\n      \"ipAddressingMode\": \"DHCP\",\r\n      \"powerMode\": \"RedundantPowerSupply\",\r\n      \"state\": \"Normal\",\r\n      \"enclosureCount\": 1,\r\n      \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n      \"stackingMode\": \"Enclosure\",\r\n      \"portMappingCount\": 8,\r\n      \"portMappings\": [\r\n        {\r\n          \"midplanePort\": 1,\r\n          \"interconnectBay\": 1\r\n        },\r\n        {\r\n          \"midplanePort\": 2,\r\n          \"interconnectBay\": 2\r\n        },\r\n        {\r\n          \"midplanePort\": 3,\r\n          \"interconnectBay\": 3\r\n        },\r\n        {\r\n          \"midplanePort\": 4,\r\n          \"interconnectBay\": 4\r\n        },\r\n        {\r\n          \"midplanePort\": 5,\r\n          \"interconnectBay\": 5\r\n        },\r\n        {\r\n          \"midplanePort\": 6,\r\n          \"interconnectBay\": 6\r\n        },\r\n        {\r\n          \"midplanePort\": 7,\r\n          \"interconnectBay\": 7\r\n        },\r\n        {\r\n          \"midplanePort\": 8,\r\n          \"interconnectBay\": 8\r\n        }\r\n      ],\r\n\t\"interconnectBayMappingCount\": 4,\r\n\t\"interconnectBayMappings\": [{\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}]\r\n\r\n}" %(enc_grp_uri, enc_grp_etag, lig1_uri, lig1_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEGIPv4RangeE21(self, ip, auth, api, enc_grp_uri, enc_grp_etag, range_uri, lig1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n\t\"uri\": \"%s\",\r\n\t\"stackingMode\": \"Enclosure\",\r\n\t\"powerMode\": \"RedundantPowerSupply\",\r\n\t\"name\": \"EG1\",\r\n\t\"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n\t\"eTag\": \"%s\",\r\n\t\"enclosureCount\": \"1\",\r\n\t\"ipAddressingMode\": \"IpPool\",\r\n\t\"ipRangeUris\": [\"%s\"],\r\n\t\"osDeploymentSettings\": {\r\n\t\t\"deploymentModeSettings\": null,\r\n\t\t\"manageOSDeployment\": false\r\n\t},\r\n\t\"portMappingCount\": 8,\r\n\t\"portMappings\": [{\r\n\t\t\"midplanePort\": 1,\r\n\t\t\"interconnectBay\": 1\r\n\t}, {\r\n\t\t\"midplanePort\": 2,\r\n\t\t\"interconnectBay\": 2\r\n\t}, {\r\n\t\t\"midplanePort\": 3,\r\n\t\t\"interconnectBay\": 3\r\n\t}, {\r\n\t\t\"midplanePort\": 4,\r\n\t\t\"interconnectBay\": 4\r\n\t}, {\r\n\t\t\"midplanePort\": 5,\r\n\t\t\"interconnectBay\": 5\r\n\t}, {\r\n\t\t\"midplanePort\": 6,\r\n\t\t\"interconnectBay\": 6\r\n\t}, {\r\n\t\t\"midplanePort\": 7,\r\n\t\t\"interconnectBay\": 7\r\n\t}, {\r\n\t\t\"midplanePort\": 8,\r\n\t\t\"interconnectBay\": 8\r\n\t}],\r\n\t\"interconnectBayMappingCount\": 2,\r\n\t\"interconnectBayMappings\": [{\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}]\r\n\r\n}\r\n" %(enc_grp_uri, enc_grp_etag, range_uri, lig1_uri, lig1_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))


class UpdateEnclosureGroupME(object):

    def UpdateEgE28(self, ip, auth, api, enc_grp_uri, enc_grp_etag, lig1_uri, lig2_uri, lig3_uri, lig4_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n\t\"uri\": \"%s\",\r\n      \"category\": \"enclosure-groups\",\r\n      \"name\": \"EG1\",\r\n      \"created\": \"2016-09-01T17:55:02.513Z\",\r\n      \"modified\": \"2016-09-02T15:06:35.289Z\",\r\n      \"eTag\": \"%s\",\r\n      \"status\": \"OK\",\r\n      \"ipAddressingMode\": \"DHCP\",\r\n      \"powerMode\": \"RedundantPowerSupply\",\r\n      \"state\": \"Normal\",\r\n      \"enclosureCount\": 2,\r\n      \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n      \"stackingMode\": \"Enclosure\",\r\n      \"portMappingCount\": 8,\r\n      \"portMappings\": [\r\n        {\r\n          \"midplanePort\": 1,\r\n          \"interconnectBay\": 1\r\n        },\r\n        {\r\n          \"midplanePort\": 2,\r\n          \"interconnectBay\": 2\r\n        },\r\n        {\r\n          \"midplanePort\": 3,\r\n          \"interconnectBay\": 3\r\n        },\r\n        {\r\n          \"midplanePort\": 4,\r\n          \"interconnectBay\": 4\r\n        },\r\n        {\r\n          \"midplanePort\": 5,\r\n          \"interconnectBay\": 5\r\n        },\r\n        {\r\n          \"midplanePort\": 6,\r\n          \"interconnectBay\": 6\r\n        },\r\n        {\r\n          \"midplanePort\": 7,\r\n          \"interconnectBay\": 7\r\n        },\r\n        {\r\n          \"midplanePort\": 8,\r\n          \"interconnectBay\": 8\r\n        }\r\n      ],\r\n\t\"interconnectBayMappingCount\": 4,\r\n\t\"interconnectBayMappings\": [{\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},  {\r\n\t\t\"enclosureIndex\": \"2\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": \"2\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}]\r\n\r\n}" %(enc_grp_uri, enc_grp_etag, lig1_uri, lig2_uri, lig3_uri, lig4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))

    def UpdateEGDefaultE28(self, ip, auth, api, enc_grp_uri, enc_grp_etag, lig1_uri, lig2_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n\t\"uri\": \"%s\",\r\n      \"category\": \"enclosure-groups\",\r\n      \"name\": \"EG1\",\r\n      \"created\": \"2016-09-01T17:55:02.513Z\",\r\n      \"modified\": \"2016-09-02T15:06:35.289Z\",\r\n      \"eTag\": \"%s\",\r\n      \"status\": \"OK\",\r\n      \"ipAddressingMode\": \"DHCP\",\r\n      \"powerMode\": \"RedundantPowerSupply\",\r\n      \"state\": \"Normal\",\r\n      \"enclosureCount\": 2,\r\n      \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n      \"stackingMode\": \"Enclosure\",\r\n      \"portMappingCount\": 8,\r\n      \"portMappings\": [\r\n        {\r\n          \"midplanePort\": 1,\r\n          \"interconnectBay\": 1\r\n        },\r\n        {\r\n          \"midplanePort\": 2,\r\n          \"interconnectBay\": 2\r\n        },\r\n        {\r\n          \"midplanePort\": 3,\r\n          \"interconnectBay\": 3\r\n        },\r\n        {\r\n          \"midplanePort\": 4,\r\n          \"interconnectBay\": 4\r\n        },\r\n        {\r\n          \"midplanePort\": 5,\r\n          \"interconnectBay\": 5\r\n        },\r\n        {\r\n          \"midplanePort\": 6,\r\n          \"interconnectBay\": 6\r\n        },\r\n        {\r\n          \"midplanePort\": 7,\r\n          \"interconnectBay\": 7\r\n        },\r\n        {\r\n          \"midplanePort\": 8,\r\n          \"interconnectBay\": 8\r\n        }\r\n      ],\r\n\t\"interconnectBayMappingCount\": 4,\r\n\t\"interconnectBayMappings\": [{\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},  {\r\n\t\t\"enclosureIndex\": \"2\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": \"2\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}]\r\n\r\n}" %(enc_grp_uri, enc_grp_etag, lig1_uri, lig1_uri, lig2_uri, lig2_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEgNoLigsE28(self, ip, auth, api, enc_grp_uri, enc_grp_etag):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n\t\"uri\": \"%s\",\r\n\t\"stackingMode\": \"Enclosure\",\r\n\t\"powerMode\": \"RedundantPowerSupply\",\r\n\t\"name\": \"EG1\",\r\n\t\"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n\t\"eTag\": \"%s\",\r\n\t\"enclosureCount\": \"2\",\r\n\t\"ipAddressingMode\": \"DHCP\",\r\n\t\"osDeploymentSettings\": {\r\n\t\t\"deploymentModeSettings\": null,\r\n\t\t\"manageOSDeployment\": false\r\n\t},\r\n\t\"portMappingCount\": 8,\r\n\t\"portMappings\": [{\r\n\t\t\"midplanePort\": 1,\r\n\t\t\"interconnectBay\": 1\r\n\t}, {\r\n\t\t\"midplanePort\": 2,\r\n\t\t\"interconnectBay\": 2\r\n\t}, {\r\n\t\t\"midplanePort\": 3,\r\n\t\t\"interconnectBay\": 3\r\n\t}, {\r\n\t\t\"midplanePort\": 4,\r\n\t\t\"interconnectBay\": 4\r\n\t}, {\r\n\t\t\"midplanePort\": 5,\r\n\t\t\"interconnectBay\": 5\r\n\t}, {\r\n\t\t\"midplanePort\": 6,\r\n\t\t\"interconnectBay\": 6\r\n\t}, {\r\n\t\t\"midplanePort\": 7,\r\n\t\t\"interconnectBay\": 7\r\n\t}, {\r\n\t\t\"midplanePort\": 8,\r\n\t\t\"interconnectBay\": 8\r\n\t}],\r\n\t\"interconnectBayMappingCount\": 0,\r\n\t\"interconnectBayMappings\": []\r\n\r\n}" %(enc_grp_uri, enc_grp_etag)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEGIPv4RangeE28(self, ip, auth, api, enc_grp_uri, enc_grp_etag, range_uri, lig1_uri, lig2_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n\t\"uri\": \"%s\",\r\n\t\"stackingMode\": \"Enclosure\",\r\n\t\"powerMode\": \"RedundantPowerSupply\",\r\n\t\"name\": \"EG1\",\r\n\t\"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n\t\"eTag\": \"%s\",\r\n\t\"enclosureCount\": \"2\",\r\n\t\"ipAddressingMode\": \"IpPool\",\r\n\t\"ipRangeUris\": [\"%s\"],\r\n\t\"osDeploymentSettings\": {\r\n\t\t\"deploymentModeSettings\": null,\r\n\t\t\"manageOSDeployment\": false\r\n\t},\r\n\t\"portMappingCount\": 8,\r\n\t\"portMappings\": [{\r\n\t\t\"midplanePort\": 1,\r\n\t\t\"interconnectBay\": 1\r\n\t}, {\r\n\t\t\"midplanePort\": 2,\r\n\t\t\"interconnectBay\": 2\r\n\t}, {\r\n\t\t\"midplanePort\": 3,\r\n\t\t\"interconnectBay\": 3\r\n\t}, {\r\n\t\t\"midplanePort\": 4,\r\n\t\t\"interconnectBay\": 4\r\n\t}, {\r\n\t\t\"midplanePort\": 5,\r\n\t\t\"interconnectBay\": 5\r\n\t}, {\r\n\t\t\"midplanePort\": 6,\r\n\t\t\"interconnectBay\": 6\r\n\t}, {\r\n\t\t\"midplanePort\": 7,\r\n\t\t\"interconnectBay\": 7\r\n\t}, {\r\n\t\t\"midplanePort\": 8,\r\n\t\t\"interconnectBay\": 8\r\n\t}],\r\n\t\"interconnectBayMappingCount\": 0,\r\n\t\"interconnectBayMappings\": [{\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},  {\r\n\t\t\"enclosureIndex\": \"2\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": \"2\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}]\r\n\r\n}" %(enc_grp_uri, enc_grp_etag, range_uri, lig1_uri, lig1_uri, lig2_uri, lig2_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEGIPv4RangeE3(self, ip, auth, api, enc_grp_uri, enc_grp_etag, range_uri, lig1_uri, lig2_uri, lig3_uri, lig_potash_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n    \"uri\": \"%s\",\r\n    \"category\": \"enclosure-groups\",\r\n    \"name\": \"EG1\",\r\n    \"eTag\": \"%s\",\r\n    \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n    \"stackingMode\": \"Enclosure\",\r\n    \"ipAddressingMode\": \"IpPool\",\r\n    \"ipRangeUris\": [\"%s\"],\r\n    \"ipv6AddressingMode\": \"External\",\r\n    \"ipv6RangeUris\": [],\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"description\": null,\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    },\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"enclosureCount\": 3,\r\n    \"portMappingCount\": 8,\r\n    \"portMappings\": [\r\n        {\r\n            \"midplanePort\": 1,\r\n            \"interconnectBay\": 1\r\n        },\r\n        {\r\n            \"midplanePort\": 2,\r\n            \"interconnectBay\": 2\r\n        },\r\n        {\r\n            \"midplanePort\": 3,\r\n            \"interconnectBay\": 3\r\n        },\r\n        {\r\n            \"midplanePort\": 4,\r\n            \"interconnectBay\": 4\r\n        },\r\n        {\r\n            \"midplanePort\": 5,\r\n            \"interconnectBay\": 5\r\n        },\r\n        {\r\n            \"midplanePort\": 6,\r\n            \"interconnectBay\": 6\r\n        },\r\n        {\r\n            \"midplanePort\": 7,\r\n            \"interconnectBay\": 7\r\n        },\r\n        {\r\n            \"midplanePort\": 8,\r\n            \"interconnectBay\": 8\r\n        }\r\n    ],\r\n    \"interconnectBayMappingCount\": 8,\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"enclosureIndex\": \"1\",\r\n            \"interconnectBay\": \"1\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": \"2\",\r\n            \"interconnectBay\": \"1\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": \"3\",\r\n            \"interconnectBay\": \"1\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": \"3\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": \"1\",\r\n            \"interconnectBay\": \"4\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": \"2\",\r\n            \"interconnectBay\": \"4\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": \"3\",\r\n            \"interconnectBay\": \"4\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": \"6\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        }\r\n    ]\r\n}" %(enc_grp_uri, enc_grp_etag, range_uri, lig1_uri, lig2_uri, lig3_uri, lig_potash_uri, lig1_uri, lig2_uri, lig3_uri, lig_potash_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEGDefaultE3(self, ip, auth, api, enc_grp_uri, enc_grp_etag, lig1_uri, lig2_uri, lig3_uri, lig_potash_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n    \"uri\": \"%s\",\r\n    \"category\": \"enclosure-groups\",\r\n    \"name\": \"EG1\",\r\n    \"eTag\": \"%s\",\r\n    \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n    \"stackingMode\": \"Enclosure\",\r\n    \"ipAddressingMode\": \"DHCP\",\r\n    \"ipv6AddressingMode\": \"External\",\r\n    \"ipv6RangeUris\": [],\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"description\": null,\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    },\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"enclosureCount\": 3,\r\n    \"portMappingCount\": 8,\r\n    \"portMappings\": [\r\n        {\r\n            \"midplanePort\": 1,\r\n            \"interconnectBay\": 1\r\n        },\r\n        {\r\n            \"midplanePort\": 2,\r\n            \"interconnectBay\": 2\r\n        },\r\n        {\r\n            \"midplanePort\": 3,\r\n            \"interconnectBay\": 3\r\n        },\r\n        {\r\n            \"midplanePort\": 4,\r\n            \"interconnectBay\": 4\r\n        },\r\n        {\r\n            \"midplanePort\": 5,\r\n            \"interconnectBay\": 5\r\n        },\r\n        {\r\n            \"midplanePort\": 6,\r\n            \"interconnectBay\": 6\r\n        },\r\n        {\r\n            \"midplanePort\": 7,\r\n            \"interconnectBay\": 7\r\n        },\r\n        {\r\n            \"midplanePort\": 8,\r\n            \"interconnectBay\": 8\r\n        }\r\n    ],\r\n    \"interconnectBayMappingCount\": 8,\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"enclosureIndex\": \"1\",\r\n            \"interconnectBay\": \"1\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": \"2\",\r\n            \"interconnectBay\": \"1\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": \"3\",\r\n            \"interconnectBay\": \"1\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": \"3\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": \"1\",\r\n            \"interconnectBay\": \"4\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": \"2\",\r\n            \"interconnectBay\": \"4\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": \"3\",\r\n            \"interconnectBay\": \"4\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": \"6\",\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        }\r\n    ]\r\n}" %(enc_grp_uri, enc_grp_etag, lig1_uri, lig2_uri, lig3_uri, lig_potash_uri, lig1_uri, lig2_uri, lig3_uri, lig_potash_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEgNoLigsE3(self, ip, auth, api, enc_grp_uri, enc_grp_etag):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n\t\"uri\": \"%s\",\r\n\t\"stackingMode\": \"Enclosure\",\r\n\t\"powerMode\": \"RedundantPowerSupply\",\r\n\t\"name\": \"EG1\",\r\n\t\"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n\t\"eTag\": \"%s\",\r\n\t\"enclosureCount\": \"3\",\r\n\t\"ipAddressingMode\": \"DHCP\",\r\n\t\"osDeploymentSettings\": {\r\n\t\t\"deploymentModeSettings\": null,\r\n\t\t\"manageOSDeployment\": false\r\n\t},\r\n\t\"portMappingCount\": 8,\r\n\t\"portMappings\": [{\r\n\t\t\"midplanePort\": 1,\r\n\t\t\"interconnectBay\": 1\r\n\t}, {\r\n\t\t\"midplanePort\": 2,\r\n\t\t\"interconnectBay\": 2\r\n\t}, {\r\n\t\t\"midplanePort\": 3,\r\n\t\t\"interconnectBay\": 3\r\n\t}, {\r\n\t\t\"midplanePort\": 4,\r\n\t\t\"interconnectBay\": 4\r\n\t}, {\r\n\t\t\"midplanePort\": 5,\r\n\t\t\"interconnectBay\": 5\r\n\t}, {\r\n\t\t\"midplanePort\": 6,\r\n\t\t\"interconnectBay\": 6\r\n\t}, {\r\n\t\t\"midplanePort\": 7,\r\n\t\t\"interconnectBay\": 7\r\n\t}, {\r\n\t\t\"midplanePort\": 8,\r\n\t\t\"interconnectBay\": 8\r\n\t}],\r\n\t\"interconnectBayMappingCount\": 0,\r\n\t\"interconnectBayMappings\": []\r\n\r\n}" %(enc_grp_uri, enc_grp_etag)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEGNonRedundantE3(self, ip, auth, api, enc_grp_uri, enc_grp_etag, lig_aside_enc1, lig_bside_enc1, lig_aside_enc2, lig_bside_enc2, lig_aside_enc3, lig_bside_enc3, lig_aside_potash, lig_bside_potash):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n    \"type\": \"EnclosureGroupV8\",\r\n    \"category\": \"enclosure-groups\",\r\n    \"uri\": \"%s\",\r\n    \"name\": \"EG1\",\r\n    \"eTag\": \"%s\",\r\n    \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n    \"stackingMode\": \"Enclosure\",\r\n    \"portMappingCount\": 8,\r\n    \"portMappings\": [\r\n        {\r\n            \"midplanePort\": 1,\r\n            \"interconnectBay\": 1\r\n        },\r\n        {\r\n            \"midplanePort\": 2,\r\n            \"interconnectBay\": 2\r\n        },\r\n        {\r\n            \"midplanePort\": 3,\r\n            \"interconnectBay\": 3\r\n        },\r\n        {\r\n            \"midplanePort\": 4,\r\n            \"interconnectBay\": 4\r\n        },\r\n        {\r\n            \"midplanePort\": 5,\r\n            \"interconnectBay\": 5\r\n        },\r\n        {\r\n            \"midplanePort\": 6,\r\n            \"interconnectBay\": 6\r\n        },\r\n        {\r\n            \"midplanePort\": 7,\r\n            \"interconnectBay\": 7\r\n        },\r\n        {\r\n            \"midplanePort\": 8,\r\n            \"interconnectBay\": 8\r\n        }\r\n    ],\r\n    \"interconnectBayMappingCount\": 8,\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"enclosureIndex\": 1,\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 2,\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 3,\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 3,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 1,\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\":  \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 2,\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 3,\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 6,\r\n            \"logicalInterconnectGroupUri\":  \"%s\"\r\n        }\r\n    ],\r\n    \"ipAddressingMode\": \"DHCP\",\r\n    \"ipRangeUris\": [],\r\n    \"ipv6AddressingMode\": \"External\",\r\n    \"ipv6RangeUris\": [],\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"description\": null,\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    },\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"enclosureCount\": 3\r\n}" %(enc_grp_uri, enc_grp_etag, lig_aside_enc1, lig_aside_enc2,  lig_aside_enc3, lig_aside_potash, lig_bside_enc1, lig_bside_enc2, lig_bside_enc3, lig_bside_potash)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEGIPv4RangeE136(self, ip, auth, api, enc_grp_uri, enc_grp_etag, range_uri, lig1_uri, lig2_uri, lig_potash_uri, lig_nitro_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n    \"uri\": \"%s\",\r\n    \"category\": \"enclosure-groups\",\r\n    \"name\": \"EG1\",\r\n    \"eTag\": \"%s\",\r\n    \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n    \"stackingMode\": \"Enclosure\",\r\n    \"ipAddressingMode\": \"IpPool\",\r\n    \"ipRangeUris\": [\"%s\"],\r\n    \"ipv6AddressingMode\": \"External\",\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    },\r\n    \"enclosureCount\": 2,\r\n    \"portMappingCount\": 8,\r\n    \"portMappings\": [\r\n        {\r\n            \"midplanePort\": 1,\r\n            \"interconnectBay\": 1\r\n        },\r\n        {\r\n            \"midplanePort\": 2,\r\n            \"interconnectBay\": 2\r\n        },\r\n        {\r\n            \"midplanePort\": 3,\r\n            \"interconnectBay\": 3\r\n        },\r\n        {\r\n            \"midplanePort\": 4,\r\n            \"interconnectBay\": 4\r\n        },\r\n        {\r\n            \"midplanePort\": 5,\r\n            \"interconnectBay\": 5\r\n        },\r\n        {\r\n            \"midplanePort\": 6,\r\n            \"interconnectBay\": 6\r\n        },\r\n        {\r\n            \"midplanePort\": 7,\r\n            \"interconnectBay\": 7\r\n        },\r\n        {\r\n            \"midplanePort\": 8,\r\n            \"interconnectBay\": 8\r\n        }\r\n    ],\r\n    \"interconnectBayMappingCount\": 8,\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"enclosureIndex\": 1,\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 2,\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 2,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 3,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 1,\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 2,\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 5,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 6,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        }\r\n    ]\r\n}\r\n"  %(enc_grp_uri, enc_grp_etag, range_uri, lig1_uri, lig2_uri, lig_potash_uri, lig_nitro_uri, lig1_uri, lig2_uri, lig_potash_uri, lig_nitro_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEGDefaultE136(self, ip, auth, api, enc_grp_uri, enc_grp_etag, lig1_uri, lig2_uri, lig_potash_uri, lig_nitro_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload = "{\r\n    \"uri\": \"%s\",\r\n    \"category\": \"enclosure-groups\",\r\n    \"name\": \"EG1\",\r\n    \"eTag\": \"%s\",\r\n    \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n    \"stackingMode\": \"Enclosure\",\r\n    \"ipAddressingMode\": \"DHCP\",\r\n    \"ipv6AddressingMode\": \"External\",\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    },\r\n    \"enclosureCount\": 2,\r\n    \"portMappingCount\": 8,\r\n    \"portMappings\": [\r\n        {\r\n            \"midplanePort\": 1,\r\n            \"interconnectBay\": 1\r\n        },\r\n        {\r\n            \"midplanePort\": 2,\r\n            \"interconnectBay\": 2\r\n        },\r\n        {\r\n            \"midplanePort\": 3,\r\n            \"interconnectBay\": 3\r\n        },\r\n        {\r\n            \"midplanePort\": 4,\r\n            \"interconnectBay\": 4\r\n        },\r\n        {\r\n            \"midplanePort\": 5,\r\n            \"interconnectBay\": 5\r\n        },\r\n        {\r\n            \"midplanePort\": 6,\r\n            \"interconnectBay\": 6\r\n        },\r\n        {\r\n            \"midplanePort\": 7,\r\n            \"interconnectBay\": 7\r\n        },\r\n        {\r\n            \"midplanePort\": 8,\r\n            \"interconnectBay\": 8\r\n        }\r\n    ],\r\n    \"interconnectBayMappingCount\": 8,\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"enclosureIndex\": 1,\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 2,\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 2,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 3,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 1,\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 2,\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 5,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 6,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        }\r\n    ]\r\n}"  %(enc_grp_uri, enc_grp_etag, lig1_uri, lig2_uri, lig_potash_uri, lig_nitro_uri, lig1_uri, lig2_uri, lig_potash_uri, lig_nitro_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEGIPv4RangeE159(self, ip, auth, api, enc_grp_uri, enc_grp_etag, range_uri, lig_potash_uri, lig_nitro_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload="{\r\n    \"uri\": \"%s\",\r\n    \"category\": \"enclosure-groups\",\r\n    \"name\": \"EG-HA\",\r\n    \"eTag\": \"%s\",\r\n    \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n    \"stackingMode\": \"Enclosure\",\r\n    \"ipAddressingMode\": \"IpPool\",\r\n    \"ipRangeUris\": [\"%s\"],\r\n    \"ipv6AddressingMode\": \"External\",\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    },\r\n    \"enclosureCount\": 2,\r\n    \"portMappingCount\": 8,\r\n    \"portMappings\": [\r\n        {\r\n            \"midplanePort\": 1,\r\n            \"interconnectBay\": 1\r\n        },\r\n        {\r\n            \"midplanePort\": 2,\r\n            \"interconnectBay\": 2\r\n        },\r\n        {\r\n            \"midplanePort\": 3,\r\n            \"interconnectBay\": 3\r\n        },\r\n        {\r\n            \"midplanePort\": 4,\r\n            \"interconnectBay\": 4\r\n        },\r\n        {\r\n            \"midplanePort\": 5,\r\n            \"interconnectBay\": 5\r\n        },\r\n        {\r\n            \"midplanePort\": 6,\r\n            \"interconnectBay\": 6\r\n        },\r\n        {\r\n            \"midplanePort\": 7,\r\n            \"interconnectBay\": 7\r\n        },\r\n        {\r\n            \"midplanePort\": 8,\r\n            \"interconnectBay\": 8\r\n        }\r\n    ],\r\n    \"interconnectBayMappingCount\": 8,\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 3,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 6,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        }\r\n    ]\r\n}" %(enc_grp_uri, enc_grp_etag, range_uri, lig_potash_uri, lig_nitro_uri, lig_potash_uri, lig_nitro_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def UpdateEGDefaultE159(self, ip, auth, api, enc_grp_uri, enc_grp_etag, lig_potash_uri, lig_nitro_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, enc_grp_uri)
        payload="{\r\n    \"uri\": \"%s\",\r\n    \"category\": \"enclosure-groups\",\r\n    \"name\": \"EG-HA\",\r\n    \"eTag\": \"%s\",\r\n    \"enclosureTypeUri\": \"/rest/enclosure-types/SY12000\",\r\n    \"stackingMode\": \"Enclosure\",\r\n    \"ipAddressingMode\": \"DHCP\",\r\n    \"ipv6AddressingMode\": \"External\",\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    },\r\n    \"enclosureCount\": 2,\r\n    \"portMappingCount\": 8,\r\n    \"portMappings\": [\r\n        {\r\n            \"midplanePort\": 1,\r\n            \"interconnectBay\": 1\r\n        },\r\n        {\r\n            \"midplanePort\": 2,\r\n            \"interconnectBay\": 2\r\n        },\r\n        {\r\n            \"midplanePort\": 3,\r\n            \"interconnectBay\": 3\r\n        },\r\n        {\r\n            \"midplanePort\": 4,\r\n            \"interconnectBay\": 4\r\n        },\r\n        {\r\n            \"midplanePort\": 5,\r\n            \"interconnectBay\": 5\r\n        },\r\n        {\r\n            \"midplanePort\": 6,\r\n            \"interconnectBay\": 6\r\n        },\r\n        {\r\n            \"midplanePort\": 7,\r\n            \"interconnectBay\": 7\r\n        },\r\n        {\r\n            \"midplanePort\": 8,\r\n            \"interconnectBay\": 8\r\n        }\r\n    ],\r\n    \"interconnectBayMappingCount\": 8,\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 3,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 6,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        }\r\n    ]\r\n}" %(enc_grp_uri, enc_grp_etag, lig_potash_uri, lig_nitro_uri, lig_potash_uri, lig_nitro_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    


class UpdateLogicalEnclosure(object):

    def LeUpdateFromGroup(self,ip,auth,api,le_uri):
        url = "https://%s%s/updateFromGroup" %(ip, le_uri)
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    


class CreateFibreChannelNetworks(object):

    def CreateFcNetwork(self, ip, auth, api, net):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/fc-networks" % ip
        payload = "{\r\n    \"name\" : \"%s\",\r\n    \"connectionTemplateUri\" : null,\r\n    \"linkStabilityTime\" : \"30\",\r\n    \"autoLoginRedistribution\" : true,\r\n    \"fabricType\" : \"FabricAttach\",\r\n    \"type\" : \"fc-networkV4\"\r\n}" % (net)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        
    def CreateFcNetworkDA(self, ip, auth, api, net):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/fc-networks" % ip
        payload = "{\r\n    \"name\" : \"%s\",\r\n    \"connectionTemplateUri\" : null,\r\n    \"linkStabilityTime\" : \"30\",\r\n    \"autoLoginRedistribution\" : true,\r\n    \"fabricType\" : \"DirectAttach\",\r\n    \"type\" : \"fc-networkV4\"\r\n}" % (net)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    


class CreateEthernetNetworks(object):

    def create_ethernet_network(self, ip, auth, api, net):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/ethernet-networks" % ip
        payload = "{\r\n    \"purpose\" : \"General\",\r\n    \"name\" : \"%s\",\r\n    \"smartLink\" : true,\r\n    \"privateNetwork\" : false,\r\n    \"connectionTemplateUri\" : null,\r\n    \"ethernetNetworkType\" : \"Untagged\",\r\n    \"type\" : \"ethernet-networkV4\"\r\n}\r\n" % (net)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
    
    def create_eth_tagged_network(self, ip, auth, api, net):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/ethernet-networks" % ip
        payload = "{\r\n    \"vlanId\" : %s,\r\n    \"purpose\" : \"General\",\r\n    \"name\" : \"VLAN-%s\",\r\n    \"smartLink\" : true,\r\n    \"privateNetwork\" : false,\r\n    \"connectionTemplateUri\" : null,\r\n    \"ethernetNetworkType\" : \"Tagged\",\r\n    \"type\" : \"ethernet-networkV4\"\r\n}" % (net, net)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def create_fcoe_network(self, ip, auth, api, net_name, vlanID):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/fcoe-networks" % ip
        payload = "{\r\n  \"name\" : \"%s\",\r\n  \"vlanId\" : \"%s\",\r\n  \"connectionTemplateUri\" : null,\r\n  \"type\" : \"fcoe-networkV4\"\r\n}" %(net_name, vlanID)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class CreateEnclosureGroup(object):

    def CreateEgTBird(self, ip, auth, api, lig_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/enclosure-groups" %ip
        payload = "{\r\n\t\"powerMode\": \"RedundantPowerSupply\",\r\n\t\"name\": \"EG1\",\r\n\t\"enclosureCount\": \"1\",\r\n\t\"ipAddressingMode\": \"DHCP\",\r\n\t\"osDeploymentSettings\": {\r\n\t\t\"deploymentModeSettings\": null,\r\n\t\t\"manageOSDeployment\": false\r\n\t},\r\n\t\"interconnectBayMappings\": [{\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}\r\n]\r\n\r\n}" %(lig_uri, lig_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
        
    def CreateEthernetTBird(self, ip, auth, api, lig_nitro_uri, lig_potash_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/enclosure-groups" %ip
        payload = "{\r\n\t\"powerMode\": \"RedundantPowerSupply\",\r\n\t\"name\": \"EG1\",\r\n\t\"enclosureCount\": 1,\r\n\t\"ipAddressingMode\": \"DHCP\",\r\n\t\"interconnectBayMappings\": [{\r\n\t\t\"enclosureIndex\": 1,\r\n\t\t\"interconnectBay\": 2,\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": 1,\r\n\t\t\"interconnectBay\": 3,\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},{\r\n\t\t\"enclosureIndex\": 1,\r\n\t\t\"interconnectBay\": 5,\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, \r\n\t{\r\n\t\t\"enclosureIndex\": 1,\r\n\t\t\"interconnectBay\": 6,\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}]\r\n}" %(lig_potash_uri, lig_nitro_uri, lig_potash_uri, lig_nitro_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json",
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def CreateEgE30(self, ip, auth, api, lig1_uri, lig_potash_uri, lig_nitro_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/enclosure-groups" %ip
        payload="{\r\n    \"name\": \"EG1\",\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"enclosureCount\": 1,\r\n    \"ipAddressingMode\": \"DHCP\",\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 2,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 3,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 5,\r\n            \"logicalInterconnectGroupUri\":  \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 6,\r\n            \"logicalInterconnectGroupUri\":  \"%s\"\r\n        }\r\n    ],\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    }\r\n}" %(lig1_uri, lig_nitro_uri, lig_potash_uri, lig1_uri, lig_nitro_uri, lig_potash_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def CreateEgE32(self, ip, auth, api, lig1_uri, lig_nitro_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/enclosure-groups" %ip
        payload="{\r\n    \"name\": \"EG1\",\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"enclosureCount\": 1,\r\n    \"ipAddressingMode\": \"DHCP\",\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 2,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 5,\r\n            \"logicalInterconnectGroupUri\":  \"%s\"\r\n        }\r\n    ],\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    }\r\n}" %(lig1_uri, lig_nitro_uri, lig1_uri, lig_nitro_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    


class CreateEnclosureGroupEthernetME(object):

    def CreateEgE159(self, ip, auth, api, lig_potash_uri, lig_nitro_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/enclosure-groups" %ip
        payload = "{\r\n    \"name\": \"EG-HA\",\r\n    \"ipAddressingMode\": \"DHCP\",\r\n    \"ipRangeUris\": [],\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"enclosureCount\": 2,\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 3,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 6,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        }\r\n    ],\r\n\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    }\r\n}" %(lig_potash_uri, lig_nitro_uri, lig_potash_uri, lig_nitro_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))


class CreateEnclosureGroupME(object):

    def CreateEgE136(self, ip, auth, api, lig1_uri, lig2_uri, lig_potash_uri, lig_nitro_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/enclosure-groups" %ip
        payload = "{\r\n    \"name\": \"EG1\",\r\n    \"ambientTemperatureMode\": \"Standard\",\r\n    \"powerMode\": \"RedundantPowerFeed\",\r\n    \"enclosureCount\": 2,\r\n    \"interconnectBayMappings\": [\r\n        {\r\n            \"enclosureIndex\": 1,\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 2,\r\n            \"interconnectBay\": 1,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 2,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 3,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 1,\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"enclosureIndex\": 2,\r\n            \"interconnectBay\": 4,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 5,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        },\r\n        {\r\n            \"interconnectBay\": 6,\r\n            \"logicalInterconnectGroupUri\": \"%s\"\r\n        }\r\n    ],\r\n    \"ipAddressingMode\": \"DHCP\",\r\n    \"osDeploymentSettings\": {\r\n        \"manageOSDeployment\": false,\r\n        \"deploymentModeSettings\": {\r\n            \"deploymentMode\": \"None\",\r\n            \"deploymentNetworkUri\": null\r\n        }\r\n    }\r\n}\r\n}" %(lig1_uri, lig2_uri, lig_potash_uri, lig_nitro_uri, lig1_uri, lig2_uri, lig_potash_uri, lig_nitro_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))

    def CreateEgE28(self, ip, auth, api, lig1_uri, lig2_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/enclosure-groups" %ip
        payload = "{\r\n\t\"powerMode\": \"RedundantPowerSupply\",\r\n\t\"name\": \"EG1\",\r\n\t\"ipAddressingMode\": \"DHCP\",\r\n\t\"enclosureCount\": \"2\",\r\n\t\"interconnectBayMappings\": [{\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, {\r\n\t\t\"enclosureIndex\": \"2\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},{\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, \r\n\t{\r\n\t\t\"enclosureIndex\": \"2\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\r\n\t}]\r\n\r\n\r\n}" %(lig1_uri, lig2_uri, lig1_uri, lig2_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
        
    def CreateEgE3(self, ip, auth, api, lig1_uri, lig2_uri, lig3_uri, lig_potash_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/enclosure-groups" %ip
        payload = "{\r\n\t\"name\": \"EG1\",\r\n\t\"enclosureCount\": \"3\",\r\n\t\"ipAddressingMode\": \"DHCP\",\r\n\t\"osDeploymentSettings\": {\r\n\t\t\"deploymentModeSettings\": null,\r\n\t\t\"manageOSDeployment\": false\r\n\t},\r\n\t\"interconnectBayMappings\": [{\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},\r\n\t{\r\n\t\t\"enclosureIndex\": \"1\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},\r\n\t{\r\n\t\t\"enclosureIndex\": \"2\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}, \r\n\t{\r\n\t\t\"enclosureIndex\": \"2\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},\r\n\t{\r\n\t\t\"enclosureIndex\": \"3\",\r\n\t\t\"interconnectBay\": \"1\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},\r\n\t{\r\n\t\t\"enclosureIndex\": \"3\",\r\n\t\t\"interconnectBay\": \"4\",\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},\r\n\t{\r\n\t\t\"interconnectBay\": 3,\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t},\r\n\t{\r\n\t\t\"interconnectBay\": 6,\r\n\t\t\"logicalInterconnectGroupUri\": \"%s\"\r\n\t}\r\n\t]\r\n}" %(lig1_uri, lig1_uri, lig2_uri, lig2_uri, lig3_uri, lig3_uri, lig_potash_uri, lig_potash_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))


class DeleteServerProfiles(object):

    def DeleteSP(self, ip, auth, api, sp_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" % (ip, sp_uri)
        querystring = {"force":"false"}
        payload = ""
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("DELETE", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def delete_sp_template(self, ip, auth, api, spt_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" % (ip, spt_uri)
        querystring = {"force":"false"}
        payload = ""
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("DELETE", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def DeleteSPForce(self, ip, auth, api, sp_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" % (ip, sp_uri)
        querystring = {"force":"true"}
        payload = ""
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("DELETE", url, data=payload, headers=headers, params=querystring, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class CheckAllStatesOfCarbon(object):

    def GetAllStatusOfCarbonsBay1(self, ip, auth, api, ul_ports_before, dl_ports_before, testcase, enc_name):
        CheckCarbon = CheckStateOfCarbon()
        #For loop to check if Carbons in bay1 are in a added with errors state.  If any carbons are in error state, the test will stop
        logging.info("Checking if Carbons are in Added with errors state ")
        tc = "Check if carbon bay1 is not in error state"
        CheckCarbon.CheckCarbonForErrorsBay1(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        countdown(5)
        #For loop to check if carbons in bay1 are in configured state.
        tc = "Carbon in bay1 is in configured state"
        CheckCarbon.CheckCarbonStateBay1(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        #Check uplink ports to verify they are online
        logging.info("Checking the status of the uplinks ports")
        ul_ports_after = GetCarbonUpLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing UL ports before and after")
        tc = "Status of Uplink ports"
        if ul_ports_before == ul_ports_after:
            logging.info ("Uplink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif ul_ports_before != ul_ports_after:
            logging.info ("Uplink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            ul_ports_after = GetCarbonUpLinkPorts(ip, api, auth, enc_name)
            if ul_ports_before == ul_ports_after:
                logging.info ("Uplink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif ul_ports_before != ul_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        logging.info("Checking the status of the downlinks ports")
        dl_ports_after = GetCarbonDownLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing DL ports before and after")
        tc = "Status of Downlink ports"
        if dl_ports_before == dl_ports_after:
            logging.info ("Downlink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif dl_ports_before != dl_ports_after:
            logging.info ("Downlink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            dl_ports_after = GetCarbonDownLinkPorts(ip, api, auth, enc_name)
            if dl_ports_before == dl_ports_after:
                logging.info ("Downlink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif dl_ports_before != dl_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        tc = testcase
        PassOrFail(result, tc)
    
    def GetAllStatusOfCarbonsBay4(self, ip, auth, api, ul_ports_before, dl_ports_before, testcase, enc_name):
        CheckCarbon = CheckStateOfCarbon()
        #For loop to check if Carbons are in a added with errors state.  If any carbons are in error state, the test will stop
        logging.info("Checking if Carbons are in Added with errors state ")
        tc = "Check if carbon bay4 is not in error state"
        CheckCarbon.CheckCarbonForErrorsBay4(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        countdown(5)
        #For loop to check if carbons in bay4 are in configured state.
        tc = "Carbon in Bay4 is in configured state"
        CheckCarbon.CheckCarbonStateBay4(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        #Check uplink ports to verify they are online
        logging.info("Checking the status of the uplinks ports")
        ul_ports_after = GetCarbonUpLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing UL ports before and after")
        tc = "Status of Uplink ports"
        if ul_ports_before == ul_ports_after:
            logging.info ("Uplink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif ul_ports_before != ul_ports_after:
            logging.info ("Uplink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            ul_ports_after = GetCarbonUpLinkPorts(ip, api, auth, enc_name)
            if ul_ports_before == ul_ports_after:
                logging.info ("Uplink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif ul_ports_before != ul_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        logging.info("Checking the status of the downlinks ports")
        dl_ports_after = GetCarbonDownLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing DL ports before and after")
        tc = "Status of Downlink ports"
        if dl_ports_before == dl_ports_after:
            logging.info ("Downlink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif dl_ports_before != dl_ports_after:
            logging.info ("Downlink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            dl_ports_after = GetCarbonDownLinkPorts(ip, api, auth, enc_name)
            if dl_ports_before == dl_ports_after:
                logging.info ("Downlink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif dl_ports_before != dl_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        tc = testcase
        PassOrFail(result, tc)

    def GetAllStatusOfBothCarbons(self, ip, auth, api, ul_ports_before, dl_ports_before, testcase, enc_name):
        CheckCarbon = CheckStateOfCarbon()
        logging.info("Checking if Carbons are in Added with errors state ")
        tc = "Check if carbon(s) are not in error state"
        CheckCarbon.CheckCarbonForErrors(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
    
        logging.info("check if carbons are in configured state.")
        tc = "The carbons are in configured/Monitored state"
        CheckCarbon.CheckCarbonState(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
    
        #Check uplink ports to verify they are online
        logging.info("Checking the status of the uplinks ports")
        ul_ports_after = GetCarbonUpLinkPorts(ip, api, auth, enc_name)
    
        logging.info("Comparing UL ports before and after")
        tc = "Status of Uplink ports"
        if ul_ports_before == ul_ports_after:
            logging.info ("Uplink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif ul_ports_before != ul_ports_after:
            logging.info ("Uplink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            ul_ports_after = GetCarbonUpLinkPorts(ip, api, auth, enc_name)
            if ul_ports_before == ul_ports_after:
                logging.info ("Uplink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif ul_ports_before != ul_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        logging.info("Checking the status of the downlinks ports")
        dl_ports_after = GetCarbonDownLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing DL ports before and after")
        tc = "Status of Downlink ports"
        if dl_ports_before == dl_ports_after:
            logging.info ("Downlink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif dl_ports_before != dl_ports_after:
            logging.info ("Downlink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            dl_ports_after = GetCarbonDownLinkPorts(ip, api, auth, enc_name)
            if dl_ports_before == dl_ports_after:
                logging.info ("Downlink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif dl_ports_before != dl_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        tc = testcase
        PassOrFail(result, tc)


class CheckAllStatesOfPotash(object):

    def GetAllStatusOfPotasheBay2(self, ip, auth, api, ul_ports_before, dl_ports_before, testcase, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        CheckPotash = CheckStateOfEthernetICM()
        #For loop to check if Potash in bay2 are in a added with errors state.  If any Potash are in error state, the test will stop
        logging.info("Checking if Potash are in Added with errors state ")
        tc = "Check if Potash bay2 is not in error state"
        CheckPotash.CheckPotashForErrorsBay2(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        countdown(5)
        #For loop to check if Potash in bay2 are in configured state.
        tc = "Potash in bay2 is in configured state"
        CheckPotash.CheckPotashStateBay2(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        #Check uplink ports to verify they are online
        logging.info("Checking the status of the uplinks ports")
        ul_ports_after = GetPotashUpLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing UL ports before and after")
        tc = "Status of Uplink ports"
        if ul_ports_before == ul_ports_after:
            logging.info ("Uplink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif ul_ports_before != ul_ports_after:
            logging.info ("Uplink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            ul_ports_after = GetPotashUpLinkPorts(ip, api, auth, enc_name)
            if ul_ports_before == ul_ports_after:
                logging.info ("Uplink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif ul_ports_before != ul_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        logging.info("Checking the status of the downlinks ports")
        dl_ports_after = GetPotashDownLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing DL ports before and after")
        tc = "Status of Downlink ports"
        if dl_ports_before == dl_ports_after:
            logging.info ("Downlink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif dl_ports_before != dl_ports_after:
            logging.info ("Downlink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            dl_ports_after = GetPotashDownLinkPorts(ip, api, auth, enc_name)
            if dl_ports_before == dl_ports_after:
                logging.info ("Downlink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif dl_ports_before != dl_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        tc = testcase
        PassOrFail(result, tc)
    
    def GetAllStatusOfPotashBay5(self, ip, auth, api, ul_ports_before, dl_ports_before, testcase, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        CheckPotash = CheckStateOfEthernetICM()
        #For loop to check if Potash are in a added with errors state.  If any Potash are in error state, the test will stop
        logging.info("Checking if Potash are in Added with errors state ")
        tc = "Check if Potash bay5 is not in error state"
        CheckPotash.CheckPotashForErrorsBay5(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        countdown(5)
        #For loop to check if potash in bay5 are in configured state.
        tc = "Potash in Bay5 is in configured state"
        CheckPotash.CheckPotashStateBay5(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        #Check uplink ports to verify they are online
        logging.info("Checking the status of the uplinks ports")
        ul_ports_after = GetPotashUpLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing UL ports before and after")
        tc = "Status of Uplink ports"
        if ul_ports_before == ul_ports_after:
            logging.info ("Uplink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif ul_ports_before != ul_ports_after:
            logging.info ("Uplink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            ul_ports_after = GetPotashUpLinkPorts(ip, api, auth, enc_name)
            if ul_ports_before == ul_ports_after:
                logging.info ("Uplink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif ul_ports_before != ul_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        logging.info("Checking the status of the downlinks ports")
        dl_ports_after = GetPotashDownLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing DL ports before and after")
        tc = "Status of Downlink ports"
        if dl_ports_before == dl_ports_after:
            logging.info ("Downlink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif dl_ports_before != dl_ports_after:
            logging.info ("Downlink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            dl_ports_after = GetPotashDownLinkPorts(ip, api, auth, enc_name)
            if dl_ports_before == dl_ports_after:
                logging.info ("Downlink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif dl_ports_before != dl_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        tc = testcase
        PassOrFail(result, tc)

    def GetAllStatusOfPotash(self, ip, auth, api, ul_ports_before, dl_ports_before, testcase, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        CheckPotash = CheckStateOfEthernetICM()
        logging.info("Checking if Potash are in Added with errors state ")
        tc = "Check if Potash(s) are not in error state"
        CheckPotash.CheckPotashForErrors(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
    
        logging.info("check if Potash are in configured state.")
        tc = "The Potash are in configured/Monitored state"
        CheckPotash.CheckPotashState(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
    
        #Check uplink ports to verify they are online
        logging.info("Checking the status of the uplinks ports")
        ul_ports_after = GetPotashUpLinkPorts(ip, api, auth, enc_name)
    
        logging.info("Comparing UL ports before and after")
        tc = "Status of Uplink ports"
        if ul_ports_before == ul_ports_after:
            logging.info ("Uplink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif ul_ports_before != ul_ports_after:
            logging.info ("Uplink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            ul_ports_after = GetPotashUpLinkPorts(ip, api, auth, enc_name)
            if ul_ports_before == ul_ports_after:
                logging.info ("Uplink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif ul_ports_before != ul_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        logging.info("Checking the status of the downlinks ports")
        dl_ports_after = GetPotashDownLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing DL ports before and after")
        tc = "Status of Downlink ports"
        if dl_ports_before == dl_ports_after:
            logging.info ("Downlink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif dl_ports_before != dl_ports_after:
            logging.info ("Downlink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            dl_ports_after = GetPotashDownLinkPorts(ip, api, auth, enc_name)
            if dl_ports_before == dl_ports_after:
                logging.info ("Downlink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif dl_ports_before != dl_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        tc = testcase
        PassOrFail(result, tc)


class CheckAllStatesOfNitro(object):

    def GetAllStatusOfNitroeBay3(self, ip, auth, api, ul_ports_before, dl_ports_before, testcase, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        CheckNitro = CheckStateOfEthernetICM()
        #For loop to check if Nitro in bay3 are in a added with errors state.  If any Nitro are in error state, the test will stop
        logging.info("Checking if Nitro are in Added with errors state ")
        tc = "Check if Nitro bay3 is not in error state"
        CheckNitro.CheckNitroForErrorsBay3(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        countdown(5)
        #For loop to check if Nitro in bay3 are in configured state.
        tc = "Nitro in bay3 is in configured state"
        CheckNitro.CheckNitroStateBay3(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        #Check uplink ports to verify they are online
        logging.info("Checking the status of the uplinks ports")
        ul_ports_after = GetNitroUpLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing UL ports before and after")
        tc = "Status of Uplink ports"
        if ul_ports_before == ul_ports_after:
            logging.info ("Uplink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif ul_ports_before != ul_ports_after:
            logging.info ("Uplink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            ul_ports_after = GetNitroUpLinkPorts(ip, api, auth, enc_name)
            if ul_ports_before == ul_ports_after:
                logging.info ("Uplink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif ul_ports_before != ul_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        logging.info("Checking the status of the downlinks ports")
        dl_ports_after = GetNitroDownLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing DL ports before and after")
        tc = "Status of Downlink ports"
        if dl_ports_before == dl_ports_after:
            logging.info ("Downlink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif dl_ports_before != dl_ports_after:
            logging.info ("Downlink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            dl_ports_after = GetNitroDownLinkPorts(ip, api, auth, enc_name)
            if dl_ports_before == dl_ports_after:
                logging.info ("Downlink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif dl_ports_before != dl_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        tc = testcase
        PassOrFail(result, tc)
    
    def GetAllStatusOfNitroBay6(self, ip, auth, api, ul_ports_before, dl_ports_before, testcase, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        CheckNitro = CheckStateOfEthernetICM()
        #For loop to check if Nitro are in a added with errors state.  If any Nitro are in error state, the test will stop
        logging.info("Checking if Nitro are in Added with errors state ")
        tc = "Check if Nitro bay6 is not in error state"
        CheckNitro.CheckNitroForErrorsBay6(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        countdown(5)
        #For loop to check if potash in bay5 are in configured state.
        tc = "Nitro in Bay6 is in configured state"
        CheckNitro.CheckNitroStateBay6(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
        
        #Check uplink ports to verify they are online
        logging.info("Checking the status of the uplinks ports")
        ul_ports_after = GetNitroUpLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing UL ports before and after")
        tc = "Status of Uplink ports"
        if ul_ports_before == ul_ports_after:
            logging.info ("Uplink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif ul_ports_before != ul_ports_after:
            logging.info ("Uplink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            ul_ports_after = GetNitroUpLinkPorts(ip, api, auth, enc_name)
            if ul_ports_before == ul_ports_after:
                logging.info ("Uplink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif ul_ports_before != ul_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        logging.info("Checking the status of the downlinks ports")
        dl_ports_after = GetNitroDownLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing DL ports before and after")
        tc = "Status of Downlink ports"
        if dl_ports_before == dl_ports_after:
            logging.info ("Downlink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif dl_ports_before != dl_ports_after:
            logging.info ("Downlink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            dl_ports_after = GetNitroDownLinkPorts(ip, api, auth, enc_name)
            if dl_ports_before == dl_ports_after:
                logging.info ("Downlink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif dl_ports_before != dl_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        tc = testcase
        PassOrFail(result, tc)

    def GetAllStatusOfNitro(self, ip, auth, api, ul_ports_before, dl_ports_before, testcase, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        CheckNitro = CheckStateOfEthernetICM()
        logging.info("Checking if Nitro are in Added with errors state ")
        tc = "Check if Nitro(s) are not in error state"
        CheckNitro.CheckNitroForErrors(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
    
        logging.info("check if Nitro are in configured state.")
        tc = "The Nitro are in configured/Monitored state"
        CheckNitro.CheckNitroState(ip, auth, api, enc_name)
        result = "Pass"
        PassOrFail(result, tc)
    
        #Check uplink ports to verify they are online
        logging.info("Checking the status of the uplinks ports")
        ul_ports_after = GetNitroUpLinkPorts(ip, api, auth, enc_name)
    
        logging.info("Comparing UL ports before and after")
        tc = "Status of Uplink ports"
        if ul_ports_before == ul_ports_after:
            logging.info ("Uplink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif ul_ports_before != ul_ports_after:
            logging.info ("Uplink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            ul_ports_after = GetNitroUpLinkPorts(ip, api, auth, enc_name)
            if ul_ports_before == ul_ports_after:
                logging.info ("Uplink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif ul_ports_before != ul_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        logging.info("Checking the status of the downlinks ports")
        dl_ports_after = GetNitroDownLinkPorts(ip, api, auth, enc_name)
        
        logging.info("Comparing DL ports before and after")
        tc = "Status of Downlink ports"
        if dl_ports_before == dl_ports_after:
            logging.info ("Downlink ports are ok")
            result = "Pass"
            PassOrFail(result, tc)
        elif dl_ports_before != dl_ports_after:
            logging.info ("Downlink ports do not check out")
            logging.info("pausing 7 mins to allow more time for the uplink ports to come online")
            countdown(420)
            dl_ports_after = GetNitroDownLinkPorts(ip, api, auth, enc_name)
            if dl_ports_before == dl_ports_after:
                logging.info ("Downlink ports are ok")
                result = "Pass"
                PassOrFail(result, tc)
            elif dl_ports_before != dl_ports_after:
                logging.error("%s" %tc)
                result = "Fail"
                PassOrFail(result, tc)
                sys.exit(0)
        
        tc = testcase
        PassOrFail(result, tc)


class CheckStateOfCarbon(object):


    def IsCarbonTurnedOffBay4(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name','enclosureName'])
            for ic in range(0, len(ic_list)):
                icm_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                name = ic_list[ic]['enclosureName']
                if icm_name == "{}, interconnect 4" .format(name):
                    logging.info("PowerState is: {}" .format(power_state))
                    if power_state == "On":
                        logging.warning("Power is still on carbon in {}" .format(icm_name))
                        logging.warning("Ok. I was expecting the power to be off.")
                        logging.info("Pausing 1 min and checking the powerstate again")
                        countdown(30)
                        count = 0 
                        while power_state == "On":
                            get_ic_dict = ic_inst.GetInterconnect(ip, auth, api)
                            ic_list = printDict(get_ic_dict, ['powerState'])
                            power_state = ic_list[ic]['powerState']
                            if power_state == "On":
                                logging.info("Looks like power to carbon is still on. Will check again 1 min")
                                countdown(30)
                                count += 1
                                if count == 5:
                                    logging.info("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif power_state == "Off":
                                logging.info("Power has been turned off, moving on")
                                #continue
                    elif power_state == "Off":
                        logging.info("Power is off carbon in {}" .format(icm_name))
                        logging.info("Ok, that's what it's supposed to be. Moving on.")
                        #continue
                    else:
                        pass
            else:
                pass

    def IsCarbonTurnedOffBay1(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name','enclosureName'])
            for ic in range(0, len(ic_list)):
                icm_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                name = ic_list[ic]['enclosureName']
                if icm_name == "{}, interconnect 1" .format(name):
                    logging.info("PowerState is: {}" .format(power_state))
                    if power_state == "On":
                        logging.warning("Power is still on carbon in {}" .format(icm_name))
                        logging.warning("Ok. I was expecting the power to be off.")
                        logging.info("Pausing 1 min and checking the powerstate again")
                        countdown(30)
                        count = 0 
                        while power_state == "On":
                            get_ic_dict = ic_inst.GetInterconnect(ip, auth, api)
                            ic_list = printDict(get_ic_dict, ['powerState'])
                            power_state = ic_list[ic]['powerState']
                            if power_state == "On":
                                logging.info("Looks like power to carbon is still on. Will check again 1 min")
                                countdown(30)
                                count += 1
                                if count == 5:
                                    logging.info("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif power_state == "Off":
                                logging.info("Power has been turned off, moving on")
                                #continue
                    elif power_state == "Off":
                        logging.info("Power is off carbon in {}" .format(icm_name))
                        logging.info("Ok, that's what it's supposed to be. Moving on.")
                        #continue
                    else:
                        pass
            else:
                pass
    
    def IsCarbonTurnedOnBay4(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name','enclosureName'])
            for ic in range(0, len(ic_list)):
                icm_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                name = ic_list[ic]['enclosureName']
                if icm_name == "{}, interconnect 4" .format(name):
                    logging.info("PowerState is: {}" .format(power_state))
                    if power_state == "Off":
                        logging.warning("Power is still off carbon in {}" .format(icm_name))
                        logging.warning("Ok. I was expecting the power to be on.")
                        logging.info("Pausing 1 min and checking the powerstate again")
                        countdown(30)
                        count = 0 
                        while power_state == "Off":
                            get_ic_dict = ic_inst.GetInterconnect(ip, auth, api)
                            ic_list = printDict(get_ic_dict, ['powerState'])
                            power_state = ic_list[ic]['powerState']
                            if power_state == "Off":
                                logging.info("Looks like power to carbon is still off. Will check again 1 min")
                                countdown(30)
                                count += 1
                                if count == 5:
                                    logging.info("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif power_state == "On":
                                logging.info("Power has been turned on, moving on")
                                #continue
                    elif power_state == "On":
                        logging.info("Power is on carbon in {}" .format(icm_name))
                        logging.info("Ok, that's what it's supposed to be. Moving on.")
                        #continue
                    else:
                        pass
            else:
                pass
    
    def IsCarbonTurnedOnBay1(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name','enclosureName'])
            for ic in range(0, len(ic_list)):
                icm_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                name = ic_list[ic]['enclosureName']
                if icm_name == "{}, interconnect 1" .format(name):
                    logging.info("PowerState is: {}" .format(power_state))
                    if power_state == "Off":
                        logging.warning("Power is still off carbon in {}" .format(icm_name))
                        logging.warning("Ok. I was expecting the power to be on.")
                        logging.info("Pausing 1 min and checking the powerstate again")
                        countdown(30)
                        count = 0 
                        while power_state == "Off":
                            get_ic_dict = ic_inst.GetInterconnect(ip, auth, api)
                            ic_list = printDict(get_ic_dict, ['powerState'])
                            power_state = ic_list[ic]['powerState']
                            if power_state == "Off":
                                logging.info("Looks like power to carbon is still off. Will check again 1 min")
                                countdown(30)
                                count += 1
                                if count == 5:
                                    logging.info("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif power_state == "On":
                                logging.info("Power has been turned on, moving on")
                                #continue
                    elif power_state == "On":
                        logging.info("Power is on carbon in {}" .format(icm_name))
                        logging.info("Ok, that's what it's supposed to be. Moving on.")
                        #continue
                    else:
                        pass
            else:
                pass
    
    def CheckCarbonState(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                try:
                    icm_name = ic_list[ic]['name']
                except KeyError as e:
                    logging.info(e)
                if '16Gb' in "Virtual Connect SE 16Gb FC Module for Synergy":
                    logging.info("The state is: {}" .format(state))
                    if state == "Configured":
                        logging.info("Carbon in {} is in Configured state, let's continue" .format(icm_name))
                    elif state == "Monitored":
                        logging.info("Carbon in {} is in monitored state" .format(icm_name))
                    elif state == "Configuring":
                        logging.warning("Carbon is in configuring state, will check again in 1 min")
                        countdown(60)
                        count = 0
                        while state == "Configuring":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Configuring":
                                logging.info("Carbon is still in configuring state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.info("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                    elif state == "Adding":
                        logging.warning("Carbon is in adding state. Pausing 45 secs and will check again.")
                        countdown(60)
                        count = 0
                        while state == "Adding":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Adding":
                                logging.warning("Carbon is still in adding state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                    elif state == "Maintenance":
                        logging.warning("Carbon is in Maintenance mode.  This maybe a defect. Will check state in 45 secs")
                        countdown(60)
                        count = 0
                        while state == "Maintenance":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Maintenance":
                                logging.warning("Carbon is still in Maintenance state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 10:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                    else:
                        pass
                elif '32Gb' in "Virtual Connect SE 32Gb FC Module for Synergy":
                    logging.info("The state is: {}" .format(state))
                    if state == "Configured":
                        logging.info("Carbon in {} is in Configured state, let's continue" .format(icm_name))
                    elif state == "Monitored":
                        logging.info("Carbon in {} is in monitored state" .format(icm_name))
                    elif state == "Configuring":
                        logging.warning("Carbon is in configuring state, will check again in 45 secs")
                        countdown(60)
                        count = 0
                        while state == "Configuring":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Configuring":
                                logging.warning("Carbon is still in configuring state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                    elif state == "Adding":
                        logging.warning("Carbon is in adding state. Pausing 45 secs and will check again.")
                        countdown(60)
                        count = 0
                        while state == "Adding":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Adding":
                                logging.warning("Carbon is still in adding state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                    elif state == "Maintenance":
                        logging.warning("Carbon is in Maintenance mode.  This maybe a defect. Will check state in 45 secs")
                        countdown(60)
                        count = 0
                        while state == "Maintenance":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Maintenance":
                                logging.warning("Carbon is still in Maintenance state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 10:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                    else:
                        pass
                else:
                    logging.info("Enclosure does not contain a carbon ICM")
        return state

    def CheckCarbonStateBay1(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                name = ic_list[ic]['enclosureName']
                icm_name = ic_list[ic]['name']

                if icm_name == "{}, interconnect 1" .format(name):
                    logging.info("The state is: {}" .format(state))
                    if state == "Configured":
                        logging.info("Carbon in {} is in Configured state, let's continue" .format(icm_name))
                    elif state == "Monitored":
                        logging.info("Carbon in {} is in monitored state" .format(icm_name))
                    elif state == "Configuring":
                        logging.warning("Carbon is in configuring state, will check again in 45 secs")
                        countdown(60)
                        count = 0
                        while state == "Configuring":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Configuring":
                                logging.info("Carbon is still in configuring state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.info("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                                return state
                    elif state == "Adding":
                        logging.warning("Carbon is in adding state. Pausing 45 secs and will check again.")
                        countdown(60)
                        count = 0
                        while state == "Adding":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Adding":
                                logging.warning("Carbon is still in adding state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                                return state
                    elif state == "Maintenance":
                        logging.warning("Carbon is in Maintenance mode.  This maybe a defect. Will check state in 45 secs")
                        countdown(60)
                        count = 0
                        while state == "Maintenance":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Maintenance":
                                logging.warning("Carbon is still in Maintenance state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 10:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                                return state
                    else:
                        pass
        #return state
    
    def CheckCarbonStateBay4(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                icm_name = ic_list[ic]['name']
                name = ic_list[ic]['enclosureName']
                if icm_name == "{}, interconnect 4" .format(name):
                    logging.info("The state is: {}" .format(state))
                    if state == "Configured":
                        logging.info("Carbon in {} is in Configured state, let's continue" .format(icm_name))
                    elif state == "Monitored":
                        logging.info("Carbon in {} is in monitored state" .format(icm_name))
                    elif state == "Configuring":
                        logging.warning("Carbon is in configuring state, will check again in 45 secs")
                        countdown(60)
                        count = 0
                        while state == "Configuring":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Configuring":
                                logging.info("Carbon is still in configuring state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.info("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                                return state
                    elif state == "Adding":
                        logging.warning("Carbon is in adding state. Pausing 45 secs and will check again.")
                        countdown(60)
                        count = 0
                        while state == "Adding":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Adding":
                                logging.warning("Carbon is still in adding state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                                return state
                    elif state == "Maintenance":
                        logging.warning("Carbon is in Maintenance mode.  This maybe a defect. Will check state in 45 secs")
                        countdown(60)
                        count = 0
                        while state == "Maintenance":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Maintenance":
                                logging.warning("Carbon is still in Maintenance state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 10:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Carbon is in configured state")
                                return state
                    else:
                        pass
        #return state
    
    def CheckCarbonForErrors(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                model = ic_list[ic]['model']
                icm_name = ic_list[ic]['name']
                if model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                    if state == "AddedWithErrors":
                        logging.error("Carbon in {} is in Added with Errors state, quiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "ConfigError":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Configuration error":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Absent":
                        logging.error("The Carbon in {} is in absent state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Unmanaged":
                        logging.error("Carbon in {} is in Unmanaged state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    else:
                        logging.info("Carbon in {} is in good shape, let's continue" .format(icm_name))
                elif model == "Virtual Connect SE 16Gb FC Module for Synergy":
                    if state == "AddedWithErrors":
                        logging.error("Carbon in {} is in Added with Errors state, quiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "ConfigError":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Configuration error":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Absent":
                        logging.error("The Carbon in {} is in absent state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Unmanaged":
                        logging.error("Carbon in {} is in Unmanaged state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    else:
                        logging.info("Carbon in {} is in good shape, let's continue" .format(icm_name))
                elif model == "Virtual Connect SE 32Gb FC Module for Synergy":
                    if state == "AddedWithErrors":
                        logging.error("Carbon in {} is in Added with Errors state, quiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "ConfigError":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Configuration error":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Absent":
                        logging.error("The Carbon in {} is in absent state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Unmanaged":
                        logging.error("Carbon in {} is in Unmanaged state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    else:
                        logging.info("Carbon in {} is in good shape, let's continue" .format(icm_name))
                elif model == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                    if state == "AddedWithErrors":
                        logging.error("Carbon in {} is in Added with Errors state, quiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "ConfigError":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Configuration error":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Absent":
                        logging.error("The Carbon in {} is in absent state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Unmanaged":
                        logging.error("Carbon in {} is in Unmanaged state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    else:
                        logging.info("Carbon in {} is in good shape, let's continue" .format(icm_name))

    def CheckCarbonForErrorsBay1(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                icm_name = ic_list[ic]['name']
                name = ic_list[ic]['enclosureName']
                if icm_name == "{}, interconnect 1" .format(name):
                    if state == "AddedWithErrors":
                        logging.error("Carbon in {} is in Added with Errors state, quiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "ConfigError":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Configuration error":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Absent":
                        logging.error("The Carbon in {} is in absent state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Unmanaged":
                        logging.error("Carbon in {} is in Unmanaged state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    else:
                        logging.info("Carbon in {} is in good shape, let's continue" .format(icm_name))
    
    def CheckCarbonForErrorsBay4(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                icm_name = ic_list[ic]['name']
                name = ic_list[ic]['enclosureName']
                if icm_name == "{}, interconnect 4" .format(name):
                    if state == "AddedWithErrors":
                        logging.error("Carbon in {} is in Added with Errors state, quiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "ConfigError":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Configuration error":
                        logging.error("The Carbon in {} is in configuration error state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Absent":
                        logging.error("The Carbon in {} is in absent state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    elif state == "Unmanaged":
                        logging.error("Carbon in {} is in Unmanaged state.  Exiting script" .format(icm_name))
                        sys.exit(0)
                    else:
                        logging.info("Carbon in {} is in good shape, let's continue" .format(icm_name))
    
    def CheckCarbonMaintenanceStateBay1(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_name_uri_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_name_uri_list)):
                state = ic_name_uri_list[ic]['state']
                icm_name = ic_name_uri_list[ic]['name']
                if icm_name == "{}, interconnect 1" .format(name):
                    logging.info("The state is: {}" .format(state))
                    if state == "Maintenance":
                        logging.info("Carbon in {} is in Maintenance state, let's continue" .format(icm_name))
                        return state
                    else:
                        pass
    
    def CheckCarbonMaintenanceStateBay4(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_name_uri_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_name_uri_list)):
                state = ic_name_uri_list[ic]['state']
                icm_name = ic_name_uri_list[ic]['name']
                if icm_name == "{}, interconnect 4" .format(name):
                    logging.info("The state is: {}" .format(state))
                    if state == "Maintenance":
                        logging.info("Carbon in {} is in Maintenance state, let's continue" .format(icm_name))
                        return state
                    else:
                        pass
    
    def check_uplink_port_speed_not_sixteen_bay4(self, ip, api, auth):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        GetInterconnectList = ic_inst.GetInterconnect(ip, auth, api)
        ic_list = printDict(GetInterconnectList, ['model', 'name', 'enclosureName', 'ports'])
        logging.info("Getting a list of uplink ports that are online")
        for i in range(0, len(ic_list)):
            ic_port_list = ic_list[i]['ports']
            model = ic_list[i]['model']
            icm_name = ic_list[i]['name']
            enc_name = ic_list[i]['enclosureName']
            if model == "Virtual Connect SE 16Gb FC Module for Synergy":
                if icm_name == "%s, interconnect 4" %enc_name:
                    for p in range(0, len(ic_port_list)):
                        IcPortStatusReason = ic_port_list[p]['portStatusReason']
                        portSpeed = ic_port_list[p]['operationalSpeed']
                        PortType = ic_port_list[p]['portType']
                        if IcPortStatusReason == 'LoggedIn' and PortType == 'Uplink' and portSpeed == 'Speed16G':
                            logging.error("One or more are connected at 16Gb")
                            return False
                        else:
                            pass
            elif model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                if icm_name == "%s, interconnect 4" %enc_name:
                    for p in range(0, len(ic_port_list)):
                        IcPortStatusReason = ic_port_list[p]['portStatusReason']
                        portSpeed = ic_port_list[p]['operationalSpeed']
                        PortType = ic_port_list[p]['portType']
                        if IcPortStatusReason == 'LoggedIn' and PortType == 'Uplink' and portSpeed == 'Speed16G':
                            logging.error("One or more are connected at 16Gb")
                            return False
                        else:
                            pass
        return True


class CheckStateOfEthernetICM(object):

    def IsPotashTurnedOffBay5(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 5" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "On":
                            logging.warning("Power is still on Potash in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be off.")
                            logging.info("Pausing 30 secs and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "On":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "On":
                                    logging.info("Looks like power to Potash is still on. Will check again 30 secs")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "Off":
                                    logging.info("Power has been turned off, moving on")
                                    continue
                        elif power_state == "Off":
                            logging.info("Power is off Potash in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def IsPotashTurnedOffBay2(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 2" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "On":
                            logging.warning("Power is still on Potash in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be off.")
                            logging.info("Pausing 30 secs and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "On":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "On":
                                    logging.info("Looks like power to Potash is still on. Will check again 30 secs")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "Off":
                                    logging.info("Power has been turned off, moving on")
                                    continue
                        elif power_state == "Off":
                            logging.info("Power is off Potash in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def IsPotashTurnedOnBay5(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 5" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "Off":
                            logging.warning("Power is still off Potash in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be on.")
                            logging.info("Pausing 1 min and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "Off":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "Off":
                                    logging.info("Looks like power to Potash is still off. Will check again 1 min")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "On":
                                    logging.info("Power has been turned on, moving on")
                                    continue
                        elif power_state == "On":
                            logging.info("Power is on Potash in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def IsPotashTurnedOnBay2(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 2" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "Off":
                            logging.warning("Power is still off Potash in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be on.")
                            logging.info("Pausing 1 min and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "Off":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "Off":
                                    logging.info("Looks like power to Potash is still off. Will check again 1 min")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "On":
                                    logging.info("Power has been turned on, moving on")
                                    continue
                        elif power_state == "On":
                            logging.info("Power is on Potash in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def IsPotashTurnedOffBay4(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 4" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "On":
                            logging.warning("Power is still on Potash in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be off.")
                            logging.info("Pausing 30 secs and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "On":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "On":
                                    logging.info("Looks like power to Potash is still on. Will check again 30 secs")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "Off":
                                    logging.info("Power has been turned off, moving on")
                                    continue
                        elif power_state == "Off":
                            logging.info("Power is off Potash in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def IsPotashTurnedOffBay1(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 1" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "On":
                            logging.warning("Power is still on Potash in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be off.")
                            logging.info("Pausing 30 secs and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "On":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "On":
                                    logging.info("Looks like power to Potash is still on. Will check again 30 secs")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "Off":
                                    logging.info("Power has been turned off, moving on")
                                    continue
                        elif power_state == "Off":
                            logging.info("Power is off Potash in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def IsPotashTurnedOnBay4(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 4" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "Off":
                            logging.warning("Power is still off Potash in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be on.")
                            logging.info("Pausing 1 min and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "Off":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "Off":
                                    logging.info("Looks like power to Potash is still off. Will check again 1 min")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "On":
                                    logging.info("Power has been turned on, moving on")
                                    continue
                        elif power_state == "On":
                            logging.info("Power is on Potash in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def IsPotashTurnedOnBay1(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 1" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "Off":
                            logging.warning("Power is still off Potash in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be on.")
                            logging.info("Pausing 1 min and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "Off":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "Off":
                                    logging.info("Looks like power to Potash is still off. Will check again 1 min")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "On":
                                    logging.info("Power has been turned on, moving on")
                                    continue
                        elif power_state == "On":
                            logging.info("Power is on Potash in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass


    def IsNitroTurnedOffBay6(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    if ic_name == "{}, interconnect 6" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "On":
                            logging.warning("Power is still on Potash in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be off.")
                            logging.info("Pausing 30 secs and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "On":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "On":
                                    logging.info("Looks like power to Potash is still on. Will check again 30 secs")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "Off":
                                    logging.info("Power has been turned off, moving on")
                                    continue
                        elif power_state == "Off":
                            logging.info("Power is off Potash in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def IsNitroTurnedOffBay3(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    if ic_name == "{}, interconnect 3" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "On":
                            logging.warning("Power is still on Nitro in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be off.")
                            logging.info("Pausing 30 secs and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "On":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "On":
                                    logging.info("Looks like power to Nitro is still on. Will check again 30 secs")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "Off":
                                    logging.info("Power has been turned off, moving on")
                                    continue
                        elif power_state == "Off":
                            logging.info("Power is off Nitro in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def IsNitroTurnedOnBay6(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    if ic_name == "{}, interconnect 6" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "Off":
                            logging.warning("Power is still off Nitro in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be on.")
                            logging.info("Pausing 1 min and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "Off":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "Off":
                                    logging.info("Looks like power to Nitro is still off. Will check again 1 min")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "On":
                                    logging.info("Power has been turned on, moving on")
                                    continue
                        elif power_state == "On":
                            logging.info("Power is on Nitro in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def IsNitroTurnedOnBay3(self, ip, auth, api, enc_name):
        logging.info("Getting Interconnects ")
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name', 'model','enclosureName'])
            for ic in range(0, len(ic_list)):
                ic_name = ic_list[ic]['name']
                power_state = ic_list[ic]['powerState']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    if ic_name == "{}, interconnect 3" .format(name):
                        logging.info("PowerState is: {}" .format(power_state))
                        if power_state == "Off":
                            logging.warning("Power is still off Nitro in {}" .format(ic_name))
                            logging.warning("Ok. I was expecting the power to be on.")
                            logging.info("Pausing 1 min and checking the powerstate again")
                            countdown(30)
                            count = 0 
                            while power_state == "Off":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_list = printDict(get_ic_dict, ['powerState'])
                                power_state = ic_list[ic]['powerState']
                                if power_state == "Off":
                                    logging.info("Looks like power to Nitro is still off. Will check again 1 min")
                                    countdown(30)
                                    count += 1
                                    if count == 5:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif power_state == "On":
                                    logging.info("Power has been turned on, moving on")
                                    continue
                        elif power_state == "On":
                            logging.info("Power is on Nitro in {}" .format(ic_name))
                            logging.info("Ok, that's what it's supposed to be. Moving on.")
                            continue
                        else:
                            pass
                    else:
                        pass
                else:
                    pass

    def CheckPotashState(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_name = ic_list[ic]['name']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    logging.info("The state is: {}" .format(state))
                    if state == "Configured":
                        logging.info("Potash in {} is in Configured state, let's continue" .format(ic_name))
                    elif state == "Monitored":
                        logging.info("Potash in {} is in monitored state" .format(ic_name))
                    elif state == "Configuring":
                        logging.warning("Potash is in configuring state, will check again in 1 min")
                        countdown(60)
                        count = 0
                        while state == "Configuring":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Configuring":
                                logging.info("Potash is still in configuring state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.info("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Potash is in configured state")
                    elif state == "Adding":
                        logging.warning("Potash is in adding state. Pausing 45 secs and will check again.")
                        countdown(60)
                        count = 0
                        while state == "Adding":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Adding":
                                logging.warning("Potash is still in adding state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Potash is in configured state")
                    elif state == "Maintenance":
                        logging.warning("Potash is in Maintenance mode.  This maybe a defect. Will power off/on again")
                        sys.exit(0)
                    else:
                        pass
                else:
                    pass
        return state

    def CheckPotashStateBay2(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_name = ic_list[ic]['name']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 2" .format(name):
                        logging.info("The state is: {}" .format(state))
                        if state == "Configured":
                            logging.info("Potash in {} is in Configured state, let's continue" .format(ic_name))
                        elif state == "Monitored":
                            logging.info("Potash in {} is in monitored state" .format(ic_name))
                        elif state == "Configuring":
                            logging.warning("Potash is in configuring state, will check again in 45 secs")
                            countdown(60)
                            count = 0
                            while state == "Configuring":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_state = printDict(get_ic_dict, ['state'])
                                state = ic_state[ic]['state']
                                if state == "Configuring":
                                    logging.info("Potash is still in configuring state ,Pausing 45 secs and will try again")
                                    countdown(60)
                                    count += 1
                                    if count == 25:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif state == "Configured":
                                    logging.info("Potash is in configured state")
                        elif state == "Adding":
                            logging.warning("Potash is in adding state. Pausing 45 secs and will check again.")
                            countdown(60)
                            count = 0
                            while state == "Adding":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_state = printDict(get_ic_dict, ['state'])
                                state = ic_state[ic]['state']
                                if state == "Adding":
                                    logging.warning("Potash is still in adding state ,Pausing 45 secs and will try again")
                                    countdown(60)
                                    count += 1
                                    if count == 25:
                                        logging.error("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif state == "Configured":
                                    logging.info("Potash is in configured state")
                        elif state == "Maintenance":
                            logging.warning("Potash is in Maintenance mode.  This maybe a defect. Will power off/on again")
                            sys.exit(0)
                        else:
                            pass
                else:
                    pass
        return state
    
    def CheckPotashStateBay5(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_name = ic_list[ic]['name']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 5" .format(name):
                        logging.info("The state is: {}" .format(state))
                        if state == "Configured":
                            logging.info("Potash in {} is in Configured state, let's continue" .format(ic_name))
                        elif state == "Monitored":
                            logging.info("Potash in {} is in monitored state" .format(ic_name))
                        elif state == "Configuring":
                            logging.warning("Potash is in configuring state, will check again in 45 secs")
                            countdown(60)
                            count = 0
                            while state == "Configuring":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_state = printDict(get_ic_dict, ['state'])
                                state = ic_state[ic]['state']
                                if state == "Configuring":
                                    logging.info("Potash is still in configuring state ,Pausing 45 secs and will try again")
                                    countdown(60)
                                    count += 1
                                    if count == 25:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif state == "Configured":
                                    logging.info("Potash is in configured state")
                        elif state == "Adding":
                            logging.warning("Potash is in adding state. Pausing 45 secs and will check again.")
                            countdown(60)
                            count = 0
                            while state == "Adding":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_state = printDict(get_ic_dict, ['state'])
                                state = ic_state[ic]['state']
                                if state == "Adding":
                                    logging.warning("Potash is still in adding state ,Pausing 45 secs and will try again")
                                    countdown(60)
                                    count += 1
                                    if count == 25:
                                        logging.error("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif state == "Configured":
                                    logging.info("Potash is in configured state")
                        elif state == "Maintenance":
                            logging.warning("Potash is in Maintenance mode.  This maybe a defect. Will power off/on again")
                            sys.exit(0)
                        else:
                            pass
                else:
                    pass
        return state
    
    def CheckPotashForErrors(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_model = ic_list[ic]['model']
                ic_name = ic_list[ic]['name']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if state == "AddedWithErrors":
                        logging.error("Potash in {} is in Added with Errors state, quiting script" .format(ic_name))
                        sys.exit(0)
                    elif state == "ConfigError":
                        logging.error("The Potash in {} is in configuration error state.  Exiting script" .format(ic_name))
                        sys.exit(0)
                    elif state == "Configuration error":
                        logging.error("The Potash in {} is in configuration error state.  Exiting script" .format(ic_name))
                        sys.exit(0)
                    elif state == "Absent":
                        logging.error("The Potash in {} is in absent state.  Exiting script" .format(ic_name))
                        sys.exit(0)
                    elif state == "Unmanaged":
                        logging.error("Potash in {} is in Unmanaged state.  Exiting script" .format(ic_name))
                        sys.exit(0)
                    else:
                        logging.info("Potash in {} is in good shape, let's continue" .format(ic_name))

    def CheckPotashForErrorsBay2(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_name = ic_list[ic]['name']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 2" .format(name):
                        if state == "AddedWithErrors":
                            logging.error("Potash in {} is in Added with Errors state, quiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "ConfigError":
                            logging.error("The Potash in {} is in configuration error state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Configuration error":
                            logging.error("The Potash in {} is in configuration error state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Absent":
                            logging.error("The Potash in {} is in absent state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Unmanaged":
                            logging.error("Potash in {} is in Unmanaged state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        else:
                            logging.info("Potash in {} is in good shape, let's continue" .format(ic_name))
    
    def CheckPotashForErrorsBay5(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_name = ic_list[ic]['name']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == "{}, interconnect 5" .format(name):
                        if state == "AddedWithErrors":
                            logging.error("Potash in {} is in Added with Errors state, quiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "ConfigError":
                            logging.error("The Potash in {} is in configuration error state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Configuration error":
                            logging.error("The Potash in {} is in configuration error state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Absent":
                            logging.error("The Potash in {} is in absent state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Unmanaged":
                            logging.error("Potash in {} is in Unmanaged state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        else:
                            logging.info("Potash in {} is in good shape, let's continue" .format(ic_name))
    
    def CheckNitroState(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','powerState','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_name = ic_list[ic]['name']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    logging.info("The state is: {}" .format(state))
                    if state == "Configured":
                        logging.info("Nitro in {} is in Configured state, let's continue" .format(ic_name))
                    elif state == "Monitored":
                        logging.info("Nitro in {} is in monitored state" .format(ic_name))
                    elif state == "Configuring":
                        logging.warning("Nitro is in configuring state, will check again in 1 min")
                        countdown(60)
                        count = 0
                        while state == "Configuring":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Configuring":
                                logging.info("Nitro is still in configuring state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.info("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Nitro is in configured state")
                    elif state == "Adding":
                        logging.warning("Nitro is in adding state. Pausing 45 secs and will check again.")
                        countdown(60)
                        count = 0
                        while state == "Adding":
                            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                            ic_list = printDict(get_ic_dict, ['state'])
                            state = ic_list[ic]['state']
                            if state == "Adding":
                                logging.warning("Nitro is still in adding state ,Pausing 45 secs and will try again")
                                countdown(60)
                                count += 1
                                if count == 25:
                                    logging.error("Something must be wrong, quiting script")
                                    sys.exit(0)
                            elif state == "Configured":
                                logging.info("Nitro is in configured state")
                    elif state == "Maintenance":
                        logging.warning("Nitro is in Maintenance mode.  This maybe a defect. Will power off/on again")
                        sys.exit(0)
                    else:
                        pass
                else:
                    pass
        return state

    def CheckNitroStateBay3(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_name = ic_list[ic]['name']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    if ic_name == "{}, interconnect 3" .format(name):
                        logging.info("The state is: {}" .format(state))
                        if state == "Configured":
                            logging.info("Nitro in {} is in Configured state, let's continue" .format(ic_name))
                        elif state == "Monitored":
                            logging.info("Nitro in {} is in monitored state" .format(ic_name))
                        elif state == "Configuring":
                            logging.warning("Nitro is in configuring state, will check again in 45 secs")
                            countdown(60)
                            count = 0
                            while state == "Configuring":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_state = printDict(get_ic_dict, ['state'])
                                state = ic_state[ic]['state']
                                if state == "Configuring":
                                    logging.info("Nitro is still in configuring state ,Pausing 45 secs and will try again")
                                    countdown(60)
                                    count += 1
                                    if count == 25:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif state == "Configured":
                                    logging.info("Nitro is in configured state")
                        elif state == "Adding":
                            logging.warning("Nitro is in adding state. Pausing 45 secs and will check again.")
                            countdown(60)
                            count = 0
                            while state == "Adding":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_state = printDict(get_ic_dict, ['state'])
                                state = ic_state[ic]['state']
                                if state == "Adding":
                                    logging.warning("Nitro is still in adding state ,Pausing 45 secs and will try again")
                                    countdown(60)
                                    count += 1
                                    if count == 25:
                                        logging.error("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif state == "Configured":
                                    logging.info("Nitro is in configured state")
                        elif state == "Maintenance":
                            logging.warning("Nitro is in Maintenance mode.  This maybe a defect. Will power off/on again")
                            sys.exit(0)
                        else:
                            pass
                else:
                    pass
        return state
    
    def CheckNitroStateBay6(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_name = ic_list[ic]['name']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    if ic_name == "{}, interconnect 6" .format(name):
                        logging.info("The state is: {}" .format(state))
                        if state == "Configured":
                            logging.info("Nitro in {} is in Configured state, let's continue" .format(ic_name))
                        elif state == "Monitored":
                            logging.info("Nitro in {} is in monitored state" .format(ic_name))
                        elif state == "Configuring":
                            logging.warning("Nitro is in configuring state, will check again in 45 secs")
                            countdown(60)
                            count = 0
                            while state == "Configuring":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_state = printDict(get_ic_dict, ['state'])
                                state = ic_state[ic]['state']
                                if state == "Configuring":
                                    logging.info("Nitro is still in configuring state ,Pausing 45 secs and will try again")
                                    countdown(60)
                                    count += 1
                                    if count == 25:
                                        logging.info("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif state == "Configured":
                                    logging.info("Nitro is in configured state")
                        elif state == "Adding":
                            logging.warning("Nitro is in adding state. Pausing 45 secs and will check again.")
                            countdown(60)
                            count = 0
                            while state == "Adding":
                                get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
                                ic_state = printDict(get_ic_dict, ['state'])
                                state = ic_state[ic]['state']
                                if state == "Adding":
                                    logging.warning("Nitro is still in adding state ,Pausing 45 secs and will try again")
                                    countdown(60)
                                    count += 1
                                    if count == 25:
                                        logging.error("Something must be wrong, quiting script")
                                        sys.exit(0)
                                elif state == "Configured":
                                    logging.info("Nitro is in configured state")
                        elif state == "Maintenance":
                            logging.warning("Nitro is in Maintenance mode.  This maybe a defect. Will power off/on again")
                            sys.exit(0)
                        else:
                            pass
                else:
                    logging.info("Enclosure does not contain a Nitro ICM")
        return state
    
    def CheckNitroForErrors(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_model = ic_list[ic]['model']
                ic_name = ic_list[ic]['name']
                if ic_model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    if state == "AddedWithErrors":
                        logging.error("Nitro in {} is in Added with Errors state, quiting script" .format(ic_name))
                        sys.exit(0)
                    elif state == "ConfigError":
                        logging.error("The Nitro in {} is in configuration error state.  Exiting script" .format(ic_name))
                        sys.exit(0)
                    elif state == "Configuration error":
                        logging.error("The Nitro in {} is in configuration error state.  Exiting script" .format(ic_name))
                        sys.exit(0)
                    elif state == "Absent":
                        logging.error("The Nitro in {} is in absent state.  Exiting script" .format(ic_name))
                        sys.exit(0)
                    elif state == "Unmanaged":
                        logging.error("Nitro in {} is in Unmanaged state.  Exiting script" .format(ic_name))
                        sys.exit(0)
                    else:
                        logging.info("Nitro in {} is in good shape, let's continue" .format(ic_name))

    def CheckNitroForErrorsBay3(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_name = ic_list[ic]['name']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    if ic_name == "{}, interconnect 3" .format(name):
                        if state == "AddedWithErrors":
                            logging.error("Nitro in {} is in Added with Errors state, quiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "ConfigError":
                            logging.error("The Nitro in {} is in configuration error state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Configuration error":
                            logging.error("The Nitro in {} is in configuration error state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Absent":
                            logging.error("The Nitro in {} is in absent state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Unmanaged":
                            logging.error("Nitro in {} is in Unmanaged state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        else:
                            logging.info("Nitro in {} is in good shape, let's continue" .format(ic_name))
    
    def CheckNitroForErrorsBay6(self, ip, auth, api, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_list = printDict(get_ic_dict, ['uri','name','model','state','enclosureName'])
            for ic in range(0, len(ic_list)):
                state = ic_list[ic]['state']
                ic_name = ic_list[ic]['name']
                ic_model = ic_list[ic]['model']
                if ic_model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    if ic_name == "{}, interconnect 6" .format(name):
                        if state == "AddedWithErrors":
                            logging.error("Nitro in {} is in Added with Errors state, quiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "ConfigError":
                            logging.error("The Nitro in {} is in configuration error state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Configuration error":
                            logging.error("The Nitro in {} is in configuration error state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Absent":
                            logging.error("The Nitro in {} is in absent state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        elif state == "Unmanaged":
                            logging.error("Nitro in {} is in Unmanaged state.  Exiting script" .format(ic_name))
                            sys.exit(0)
                        else:
                            logging.info("Nitro in {} is in good shape, let's continue" .format(ic_name))






class AddRemoveUplinkSetsLi(object):

    def RemoveUlsBay1FcNetworkLi(self, ip, auth, api, li_uri, enc_uri, uls_bay1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay1_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\" : \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n\"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"3\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY1\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}\r\n" %(li_uri, enc_uri, enc_uri, enc_uri, enc_uri, uls_bay1_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def AddUlsBay1FcNetworkLi(self, ip, auth, api, fc_net_enc1_bay1_uri, li_uri, enc_uri, uls_bay1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay1_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\" : \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[\"%s\"],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n\"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"3\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY1\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}\r\n" %(fc_net_enc1_bay1_uri, li_uri, enc_uri, enc_uri, enc_uri, enc_uri, uls_bay1_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def RemoveUlsBay4FcNetworkLi(self, ip, auth, api, li_uri, enc_uri, uls_bay4_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay4_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\" : \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[ ],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n\"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"3\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY4\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}" %(li_uri, enc_uri, enc_uri, enc_uri, enc_uri, uls_bay4_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)

    def AddUlsBay4FcNetworkLi(self, ip, auth, api, fc_net_enc1_bay4_uri, li_uri, enc_uri, uls_bay4_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay4_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\" : \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[\"%s\"],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n\"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"3\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY4\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}" %(fc_net_enc1_bay4_uri, li_uri, enc_uri, enc_uri, enc_uri, enc_uri, uls_bay4_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class AddRemoveUplinkSetsLig(object):

    def RemoveBay1FcNetworkLig(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, lig_uri, consistency_check):
        #The uri used here is Interconnect Type uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"TRUNK\",\r\n   \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"TRUNK\",\r\n      \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin5\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": true,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80000634B2100000110A00D30A\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F8880177900007CEA0C59\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin5\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, consistency_check, consistency_check, fc_net_enc1_bay1_quri, consistency_check, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
    
    def AddBay1Bay4FcNetworkLig(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, fc_net_enc1_bay4_uri, lig_uri, consistency_check):
        #The uri used here is Interconnect Type uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n    \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin5\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": true,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80000634B2100000110A00D30A\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F8880177900007CEA0C59\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin5\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, consistency_check, fc_net_enc1_bay1_uri, consistency_check, fc_net_enc1_bay1_quri, consistency_check, fc_net_enc1_bay4_uri)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    

    def RemoveBay4FcNetworkLig(self, ip, auth, api, ic_type_uri, fc_net_enc1_bay1_uri, fc_net_enc1_bay1_quri, lig_uri, consistency_check):
        #The uri used here is Interconnect Type uri
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, lig_uri)
        payload = "{\r\n  \"type\": \"logical-interconnect-groupV8\",\r\n  \"name\": \"LIG\",\r\n  \"state\": null,\r\n  \"description\": null,\r\n  \"status\": null,\r\n  \"created\": null,\r\n  \"eTag\": null,\r\n  \"modified\": null,\r\n  \"category\": null,\r\n  \"uri\": null,\r\n  \"interconnectMapTemplate\": {\r\n    \"interconnectMapEntryTemplates\": [\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 1\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      },\r\n      {\r\n        \"logicalLocation\": {\r\n          \"locationEntries\": [\r\n            {\r\n              \"type\": \"Bay\",\r\n              \"relativeValue\": 4\r\n            },\r\n            {\r\n              \"type\": \"Enclosure\",\r\n              \"relativeValue\": -1\r\n            }\r\n          ]\r\n        },\r\n        \"logicalDownlinkUri\": null,\r\n        \"permittedInterconnectTypeUri\": \"%s\",\r\n        \"enclosureIndex\": -1\r\n      }\r\n    ]\r\n  },\r\n  \"uplinkSets\": [\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"TRUNK\",\r\n   \"consistencyChecking\" : \"%s\",\r\n    \"lacpTimer\": null,\r\n      \"networkUris\": [\"%s\"],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [\r\n        \"%s\"\r\n      ],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 21,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 22,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 23,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 1,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": 24,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY1-Q-PORTS\",\r\n      \"mode\": \"Auto\"\r\n    },\r\n    {\r\n      \"networkType\": \"FibreChannel\",\r\n      \"ethernetNetworkType\": \"NotApplicable\",\r\n      \"fcMode\" : \"TRUNK\",\r\n  \"consistencyChecking\" : \"%s\",\r\n   \"lacpTimer\": null,\r\n      \"networkUris\": [],\r\n      \"reachability\": null,\r\n      \"nativeNetworkUri\": null,\r\n      \"primaryPort\": null,\r\n      \"logicalPortConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 13,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 14,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 15,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"logicalLocation\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"relativeValue\": 16,\r\n                \"type\": \"Port\"\r\n              },\r\n              {\r\n                \"relativeValue\": 4,\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"relativeValue\": -1,\r\n                \"type\": \"Enclosure\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n      \"name\": \"BAY4\",\r\n      \"mode\": \"Auto\"\r\n    }\r\n  ],\r\n  \"enclosureType\": \"SY12000\",\r\n  \"enclosureIndexes\": [-1],\r\n  \"interconnectBaySet\": 1,\r\n  \"redundancyType\": \"Redundant\",\r\n  \"internalNetworkUris\": [],\r\n  \"telemetryConfiguration\": {\r\n      \"type\": \"telemetry-configuration\",\r\n      \"sampleInterval\": 6,\r\n      \"sampleCount\": 10,\r\n      \"enableTelemetry\": true,\r\n      \"description\": null,\r\n      \"name\": null,\r\n      \"state\": null,\r\n      \"status\": null,\r\n      \"eTag\": null,\r\n      \"category\": \"telemetry-configuration\",\r\n      \"uri\": null\r\n  },\r\n  \"snmpConfiguration\": {\r\n    \"type\": \"snmp-configuration\",\r\n    \"snmpUsers\": [\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin3\",\r\n        \"userCredentials\": null,\r\n        \"v3AuthProtocol\": \"NA\",\r\n        \"v3PrivacyProtocol\": \"NA\"\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin2\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin\",\r\n        \"v3AuthProtocol\": \"MD5\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin1\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"NA\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin5\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"AES128\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        \"snmpV3UserName\": \"sysadmin4\",\r\n        \"v3AuthProtocol\": \"SHA\",\r\n        \"v3PrivacyProtocol\": \"DES56\",\r\n        \"userCredentials\": [\r\n          {\r\n            \"propertyName\": \"SnmpV3AuthorizationPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          },\r\n          {\r\n            \"propertyName\": \"SnmpV3PrivacyPassword\",\r\n            \"value\": \"password\",\r\n            \"valueFormat\": \"SecuritySensitive\",\r\n            \"valueType\": \"String\"\r\n          }\r\n        ]\r\n      }\r\n    ],\r\n    \"readCommunity\": \"public\",\r\n    \"systemContact\": \"Patrick Shapard\",\r\n    \"v3Enabled\": true,\r\n    \"trapDestinations\": [\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.13.8\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"fc00::2002\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin1\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80000634B2100000110A00D30A\",\r\n        \"trapDestination\": \"15.186.13.9\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin2\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": \"0x80001F8880177900007CEA0C59\",\r\n        \"trapDestination\": \"15.186.13.10\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": true,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin3\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin4\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"engineId\": null,\r\n        \"trapDestination\": \"192.168.0.254\",\r\n        \"fcTrapCategories\": [],\r\n        \"trapFormat\": \"SNMPv3\",\r\n        \"communityString\": \"\",\r\n        \"inform\": false,\r\n        \"enetTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapSeverities\": [],\r\n        \"userName\": \"sysadmin5\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"127.0.0.1\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"15.186.21.149\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"255.255.255.255\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"fc00::2001\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      },\r\n      {\r\n        \"trapFormat\": \"SNMPv1\",\r\n        \"trapSeverities\": [],\r\n        \"enetTrapCategories\": [],\r\n        \"fcTrapCategories\": [],\r\n        \"vcmTrapCategories\": [],\r\n        \"trapDestination\": \"10.10.10.10\",\r\n        \"communityString\": \"public\",\r\n        \"port\": 162\r\n      }\r\n    ],\r\n    \"snmpAccess\": null,\r\n    \"enabled\": true,\r\n    \"name\": null,\r\n    \"state\": null,\r\n    \"description\": null,\r\n    \"status\": null,\r\n    \"created\": null,\r\n    \"eTag\": null,\r\n    \"modified\": null,\r\n    \"category\": \"snmp-configuration\",\r\n    \"uri\": null\r\n  },\r\n  \"qosConfiguration\": null\r\n}\r\n" %(ic_type_uri, ic_type_uri, consistency_check, fc_net_enc1_bay1_uri, consistency_check, fc_net_enc1_bay1_quri, consistency_check)
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    


class AddRemoveUplinkSetsLiME(object):

    def AddUlsBay1FcNetworkLiEnc1(self, ip, auth, api, fc_net_enc1_bay1_uri, li_uri1, enc1_uri, uls_bay1_enc1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay1_enc1_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[\"%s\"],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n  \"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"3\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY1-EAGLE28\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}" %(fc_net_enc1_bay1_uri, li_uri1, enc1_uri, enc1_uri,enc1_uri, uls_bay1_enc1_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def AddUlsBay4FcNetworkLiEnc1(self, ip, auth, api, fc_net_enc1_bay4_uri, li_uri1, enc1_uri, uls_bay4_enc1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay4_enc1_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[\"%s\"],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n  \"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY4-EAGLE28\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}" %(fc_net_enc1_bay4_uri, li_uri1, enc1_uri, enc1_uri, uls_bay4_enc1_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def AddUlsBay1FcNetworkLiEnc2(self, ip, auth, api, fc_net_enc2_bay1_uri, li_uri2, enc2_uri, uls_bay1_enc2_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay1_enc2_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[\"%s\"],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n  \"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY1-EAGLE29\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}\r\n" %(fc_net_enc2_bay1_uri, li_uri2, enc2_uri,enc2_uri, uls_bay1_enc2_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def AddUlsBay4FcNetworkLiEnc2(self, ip, auth, api, fc_net_enc2_bay4_uri, li_uri2, enc2_uri, uls_bay4_enc2_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay4_enc2_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[\"%s\"],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n  \"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY4-EAGLE29\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}" %(fc_net_enc2_bay4_uri, li_uri2, enc2_uri, enc2_uri, uls_bay4_enc2_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def RemoveUlsBay1FcNetworkLiEnc1(self, ip, auth, api, li_uri1, enc1_uri, uls_bay1_enc1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay1_enc1_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n  \"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"3\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY1-EAGLE28\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}" %(li_uri1, enc1_uri, enc1_uri, enc1_uri, uls_bay1_enc1_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def RemoveUlsBay4FcNetworkLiEnc1(self, ip, auth, api, li_uri1, enc1_uri, uls_bay4_enc1_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay4_enc1_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n  \"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY4-EAGLE28\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}" %(li_uri1, enc1_uri, enc1_uri, uls_bay4_enc1_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def RemoveUlsBay1FcNetworkLiEnc2(self, ip, auth, api, li_uri2, enc2_uri, uls_bay1_enc2_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay1_enc2_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n  \"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY1-EAGLE29\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}\r\n" %(li_uri2, enc2_uri, enc2_uri, uls_bay1_enc2_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def RemoveUlsBay4FcNetworkLiEnc2(self, ip, auth, api, li_uri2, enc2_uri, uls_bay4_enc2_uri):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s%s" %(ip, uls_bay4_enc2_uri)
        payload = "{\r\n  \"primaryPortLocation\": null,\r\n  \"nativeNetworkUri\": null,\r\n  \"fcMode\": \"TRUNK\",\r\n  \"networkUris\": [],\r\n  \"fcNetworkUris\":[],\r\n  \"fcoeNetworkUris\": [],\r\n  \"reachability\": \"Reachable\",\r\n  \"logicalInterconnectUri\": \"%s\",\r\n  \"manualLoginRedistributionState\": \"Supported\",\r\n  \"connectionMode\": \"Auto\",\r\n  \"portConfigInfos\": [\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"1\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        },\r\n        {\r\n          \"desiredSpeed\": \"Auto\",\r\n          \"location\": {\r\n            \"locationEntries\": [\r\n              {\r\n                \"value\": \"%s\",\r\n                \"type\": \"Enclosure\"\r\n              },\r\n              {\r\n                \"value\": \"4\",\r\n                \"type\": \"Bay\"\r\n              },\r\n              {\r\n                \"value\": \"2\",\r\n                \"type\": \"Port\"\r\n              }\r\n            ]\r\n          }\r\n        }\r\n      ],\r\n  \"networkType\": \"FibreChannel\",\r\n  \"ethernetNetworkType\": \"NotApplicable\",\r\n  \"description\": null,\r\n  \"name\": \"BAY4-EAGLE29\",\r\n  \"category\": \"logical-interconnects\",\r\n  \"eTag\": null,\r\n  \"uri\": \"%s\"\r\n}" %(li_uri2, enc2_uri, enc2_uri, uls_bay4_enc2_uri)
        headers = {
            'x-api-version': api,
            'auth': auth,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        logging.debug(payload)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class GetCarbonPassword(object):

    def GetPasswordForCarbonBay1ME(self, ip, auth, api, user, cim_pw):
        command = ['chmod 777 *', './writeMECanmic.sh 1 AQ==','./readMECanmic.sh 1 191']
        enc_instance = Enclosures()
        enc_dict = enc_instance.GetEnc(ip, auth, api)
        enc_list = printDict(enc_dict, ['serialNumber','name'])
        get_icm_ip = GetCarbonIp()
        pw_result = []
        for cmd in command:
            result = sshclient(ip, user, cim_pw, cmd)
            if cmd == "./readMECanmic.sh 1 191":
                for i, value in enumerate(enc_list):
                    enc_sn = enc_list[i]['serialNumber']
                    enc_name = enc_list[i]['name']
                    enc_bay_ip = get_icm_ip.GetIPCarbonOneME(ip, api, auth, enc_name)
                    logging.info("Looking for the password")
                    pw = result.find("{} ICM Bay 1 Block 191 is: " .format(enc_sn))
                    passwd_bay = (result[pw+35:pw+51])
                    pw_result.append((enc_sn, passwd_bay, enc_bay_ip))
        return pw_result
    
    def GetPasswordForCarbonBay4ME(self, ip, auth, api, user, cim_pw):
        command = [ './writeMECanmic.sh 4 AQ==','./readMECanmic.sh 4 191']
        enc_instance = Enclosures()
        enc_dict = enc_instance.GetEnc(ip, auth, api)
        enc_list = printDict(enc_dict, ['serialNumber','name'])
        get_icm_ip = GetCarbonIp()
        pw_result = []
        for cmd in command:
            result = sshclient(ip, user, cim_pw, cmd)
            if cmd == "./readMECanmic.sh 4 191":
                for i, value in enumerate(enc_list):
                    enc_sn = enc_list[i]['serialNumber']
                    enc_name = enc_list[i]['name']
                    enc_bay_ip = get_icm_ip.GetIPCarbonFourME(ip, api, auth, enc_name)
                    logging.info("Looking for the password")
                    pw = result.find("{} ICM Bay 4 Block 191 is: " .format(enc_sn))
                    passwd_bay = (result[pw+35:pw+51])
                    pw_result.append((enc_sn, passwd_bay, enc_bay_ip))
        return pw_result
    
    def GetPasswordForCarbonBay2ME(self, ip, auth, api, user, cim_pw):
        command = ['chmod 777 *', './writeMECanmic.sh 2 AQ==','./readMECanmic.sh 2 191']
        enc_instance = Enclosures()
        enc_dict = enc_instance.GetEnc(ip, auth, api)
        enc_list = printDict(enc_dict, ['serialNumber','name'])
        get_icm_ip = GetCarbonIp()
        pw_result = []
        for cmd in command:
            result = sshclient(ip, user, cim_pw, cmd)
            if cmd == "./readMECanmic.sh 2 191":
                for i, value in enumerate(enc_list):
                    enc_sn = enc_list[i]['serialNumber']
                    enc_name = enc_list[i]['name']
                    enc_bay_ip = get_icm_ip.GetIPCarbonTwoME(ip, api, auth, enc_name)
                    logging.info("Looking for the password")
                    pw = result.find("{} ICM Bay 2 Block 191 is: " .format(enc_sn))
                    passwd_bay = (result[pw+35:pw+51])
                    pw_result.append((enc_sn, passwd_bay, enc_bay_ip))
        return pw_result
    
    def GetPasswordForCarbonBay5ME(self, ip, auth, api, user, cim_pw):
        command = ['chmod 777 *', './writeMECanmic.sh 5 AQ==','./readMECanmic.sh 5 191']
        enc_instance = Enclosures()
        enc_dict = enc_instance.GetEnc(ip, auth, api)
        enc_list = printDict(enc_dict, ['serialNumber','name'])
        get_icm_ip = GetCarbonIp()
        pw_result = []
        for cmd in command:
            result = sshclient(ip, user, cim_pw, cmd)
            if cmd == "./readMECanmic.sh 5 191":
                for i, value in enumerate(enc_list):
                    enc_sn = enc_list[i]['serialNumber']
                    enc_name = enc_list[i]['name']
                    enc_bay_ip = get_icm_ip.GetIPCarbonFiveME(ip, api, auth, enc_name)
                    logging.info("Looking for the password")
                    pw = result.find("{} ICM Bay 5 Block 191 is: " .format(enc_sn))
                    passwd_bay = (result[pw+35:pw+51])
                    pw_result.append((enc_sn, passwd_bay, enc_bay_ip))
        return pw_result


class RemoteSyslog(object):

    def EnableRemoteSyslogIPv6(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/remote-syslog" %ip
        payload = "{\r\n \"type\": \"RemoteSyslog\",\r\n \"sendTestLog\": false,\r\n \"remoteSyslogPort\": \"514\",\r\n  \"remoteSyslogDestination\": \"2001::1001\",\r\n \"enabled\": true\r\n }"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
    
    def DisableRemoteSyslogIPv6(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/remote-syslog" %ip
        payload = "{\r\n \"type\": \"RemoteSyslog\",\r\n \"sendTestLog\": false,\r\n \"remoteSyslogPort\": \"514\",\r\n  \"remoteSyslogDestination\": \"2001::1001\",\r\n \"enabled\": false\r\n }"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
    
    def EnableRemoteSyslogIPv4(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/remote-syslog" %ip
        payload = "{\r\n \"type\": \"RemoteSyslog\",\r\n \"sendTestLog\": false,\r\n \"remoteSyslogPort\": \"514\",\r\n \"remoteSyslogDestination\": \"172.16.31.34\",\r\n \"enabled\": true\r\n }"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
    
    def DisableRemoteSyslogIPv4(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/remote-syslog" %ip
        payload = "{\r\n \"type\": \"RemoteSyslog\",\r\n \"sendTestLog\": false,\r\n \"remoteSyslogPort\": \"514\",\r\n \"remoteSyslogDestination\": \"172.16.31.34\",\r\n \"enabled\": false\r\n }"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
    
    def GetRemoteSyslogStatus(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/remote-syslog" %ip
        headers = {
            'auth': auth,
            'x-api-version': api
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))
    
    def IsRemoteSyslogDisabled(self, ip, auth, api):
        Status = RemoteSyslog()
        RemoteSyslogList = Status.GetRemoteSyslogStatus(ip, auth, api)
        status = RemoteSyslogList['enabled']
        if status == "False":
            logging.debug("Remote Syslog is disabled")
        elif status == "True":
            logging.debug("Remote syslog is enabled")
        else:
            pass
        return status
    
    def IsRemoteSyslogEnabled(self, ip, auth, api):
        Status = RemoteSyslog()
        RemoteSyslogList = Status.GetRemoteSyslogStatus(ip, auth, api)
        status = RemoteSyslogList['enabled']
        if status == "True":
            logging.debug("Remote Syslog is enabled\n")
        elif status == "False":
            logging.debug("Remote syslog is disabled\n")
        else:
            pass
        return status


class PowerOffOnServers(object):

    def power_off_servers(self, ip, auth, api):
        logging.info("Getting Server HW and Profiles")
        srvr_power_check_inst = CheckServerPower()
        server_hw_profiles_inst = Servers()
        server_hw_list = server_hw_profiles_inst.ServerHW(ip, auth, api)
        server_hw_name_uri_model = printDict(server_hw_list, ['name', 'uri', 'model'])
        logging.info("Getting Server Powerstate")
        srvr_hw_power_state = printDict(server_hw_list, ['powerState'])
        
        logging.info("starting Server HW list loop to check server power state")
        for i, value in enumerate(server_hw_name_uri_model):
            srvr_hw_uri = server_hw_name_uri_model[i]['uri']
            srvr_hw_name = server_hw_name_uri_model[i]['name']
            srvr_hw_model = server_hw_name_uri_model[i]['model']
            power_state = srvr_hw_power_state[i]['powerState']
            if power_state == "On":
                logging.info("The server power is on. Powering off Server:  {} in {} " .format(srvr_hw_model, srvr_hw_name))
                srvr_power_check_inst.PowerOffServer(ip, auth, api, srvr_hw_uri)
                logging.info("pausing 20 secs to power off server")
                countdown(20)
            else:
                logging.info("Server {} in {} power is {}" .format(srvr_hw_model, srvr_hw_name, power_state))
    
    def power_on_servers(self, ip, auth, api):
        logging.info("Getting Server HW and Profiles")
        srvr_power_check_inst = CheckServerPower()
        server_hw_profiles_inst = Servers()
        server_hw_list = server_hw_profiles_inst.ServerHW(ip, auth, api)
        server_hw_name_uri_model = printDict(server_hw_list, ['name', 'uri', 'model'])
        logging.info("Getting Server Powerstate")
        srvr_hw_power_state = printDict(server_hw_list, ['powerState'])
        
        for i, value in enumerate(server_hw_name_uri_model):
            srvr_hw_uri = server_hw_name_uri_model[i]['uri']
            srvr_hw_name = server_hw_name_uri_model[i]['name']
            srvr_hw_model = server_hw_name_uri_model[i]['model']
            power_state = srvr_hw_power_state[i]['powerState']
            #logging.info("Server %s power is %s" %(srvr_hw_model, power_state))
            if power_state == "Off":
                logging.info( "The server power is off. Powering on Server:  {} in {} " .format(srvr_hw_model, srvr_hw_name))
                srvr_power_check_inst.PowerOnServer(ip, auth, api, srvr_hw_uri)
                countdown(30)
            elif power_state == "PoweringOn":
                logging.info("The server is powering on.  will wait 30 secs and check again")
                countdown(30)
                count = 0
                while True:
                    srvr_hw_power_state = printDict(server_hw_list, ['powerState'])
                    power_state = srvr_hw_power_state[i]['powerState']
                    if power_state == "PoweringOn":
                        logging.info("Server is still powering on, pausing 45 secs and will try again")
                        countdown(60)
                        count += 1
                        if count == 5:
                            logging.info("Something must be wrong, quiting script")
                            sys.exit(0)
                    else:
                        logging.info("Server is finally powered on, moving on")
                        break
            else:
                logging.info( "The server power is on. Moving on.")

    def check_server_power(self, ip, auth, api):
        logging.info("Getting Server HW and Profiles")
        server_hw_profiles_inst = Servers()
        server_hw_list = server_hw_profiles_inst.ServerHW(ip, auth, api)
        server_hw_name_uri_model = printDict(server_hw_list, ['name', 'uri', 'model'])
        logging.info("Getting Server Powerstate")
        srvr_hw_power_state = printDict(server_hw_list, ['powerState'])
        
        for i, value in enumerate(server_hw_name_uri_model):
            srvr_hw_name = server_hw_name_uri_model[i]['name']
            srvr_hw_model = server_hw_name_uri_model[i]['model']
            power_state = srvr_hw_power_state[i]['powerState']
            #logging.info("Server %s power is %s" %(srvr_hw_model, power_state))
            if power_state == "On":
                logging.info( "The server power is on:  {} in {} " .format(srvr_hw_model, srvr_hw_name))
            elif power_state == "PoweringOn":
                logging.info("The server is powering on.  will wait 30 secs and check again")
                countdown(30)
                count = 0
                while True:
                    srvr_hw_power_state = printDict(server_hw_list, ['powerState'])
                    power_state = srvr_hw_power_state[i]['powerState']
                    if power_state == "PoweringOn":
                        logging.info("Server is still powering on, pausing 45 secs and will try again")
                        countdown(60)
                        count += 1
                        if count == 5:
                            logging.info("Something must be wrong, quiting script")
                            sys.exit(0)
                    else:
                        logging.info("Server is finally powered on, moving on")
                        continue
            else:
                pass


class GetFLOGI(object):

    def GetFLOGIE21ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip,user,tor_pw,cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsBay1 = int(FLOGI_LIST[12])
            return NumLoginsBay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")

    def GetFLOGIE21ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsBay4 = int(FLOGI_LIST[30])
            return NumLoginsBay4
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE21Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE21ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs on Bay1"
        if FLOGIBay1 == 4:
            logging.info ("Number of FLOGIs on bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE21Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE21ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs on Bay4"
        if FLOGIBay4 == 4:
            logging.info ("Number of FLOGIs on bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE28ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE28Bay1 = int(FLOGI_LIST[12])
            return NumLoginsE28Bay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE28Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE28ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle28 Bay1"
        if FLOGIBay1 == 3:
            logging.info ("Number of FLOGIs E28 on bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE28ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE28Bay4 = int(FLOGI_LIST[30])
            NumLoginsE28Bay4_2 = int(FLOGI_LIST[46])
            NumLoginsE28Bay4Both = NumLoginsE28Bay4 + NumLoginsE28Bay4_2
            return NumLoginsE28Bay4Both
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE28Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE28ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle28 Bay4"
        if FLOGIBay4 == 3:
            logging.info ("Number of FLOGIs E28 on bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE29ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE29Bay1 = int(FLOGI_LIST[62])
            return NumLoginsE29Bay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE29Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE29ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle29 Bay1"
        if FLOGIBay1 == 3:
            logging.info ("Number of FLOGIs E29 on bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE29ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE29Bay4 = int(FLOGI_LIST[80])
            return NumLoginsE29Bay4
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE29Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE29ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle29 Bay4"
        if FLOGIBay4 == 3:
            logging.info ("Number of FLOGIs on E29 bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)

    def GetFLOGIE13ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE13Bay1 = int(FLOGI_LIST[12])
            return NumLoginsE13Bay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE13Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE13ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle13 Bay1"
        if FLOGIBay1 == 3:
            logging.info ("Number of FLOGIs E13 on bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE13ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE13Bay4 = int(FLOGI_LIST[29])
            NumLoginsE13Bay4_2 = int(FLOGI_LIST[44])
            NumLoginsE13Bay4Both = NumLoginsE13Bay4 + NumLoginsE13Bay4_2
            return NumLoginsE13Bay4Both
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE13Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE13ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle13 Bay4"
        if FLOGIBay4 == 3:
            logging.info ("Number of FLOGIs E13 on bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE14ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE14Bay1 = int(FLOGI_LIST[59])
            return NumLoginsE14Bay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE14Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE14ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle14 Bay1"
        if FLOGIBay1 == 3:
            logging.info ("Number of FLOGIs E14 on bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE14ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE14Bay4 = int(FLOGI_LIST[76])
            return NumLoginsE14Bay4
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE14Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE14ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle14 Bay4"
        if FLOGIBay4 == 3:
            logging.info ("Number of FLOGIs on E14 bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE137ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsBay1 = int(FLOGI_LIST[12])
            return NumLoginsBay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")

    def GetFLOGIE137ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsBay4 = int(FLOGI_LIST[30])
            return NumLoginsBay4
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")

    def GetFLOGIE137Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE137ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs on Bay1"
        if FLOGIBay1 == 3:
            logging.info ("Number of FLOGIs on E137 bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)

    def GetFLOGIE137Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE137ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs on Bay4"
        if FLOGIBay4 == 3:
            logging.info ("Number of FLOGIs on E137 bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)

    def GetFLOGIE136ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsBay1 = int(FLOGI_LIST[12])
            return NumLoginsBay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")

    def GetFLOGIE136ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsBay4 = int(FLOGI_LIST[30])
            return NumLoginsBay4
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")

    def GetFLOGIE136Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE136ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs on Bay1"
        if FLOGIBay1 == 2:
            logging.info ("Number of FLOGIs on E136 bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)

    def GetFLOGIE136Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE136ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs on Bay4"
        if FLOGIBay4 == 2:
            logging.info ("Number of FLOGIs on E136 bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE155ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsBay1 = int(FLOGI_LIST[12])
            return NumLoginsBay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE155ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsBay4 = int(FLOGI_LIST[30])
            return NumLoginsBay4
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE155Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE155ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs on Bay1"
        if FLOGIBay1 == 4:
            logging.info ("Number of FLOGIs on bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE155Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE155ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs on Bay4"
        if FLOGIBay4 == 4:
            logging.info ("Number of FLOGIs on bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    def GetFLOGIE3ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE3Bay1 = int(FLOGI_LIST[12])
            return NumLoginsE3Bay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE3Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE3ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle3 Bay1"
        if FLOGIBay1 == 5:
            logging.info ("Number of FLOGIs Eagle3 on bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)

    def GetFLOGIE3ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE3Bay4 = int(FLOGI_LIST[130])
            NumLoginsE3Bay4_2 = int(FLOGI_LIST[146])
            NumLoginsE3Bay4Both = NumLoginsE3Bay4 + NumLoginsE3Bay4_2
            return NumLoginsE3Bay4Both
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE3Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE3ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle3 Bay4"
        if FLOGIBay4 == 5:
            logging.info ("Number of FLOGIs Eagle3 on bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)

    def GetFLOGIE4ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE4Bay1 = int(FLOGI_LIST[30])
            return NumLoginsE4Bay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE4Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE4ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle4 Bay1"
        if FLOGIBay1 == 5:
            logging.info ("Number of FLOGIs Eagle4 on bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)


    def GetFLOGIE4ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE4Bay4 = int(FLOGI_LIST[66])
            NumLoginsE4Bay4_2 = int(FLOGI_LIST[82])
            NumLoginsE4Bay4Both = NumLoginsE4Bay4 + NumLoginsE4Bay4_2
            return NumLoginsE4Bay4Both
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE4Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE4ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle4 Bay4"
        if FLOGIBay4 == 5:
            logging.info ("Number of FLOGIs Eagle4 on bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)

    def GetFLOGIE5ToRBay1(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE5Bay1 = int(FLOGI_LIST[48])
            return NumLoginsE5Bay1
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE5Bay1Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay1 = num_of_flogi.GetFLOGIE5ToRBay1(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle5 Bay1"
        if FLOGIBay1 == 5:
            logging.info ("Number of FLOGIs Eagle5 on bay1 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay1))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)

    def GetFLOGIE5ToRBay4(self, ip, user, tor_pw):
        cmd = 'switchshow | grep NPIV'
        result = sshclient(ip, user, tor_pw, cmd)
        FLOGI_LIST = result.split()
        try:
            NumLoginsE5Bay4 = int(FLOGI_LIST[98])
            NumLoginsE5Bay4_2 = int(FLOGI_LIST[114])
            NumLoginsE5Bay4Both = NumLoginsE5Bay4 + NumLoginsE5Bay4_2
            return NumLoginsE5Bay4Both
        except IndexError:
            logging.error("Could not retrieve the number of FLOGIs")
        except ValueError:
            logging.error("There was a problem getting the FLOGI")
    
    def GetFLOGIE5Bay4Func(self, tor_ip, user, tor_pw):
        num_of_flogi = GetFLOGI()
        FLOGIBay4 = num_of_flogi.GetFLOGIE5ToRBay4(tor_ip, user, tor_pw)
        tc = "The number of FLOGIs Eagle5 Bay4"
        if FLOGIBay4 == 5:
            logging.info ("Number of FLOGIs Eagle5 on bay4 are ok\n")
            result = "Pass"
            PassOrFail(result, tc)
        else:
            logging.error("%s is %s" %(tc,FLOGIBay4))
            result = "Fail"
            PassOrFail(result, tc)
            sys.exit(0)
    
    
    def get_flogi_enclosure(self, ip, tor_ip, tor_un, tor_pw):
        num_of_flogi = GetFLOGI()
        if ip == "15.186.9.21":
            num_of_flogi.GetFLOGIE21Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE21Bay4Func(tor_ip, tor_un, tor_pw)
        elif ip == "15.186.9.28":
            num_of_flogi.GetFLOGIE28Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE28Bay4Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE29Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE29Bay4Func(tor_ip, tor_un, tor_pw)
        elif ip == "15.186.9.13":
            num_of_flogi.GetFLOGIE13Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE13Bay4Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE14Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE14Bay4Func(tor_ip, tor_un, tor_pw)
        elif ip == "15.186.9.3":
            tor_un = 'admin'
            tor_pw = 'hpvse123'
            num_of_flogi.GetFLOGIE3Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE3Bay4Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE4Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE4Bay4Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE5Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE5Bay4Func(tor_ip, tor_un, tor_pw)
        elif ip == "15.186.9.155":
            tor_pw = 'hpvse123'
            num_of_flogi.GetFLOGIE155Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE155Bay4Func(tor_ip, tor_un, tor_pw)
        elif ip == "15.186.9.40":
            tor_pw = 'hpvse123'
            num_of_flogi.GetFLOGIE155Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE155Bay4Func(tor_ip, tor_un, tor_pw)
        elif tor_ip == '15.186.4.43':
            tor_un = 'admin'
            tor_pw = 'password'
            logging.info("Getting the number of FLOGIs")
            #num_of_flogi.GetFLOGIE137Bay1Func(tor_ip, tor_un, tor_pw)
            #num_of_flogi.GetFLOGIE137Bay4Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE136Bay1Func(tor_ip, tor_un, tor_pw)
            num_of_flogi.GetFLOGIE136Bay4Func(tor_ip, tor_un, tor_pw)
        else:
            pass


class Certificates(object):

    def create_csr(self, ip, auth, api, icm_uri, OU):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://{}{}/certificates/https/certificaterequest" .format(ip, icm_uri)
        payload = "{\r\n    \"type\": \"CertificateDtoV3\",\r\n    \"organization\" : \"Hpe corp\",\r\n    \"organizationalUnit\" : \"%s\",\r\n    \"locality\" : \"austin\",\r\n    \"state\" : \"texas\",\r\n    \"country\" : \"us\",\r\n    \"commonName\" : \"VCFC51CG751006D\"\r\n}" %OU
        headers = {
            'Content-Type': "application/json",
            'x-api-version': api,
            'auth': auth
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)    
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
    
    def retrieve_csr(self, ip, auth, icm_uri):
        logging.debug("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://{}{}/certificates/https" .format(ip, icm_uri)
        headers = {
            'x-api-version': api,
            'auth': auth
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def write_csr_to_file(self, csr):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        f = open( 'bay4_csr.pem', 'w' )
        f.write(csr)
        f.close()
    
    def copy_csr_file_snmp_server(self, snmp_server_ip, user, passwd):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(snmp_server_ip, username=user, password=passwd)
        ftp = ssh.open_sftp()
        ftp.put('bay4_csr.pem', '/root/ca/intermediate/csr/bay4_csr.pem')
        ftp.close()
    
    def combine_ca_chain_carbon_signed_cert(self, snmp_server_ip, user, passwd):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        cmd = 'cat ca/intermediate/certs/ca-chain.cert.pem ca/intermediate/certs/Bay4_signed_cert.pem > ca/intermediate/certs/bay4_signed_cert_with_chain.pem'
        sshclient(snmp_server_ip, user, passwd, cmd)
        cmd = 'cat ca/intermediate/certs/bay4_signed_cert_with_chain.pem'
        signed_cert = sshclient(snmp_server_ip, user, passwd, cmd)
        return str(signed_cert)
    
    def delete_signed_cert_file(self, snmp_server_ip, user, passwd):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        commands = ('echo "y" | rm ca/intermediate/certs/Bay4_signed_cert.pem', 'echo "y" | rm ca/intermediate/certs/bay4_signed_cert_with_chain.pem', 'echo "y" | rm ca/intermediate/csr/bay4_csr.pem')
        for cmd in (commands):
            sshclient(snmp_server_ip, user, passwd, cmd)
    
    def delete_create_index_file(self, snmp_server_ip, user, passwd):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        commands = ('echo "y" | rm ca/intermediate/index.txt', 'touch ca/intermediate/index.txt')
        for cmd in (commands):
            sshclient(snmp_server_ip, user, passwd, cmd)
    
    def sign_bay4_cert(self, snmp_server_ip, user, passwd, cnf_file):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(snmp_server_ip, username = user, password= passwd, port=22)
        chan = ssh.invoke_shell()
        countdown(5)
        buff = ''
        logging.info("Sending 1st command to sign certificate ")
        chan.send('openssl ca -config ca/intermediate/{} -extensions server_cert -days 1825 -startdate 20190901000000Z -notext -md sha256 -in ca/intermediate/csr/bay4_csr.pem -out ca/intermediate/certs/Bay4_signed_cert.pem\n' .format(cnf_file))
        countdown(3)
        while "Enter pass phrase for /root/ca/intermediate/private/intermediate.key.pem:" not in buff:
            if chan.recv_ready():
                resp = str(chan.recv(9999))
                logging.debug("Response is \n{} " .format(resp))
                logging.debug("Buffer is \n{} " .format(buff))
                buff += resp
        chan.send('hpvse123\n')
        logging.info("Entering pass phrase")
        countdown(2)
        while "Sign the certificate? [y/n]:" not in buff:
            if chan.recv_ready():
                resp = str(chan.recv(9999))
                logging.debug("Response is \n{} " .format(resp))
                logging.debug("Buffer is \n{} " .format(buff))
                buff += resp
        chan.send('y\n')
        logging.info("Answering yes to commit certificate signed request")
        countdown(2)
        while "1 out of 1 certificate requests certified, commit? [y/n]" not in buff:
            if chan.recv_ready():
                resp = str(chan.recv(9999))
                logging.debug("Response is \n{} " .format(resp))
                logging.debug("Buffer is \n{} " .format(buff))
                buff += resp
        chan.send('y\n')
        ssh.close()
    
    def upload_signed_certificate(self, ip, auth, api, icm_uri, bay4_signed_cert_dump):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://{}{}/certificates/https" .format(ip, icm_uri)
        payload = "{\r\n\"type\": \"CertificateDataV2\",\r\n\"base64Data\" : %s }" %(bay4_signed_cert_dump)
        headers = {
            'Content-Type': "application/json",
            'x-api-version': api,
            'auth': auth
            }
    
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)    
        response = requests.request("PUT", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)


class Licenses(object):

    def upload_32Gb_license(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/licenses" %ip
        payload = "{\"key\":\"QB2C D9MA P9PQ LHUY VTB5 HG7X Y9JL KMPL B89H MZVU GRUU 9HWE JHTG TNTE CMRG HPMR 4G5U A5G9 EUG2 9CQ9 HKDU LWWP ZQT6 UPJE 6SQC 43QG V2TH AZRY P2ZV RHMQ F4BH BGWB AZS8 2F9G LL4U R4WA V886 VC93 HQT5 6CAD 3WJY YLJ6 CCUG 2EQ7\\\"Synergy 32Gb FC Upgrade License E-LTU\\\"\"\r\n,\r\n\"type\":\"LicenseV500\"\r\n}"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def upload_8Gb_FC_license(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/licenses" %ip
        payload = "{\"key\":\r\n\"YBKA D9MA H9P9 8HX3 V2B4 HWWV Y9JL KMPL B89H MZVU GR4S JHWE J2SP XNZ8 CMRG HPMR UFVU A5K9 MWHC 9K4K HKDU LWWP JQLG UPJ4 AQYC Q7NV M658 AGVQ QZWD HY9B N4ZF BGWB EWV7 2EUZ NK64 R4WA 5886 FCYX YKC5 G3AD QVKT NLY8 EZUN HENY\\\"24R2-02192-002 T1111A FC_License J4E8IAMANEON\\\"\",\r\n\r\n\"type\":\"LicenseV500\"\r\n}\r\n\r\n\r\n"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def upload_8Gb_FC_2nd_license(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/licenses" %ip
        payload = "{\"key\":\"9B2G D9MA H9PA CHVZ V2B4 HWWV Y9JL KMPL B89H MZVU 6RMS 9HWE 92R6 3FZ3 CMRG HPMR MFVU A5K9 MHGK EKX9 HKDU LWWP JQLG UPJ4 AQYC Q7NV M658 AGVQ QZWD HY9B N4ZF BGWB EWV7 2EUZ NK64 R4WA 5886 FCYX YKC5 G3AD QVKT NLY8 EZUN HENY \\\"24R2-02192-002 T1111A FC_License J4E8IAMANEON\\\"\",\r\n\r\n\"type\":\"LicenseV500\"\r\n}\r\n\r\n\r\n\r\n"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def upload_50Gb_Downlink_license(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/licenses" %ip
        payload = "{\"key\": \"QBSE D9MA P9PY LHUZ VTB5 HG77 Y9JL KMPL B89H MZVU 8RUU 9HWE 9YSH XNY6 CMRG HPMR 4H5U A589 EUG2 9CQ9 HKDU LWWP ZQT6 UPJE 6SQC 43QG V2TH AZRY P2ZV RHMQ F4BH BGWB AZS8 2F9G LL4U R4WA V886 VC93 HQT5 6CAD 3WJY YLJ6 CCUG 2EQ7 \\\"Synergy 50Gb Downlink Upgrade License E-LTU\\\"\",\r\n\r\n\"type\":\"LicenseV500\"\r\n}\r\n\r\n\r\n"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def upload_ILO_16_Seat_license(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/licenses" %ip
        payload = "{\"key\":\"YAQA AQAA H9PQ 8HV3 V7B5 HWWB Y9JL KMPL 6SSB NGBQ DXAU 2CSM GHTG L762 BSR6 EW5M KJVT D5KM EFVW DT5J 7FMP 73KG SPS9 YG66 Z99R MWSN 6Z84 46XT WZJL HH4Q L975 SNJT ZWWC AADW NJ79 CEJC 5S86 FC4X EKSZ X4CP XZLU FMXS FKS6 KKCE 4NMU FGN5 F8CG Z2HX FRJ6 EPM2 2SJV VTFG LS8T XU4E \\\"EVAL-HPOV-NFR1 HPOV-NFR1 HPE_OneView_16_Seat_NFR 7T36AEJG7JJ9\\\"_3QP35-DW8TL-622KW-7S678-CW4RM\",\r\n\r\n\"type\":\"LicenseV500\"\r\n}"
        headers = {
            'auth': auth,
            'x-api-version': api,
            'content-type': "application/json"
            }
        logging.debug("payload: %s" % payload)
        logging.debug("url: %s" % url)
        response = requests.request("POST", url, data=payload, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)
        return(json.loads(response.text))
    
    def GetOneviewLicenses(self, ip, auth, api):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        url = "https://%s/rest/licenses" %ip
        headers = {
            'auth': auth,
            'x-api-version': api,
            }
        response = requests.request("GET", url, headers=headers, verify=False)
        ValidateResponse(response.status_code, response.reason, response.text)
        logging.debug(response.text)    
        return(json.loads(response.text))


class GetCarbonPortStatus(object):

    def GetCarbonUpLinkPortSpeed32Gb(self, ip, api, auth):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnect(ip, auth, api)
        ic_name_ports_model_list = printDict(ic_dict, ['model', 'ports', 'name'])
        ic_port_list = []
        logging.info("Getting a list of uplink ports that are online")
        for i, value in enumerate(ic_name_ports_model_list):
            port_list = ic_name_ports_model_list[i]['ports']
            ic_model = ic_name_ports_model_list[i]['model']
            if ic_model == "Virtual Connect SE 32Gb FC Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "SFP-FC":
                        if ic_port_name == "1":
                            if ic_port_speed == "Speed32G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "2":
                            if ic_port_speed == "Speed32G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "3":
                            if ic_port_speed == "Speed32G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "4":
                            if ic_port_speed == "Speed32G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
        return ic_port_list
    
    def GetCarbonUpLinkPortSpeed16Gb(self, ip, api, auth):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnect(ip, auth, api)
        ic_name_ports_model_list = printDict(ic_dict, ['model', 'ports', 'name'])
        ic_port_list = []
        logging.info("Getting a list of uplink ports that are online")
        for i, value in enumerate(ic_name_ports_model_list):
            port_list = ic_name_ports_model_list[i]['ports']
            ic_model = ic_name_ports_model_list[i]['model']
            if ic_model == "Virtual Connect SE 16Gb FC Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q1:1":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:2":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:3":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:4":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q1:1":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:2":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:3":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:4":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "Virtual Connect SE 32Gb FC Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "SFP-FC":
                        if ic_port_name == "1":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "2":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "3":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "4":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "SFP-FC":
                        if ic_port_name == "Q1:1":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:2":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:3":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:4":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
        return ic_port_list
    
    def GetCarbonUpLinkPortSpeed8Gb(self, ip, api, auth):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnect(ip, auth, api)
        ic_name_ports_model_list = printDict(ic_dict, ['model', 'ports', 'name'])
        ic_port_list = []
        logging.info("Getting a list of uplink ports that are online")
        for i, value in enumerate(ic_name_ports_model_list):
            port_list = ic_name_ports_model_list[i]['ports']
            ic_model = ic_name_ports_model_list[i]['model']
            if ic_model == "Virtual Connect SE 16Gb FC Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q1:1":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:2":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:3":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:4":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q1:1":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:2":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:3":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:4":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "Virtual Connect SE 32Gb FC Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "SFP-FC":
                        if ic_port_name == "1":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "2":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "3":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "4":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "SFP-FC":
                        if ic_port_name == "Q1:1":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:2":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:3":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:4":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
        return ic_port_list
    
    def GetCarbonUpLinkPortSpeed4Gb(self, ip, api, auth):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnect(ip, auth, api)
        ic_name_ports_model_list = printDict(ic_dict, ['model', 'ports', 'name'])
        ic_port_list = []
        logging.info("Getting a list of uplink ports that are online")
        for i, value in enumerate(ic_name_ports_model_list):
            port_list = ic_name_ports_model_list[i]['ports']
            ic_model = ic_name_ports_model_list[i]['model']
            if ic_model == "Virtual Connect SE 16Gb FC Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q1:1":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:2":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:3":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:4":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q1:1":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:2":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:3":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:4":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q1:1":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:2":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:3":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q1:4":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
        return ic_port_list

    def GetCarbonUpLinkQ3PortSpeed16Gb(self, ip, api, auth):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnect(ip, auth, api)
        ic_name_ports_model_list = printDict(ic_dict, ['model', 'ports', 'name'])
        ic_port_list = []
        logging.info("Getting a list of uplink ports that are online")
        for i, value in enumerate(ic_name_ports_model_list):
            port_list = ic_name_ports_model_list[i]['ports']
            ic_model = ic_name_ports_model_list[i]['model']
            if ic_model == "Virtual Connect SE 16Gb FC Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q3:1":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:2":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:3":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:4":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q3:1":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:2":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:3":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:4":
                            if ic_port_speed == "Speed16G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
        return ic_port_list
    
    def GetCarbonUpLinkQ3PortSpeed8Gb(self, ip, api, auth):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnect(ip, auth, api)
        ic_name_ports_model_list = printDict(ic_dict, ['model', 'ports', 'name'])
        ic_port_list = []
        logging.info("Getting a list of uplink ports that are online")
        for i, value in enumerate(ic_name_ports_model_list):
            port_list = ic_name_ports_model_list[i]['ports']
            ic_model = ic_name_ports_model_list[i]['model']
            if ic_model == "Virtual Connect SE 16Gb FC Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q3:1":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:2":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:3":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:4":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q3:1":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:2":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:3":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:4":
                            if ic_port_speed == "Speed8G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
        return ic_port_list
    
    def GetCarbonUpLinkQ3PortSpeed4Gb(self, ip, api, auth):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnect(ip, auth, api)
        ic_name_ports_model_list = printDict(ic_dict, ['model', 'ports', 'name'])
        ic_port_list = []
        logging.info("Getting a list of uplink ports that are online")
        for i, value in enumerate(ic_name_ports_model_list):
            port_list = ic_name_ports_model_list[i]['ports']
            ic_model = ic_name_ports_model_list[i]['model']
            if ic_model == "Virtual Connect SE 16Gb FC Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q3:1":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:2":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:3":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:4":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
            elif ic_model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                for p, value in enumerate(port_list):
                    ic_port_status_reason = port_list[p]['portStatusReason']
                    ic_port_name = port_list[p]['portName']
                    ic_port_type = port_list[p]['portType']
                    ic_port_speed = port_list[p]['operationalSpeed']
                    ic_type_connectore = port_list[p]['connectorType']
                    if ic_port_status_reason == "LoggedIn" and ic_port_type == "Uplink" and ic_type_connectore == "QSFP+FC":
                        if ic_port_name == "Q3:1":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:2":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:3":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
                        elif ic_port_name == "Q3:4":
                            if ic_port_speed == "Speed4G":
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Pass"
                                PassOrFail(result, tc)
                            else:
                                tc = "Port {} is set at {}" .format(ic_port_name, ic_port_speed)
                                result = "Fail"
                                PassOrFail(result, tc)
        return ic_port_list


class ConfigureTOR(object):

    def DisableTrunkingOnE21TORPort4_7(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 4-7', 'porttrunkarea --disable 4-7', 'portcfgtrunkport 4 0','portcfgtrunkport 5 0','portcfgtrunkport 6 0','portcfgtrunkport 7 0', 'portenable 4-7']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 4-7")
        countdown(5)

    def EnableTrunkingOnE21TORPort4_7(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 4-7', 'portcfgtrunkport 4 1','portcfgtrunkport 5 1','portcfgtrunkport 6 1','portcfgtrunkport 7 1', 'porttrunkarea --enable 4-7 -index 4', 'portenable 4-7']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 4-7")
        countdown(5)

    def DisableTrunkingOnE21TORPort8_11(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 8-11', 'porttrunkarea --disable 8-11', 'portcfgtrunkport 8 0','portcfgtrunkport 9 0','portcfgtrunkport 10 0','portcfgtrunkport 11 0', 'portenable 8-11']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 8-11")
        countdown(5)

    def DisableTrunkingOnE136TORPort32_35(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 32-35', 'porttrunkarea --disable 32-35', 'portcfgtrunkport 32 0','portcfgtrunkport 33 0','portcfgtrunkport 34 0','portcfgtrunkport 35 0', 'portenable 32-35']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 32-35")
        countdown(5)

    def EnableTrunkingOnE136TORPort32_35(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 32-35', 'portcfgtrunkport 32 1','portcfgtrunkport 33 1','portcfgtrunkport 34 1','portcfgtrunkport 35 1', 'porttrunkarea --enable 32-35 -index 32', 'portenable 32-35']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 32-35")
        countdown(5)

    def DisableTrunkingOnE136TORPort1_4(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 1-4', 'porttrunkarea --disable 1-4', 'portcfgtrunkport 1 0','portcfgtrunkport 2 0','portcfgtrunkport 3 0','portcfgtrunkport 4 0', 'portenable 1-4']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 1-4")
        countdown(5)

    def EnableTrunkingOnE136TORPort1_4(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 1-4', 'portcfgtrunkport 1 1','portcfgtrunkport 2 1','portcfgtrunkport 3 1','portcfgtrunkport 4 1', 'porttrunkarea --enable 1-4 -index 1', 'portenable 1-4']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 1-4")
        countdown(5)

    def DisableTrunkingOnE136TORPort16_17(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 16-17', 'porttrunkarea --disable 16-17', 'portcfgtrunkport 16 0','portcfgtrunkport 17 0', 'portenable 16-17']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 16-17")
        countdown(5)

    def EnableTrunkingOnE136TORPort16_17(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 16-17', 'portcfgtrunkport 16 1','portcfgtrunkport 17 1', 'porttrunkarea --enable 16-17 -index 16', 'portenable 16-17']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 16-17")
        countdown(5)

    def DisableTrunkingOnE136TORPort27_28(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 27-28', 'porttrunkarea --disable 27-28', 'portcfgtrunkport 27 0','portcfgtrunkport 28 0', 'portenable 27-28']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 27-28")
        countdown(5)

    def EnableTrunkingOnE136TORPort27_28(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 27-28', 'portcfgtrunkport 27 1','portcfgtrunkport 28 1', 'porttrunkarea --enable 27-28 -index 27', 'portenable 27-28']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 27-28")
        countdown(5)

    def EnableTrunkingOnE21TORPort8_11(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 8-11', 'portcfgtrunkport 8 1','portcfgtrunkport 9 1','portcfgtrunkport 10 1','portcfgtrunkport 11 1', 'porttrunkarea --enable 8-11 -index 8', 'portenable 8-11']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 8-11")
        countdown(5)

    def DisableTrunkingOnE21TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 16-19', 'porttrunkarea --disable 16-19', 'portcfgtrunkport 16 0','portcfgtrunkport 17 0','portcfgtrunkport 18 0','portcfgtrunkport 19 0', 'portenable 16-19']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 16-19")
        countdown(5)

    def EnableTrunkingOnE21TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 16-19', 'portcfgtrunkport 16 1','portcfgtrunkport 17 1','portcfgtrunkport 18 1','portcfgtrunkport 19 1', 'porttrunkarea --enable 16-19 -index 16', 'portenable 16-19']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 3 secs to disable ports 16-19")
        countdown(5)

    def DisableTrunkingOnE28TORPort32_33(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 32-33', 'porttrunkarea --disable 32-33', 'portcfgtrunkport 32 0','portcfgtrunkport 33 0', 'portenable 32-33']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 32-33")
        countdown(5)

    def EnableTrunkingOnE28TORPort32_33(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 32-33', 'portcfgtrunkport 32 1','portcfgtrunkport 33 1', 'porttrunkarea --enable 32-33 -index 32', 'portenable 32-33']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 32-33")
        countdown(5)

    def DisableTrunkingOnE28TORPort8_10(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 8-10', 'porttrunkarea --disable 8-10', 'portcfgtrunkport 8 0','portcfgtrunkport 9 0','portcfgtrunkport 10 0', 'portenable 8-10']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 8-10")
        countdown(5)

    def EnableTrunkingOnE28TORPort8_10(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 8-10', 'portcfgtrunkport 8 1','portcfgtrunkport 9 1','portcfgtrunkport 10 1', 'porttrunkarea --enable 8-10 -index 8', 'portenable 8-10']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 3 secs to disable ports 8-10")
        countdown(5)

    def DisableTrunkingOnE28TORPort24_27(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 24-27', 'porttrunkarea --disable 24-27', 'portcfgtrunkport 24 0','portcfgtrunkport 25 0','portcfgtrunkport 26 0','portcfgtrunkport 27 0', 'portenable 24-27']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 24-27")
        countdown(5)

    def EnableTrunkingOnE28TORPort24_27(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 24-27', 'portcfgtrunkport 24 1','portcfgtrunkport 25 1','portcfgtrunkport 26 1','portcfgtrunkport 27 1', 'porttrunkarea --enable 24-27 -index 24', 'portenable 24-27']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 24-27")
        countdown(5)

    def DisableTrunkingOnE28TORPort40_41(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 40-41', 'porttrunkarea --disable 40-41', 'portcfgtrunkport 40 0','portcfgtrunkport 41 0', 'portenable 40-41']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 40-41")
        countdown(5)

    def EnableTrunkingOnE28TORPort40_41(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 40-41', 'portcfgtrunkport 40 1','portcfgtrunkport 41 1', 'porttrunkarea --enable 40-41 -index 40', 'portenable 40-41']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 40-41")
        countdown(5)

    def DisableTrunkingOnE13TORPort20_21(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 20-21', 'porttrunkarea --disable 20-21', 'portcfgtrunkport 20 0','portcfgtrunkport 21 0', 'portenable 20-21']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 20-21")
        countdown(5)

    def EnableTrunkingOnE13TORPort20_21(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 20-21', 'portcfgtrunkport 20 1','portcfgtrunkport 21 1', 'porttrunkarea --enable 20-21 -index 20', 'portenable 20-21']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 20-21")
        countdown(5)

    def DisableTrunkingOnE13TORPort8_10(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 8-10', 'porttrunkarea --disable 8-10', 'portcfgtrunkport 8 0','portcfgtrunkport 9 0','portcfgtrunkport 10 0', 'portenable 8-10']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 8-10")
        countdown(5)

    def EnableTrunkingOnE13TORPort8_10(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 8-10', 'portcfgtrunkport 8 1','portcfgtrunkport 9 1','portcfgtrunkport 10 1', 'porttrunkarea --enable 8-10 -index 8', 'portenable 8-10']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 3 secs to disable ports 8-10")
        countdown(5)

    def DisableTrunkingOnE13TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 16-19', 'porttrunkarea --disable 16-19', 'portcfgtrunkport 16 0','portcfgtrunkport 25 0','portcfgtrunkport 26 0','portcfgtrunkport 19 0', 'portenable 16-19']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 16-19")
        countdown(5)

    def EnableTrunkingOnE13TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 16-19', 'portcfgtrunkport 16 1','portcfgtrunkport 25 1','portcfgtrunkport 26 1','portcfgtrunkport 19 1', 'porttrunkarea --enable 16-19 -index 16', 'portenable 16-19']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 16-19")
        countdown(5)

    def DisableTrunkingOnE13TORPort22_23(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 22-23', 'porttrunkarea --disable 22-23', 'portcfgtrunkport 22 0','portcfgtrunkport 23 0', 'portenable 22-23']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 22-23")
        countdown(5)

    def EnableTrunkingOnE13TORPort22_23(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 22-23', 'portcfgtrunkport 22 1','portcfgtrunkport 23 1', 'porttrunkarea --enable 22-23 -index 22', 'portenable 22-23']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)
        logging.info("pausing 5 secs to configure ports 22-23")
        countdown(5)

    def ConfigPortSpeed4GbE21TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ('portdisable 16-19', 'portcfgspeed 16 4','portcfgspeed 17 4','portcfgspeed 18 4','portcfgspeed 19 4', 'portenable 16-19')
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed8GbE21TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ('portdisable 16-19', 'portcfgspeed 16 8','portcfgspeed 17 8','portcfgspeed 18 8','portcfgspeed 19 8', 'portenable 16-19')
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed16GbE21TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ('portdisable 16-19', 'portcfgspeed 16 16','portcfgspeed 17 16','portcfgspeed 18 16','portcfgspeed 19 16', 'portenable 16-19')
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeedAutobE21TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ('portdisable 16-19', 'portcfgspeed 16 0','portcfgspeed 17 0','portcfgspeed 18 0','portcfgspeed 19 0', 'portenable 16-19')
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed32GbE155TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ('portdisable 16-19', 'portcfgspeed 16 32','portcfgspeed 17 32','portcfgspeed 18 32','portcfgspeed 19 32', 'portenable 16-19')
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed8GbE21TORPort8_11(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ('portdisable 8-11', 'portcfgspeed 8 8','portcfgspeed 9 8','portcfgspeed 10 8','portcfgspeed 11 8', 'portenable 8-11')
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed16GbE21TORPort8_11(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ('portdisable 8-11', 'portcfgspeed 8 16','portcfgspeed 9 16','portcfgspeed 10 16','portcfgspeed 11 16', 'portenable 8-11')
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeedAutobE21TORPort8_11(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ('portdisable 8-11', 'portcfgspeed 8 0','portcfgspeed 9 0','portcfgspeed 10 0','portcfgspeed 11 0', 'portenable 8-11')
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed32GbE155TORPort8_11(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ('portdisable 8-11', 'portcfgspeed 8 32','portcfgspeed 9 32','portcfgspeed 10 32','portcfgspeed 11 32', 'portenable 8-11')
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeedAutoE28TORPort24_27(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 24-27', 'portcfgspeed 24 0','portcfgspeed 25 0','portcfgspeed 26 0','portcfgspeed 27 0', 'portenable 24-27']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed4GbE28TORPort24_27(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 24-27', 'portcfgspeed 24 4','portcfgspeed 25 4','portcfgspeed 26 4','portcfgspeed 27 4', 'portenable 24-27']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed8GbE28TORPort24_27(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 24-27', 'portcfgspeed 24 8','portcfgspeed 25 8','portcfgspeed 26 8','portcfgspeed 27 8', 'portenable 24-27']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed16GbE28TORPort24_27(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 24-27', 'portcfgspeed 24 16','portcfgspeed 25 16','portcfgspeed 26 16','portcfgspeed 27 16', 'portenable 24-27']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeedAutoE13TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 16-19', 'portcfgspeed 16 0','portcfgspeed 17 0','portcfgspeed 18 0','portcfgspeed 19 0', 'portenable 16-19']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed4GbE13TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 16-19', 'portcfgspeed 16 4','portcfgspeed 17 4','portcfgspeed 18 4','portcfgspeed 19 4', 'portenable 16-19']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed8GbE13TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 16-19', 'portcfgspeed 16 8','portcfgspeed 17 8','portcfgspeed 18 8','portcfgspeed 19 8', 'portenable 16-19']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def ConfigPortSpeed16GbE13TORPort16_19(self, ip, user, tor_pw):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        command = ['portdisable 16-19', 'portcfgspeed 16 16','portcfgspeed 17 16','portcfgspeed 18 16','portcfgspeed 19 16', 'portenable 16-19']
        for cmd in command:
            sshclient(ip, user, tor_pw, cmd)

    def PersistenDisablePortsTor(self, tor_ip, tor_un, tor_pw, port_list):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        for ports in port_list:
            logging.info("Disabling ports {}" .format(ports))
            cmd = ('portcfgpersistentdisable {}' .format(ports))
            sshclient(tor_ip, tor_un, tor_pw, cmd)

    def PersistenEnablePortsTor(self, tor_ip, tor_un, tor_pw, port_list):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        for ports in port_list:
            logging.info("Enabling ports {}" .format(ports))
            cmd = ('portcfgpersistentenable {}' .format(ports))
            sshclient(tor_ip, tor_un, tor_pw, cmd)


class InstallNewSynergyImages(object):

    def InstallNewDDImageNew(self, ip, user, cim_pw, dd_image_url, ov_image):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ip, username = user, password= cim_pw, port=22)
        chan = ssh.invoke_shell()
        countdown(5)
        buff = ''
        while "~]# " not in buff:
            if chan.recv_ready():
                resp = str(chan.recv(9999))
                buff += resp
        chan.send('/ci/etc/usb-reimage/developer_usb_reimage.sh -u {0} -I -f {1}\r' .format(dd_image_url, ov_image))
        logging.info("Sending Install DD image command")
        countdown(7200)
        ssh.close()
    
    def DockerInstallDDimage_without_logmodification(self, ip, user, cim_pw, dd_image_url, ov_image, yaml_file):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ip, username = user, password= cim_pw, port=22)
        chan = ssh.invoke_shell()
        logging.info("docker run --rm --network host -v /root/crm/{2}/:/client_mnt cloudops-registry.vse.rdlabs.hpecorp.net/cloudops-images/ovreimage/ovreimage:3.20211207.452032 --url {0}{1} --ignore-net-warning |tee /root/crm/{2}/crm-deploy.log\r" .format(dd_image_url, ov_image, yaml_file))
        countdown(5)
        buff = ''
        while "~]# " not in buff:
            if chan.recv_ready():
                resp = str(chan.recv(9999))
                buff += resp
        chan.send('docker run --rm --network host -v /root/crm/{2}/:/client_mnt cloudops-registry.vse.rdlabs.hpecorp.net/cloudops-images/ovreimage/ovreimage:3.20211207.452032 --url {0}{1} --ignore-net-warning |tee /root/crm/{2}/crm-deploy.log\r' .format(dd_image_url, ov_image, yaml_file))
        logging.info("Sending Docker Install DD image command")
        countdown(8400)
        ssh.close()
    
    def DockerInstallDDimage(self, ip, user, cim_pw, dd_image_url, ov_image, yaml_file):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        TimeStamp = time.strftime("%Y%m%d_%H%M%S")
        logfile = (TimeStamp + '_crm-deploy.log')
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(ip, username = user, password= cim_pw, port=22)
        chan = ssh.invoke_shell()
        logging.info("docker run --rm --network host -v /root/crm/{2}/:/client_mnt cloudops-registry.vse.rdlabs.hpecorp.net/cloudops-images/ovreimage/ovreimage:3.20211207.452032 --url {0}{1} --ignore-net-warning |tee /root/crm/{2}/{3}\r" .format(dd_image_url, ov_image, yaml_file, logfile))
        countdown(5)
        buff = ''
        while "~]# " not in buff:
            if chan.recv_ready():
                resp = str(chan.recv(9999))
                buff += resp
        chan.send('docker run --rm --network host -v /root/crm/{2}/:/client_mnt cloudops-registry.vse.rdlabs.hpecorp.net/cloudops-images/ovreimage/ovreimage:3.20211207.452032 --url {0}{1} --ignore-net-warning |tee /root/crm/{2}/{3}\r' .format(dd_image_url, ov_image, yaml_file, logfile))
        logging.info("Sending Docker Install DD image command")
        countdown(8400)
        ssh.close()


class GetCarbonIp(object):

    def GetIPPotashME(self, ip, api, auth, enc_name):
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_name_prodname_ip_list = printDict(ic_dict, ['ipAddressList', 'productName', 'name'])
        for i, value in enumerate(ic_name_prodname_ip_list):
            ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
            ic_prod_name = ic_name_prodname_ip_list[i]['productName']
            if ic_prod_name == "Virtual Connect SE 40Gb F8 Module for Synergy":
                for ip, value in enumerate(ic_ip_list):
                    ic_ip_type = ic_ip_list[ip]['ipAddressType']
                    if ic_ip_type == "Ipv6LinkLocal":
                        ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                    else:
                        pass
        try:
            return ic_ip_addr_one
        except UnboundLocalError:
            logging.info("ipv6 address does not exist in potash")
    
    def GetIPNitroME(self, ip, api, auth, enc_name):
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_name_prodname_ip_list = printDict(ic_dict, ['ipAddressList', 'productName', 'name'])
        for i, value in enumerate(ic_name_prodname_ip_list):
            ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
            ic_prod_name = ic_name_prodname_ip_list[i]['productName']
            if ic_prod_name == "Virtual Connect SE 100Gb F32 Module for Synergy":
                for ip, value in enumerate(ic_ip_list):
                    ic_ip_type = ic_ip_list[ip]['ipAddressType']
                    if ic_ip_type == "Ipv6LinkLocal":
                        ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                    else:
                        pass
        try:
            return ic_ip_addr_one
        except UnboundLocalError:
            logging.info("ipv6 address does not exist in nitro")

    def GetIPTypePotash(self, ip, api, auth, enc_name, icm_location):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_name_prodname_ip_list = printDict(get_ic_dict, ['ipAddressList', 'productName', 'name'])
            #logging.info("Getting the ip address for the Potash\n")
            for i, value in enumerate(ic_name_prodname_ip_list):
                ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
                ic_prod_name = ic_name_prodname_ip_list[i]['productName']
                ic_name = ic_name_prodname_ip_list[i]['name']
                if ic_prod_name == "Virtual Connect SE 40Gb F8 Module for Synergy":
                    if ic_name == icm_location:
                        for ip, value in enumerate(ic_ip_list):
                            ic_ip_type = ic_ip_list[ip]['ipAddressType']
                            if ic_ip_type == "Ipv4Dhcp":
                                logging.info("IP type is {}" .format(ic_ip_type))
                                return ic_ip_type
                            elif ic_ip_type == "Ipv4":
                                logging.info("IP type is {}" .format(ic_ip_type))
                                return ic_ip_type
                            elif ic_ip_type == "Ipv4Static":
                                logging.info("IP type is {}" .format(ic_ip_type))
                                return ic_ip_type

    def GetIPTypeNitro(self, ip, api, auth, enc_name, icm_location):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        ic_inst = Interconnects()
        for name in enc_name:
            get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
            ic_name_prodname_ip_list = printDict(get_ic_dict, ['ipAddressList', 'productName', 'name'])
            #logging.info("Getting the ip address for the Nitro\n")
            for i, value in enumerate(ic_name_prodname_ip_list):
                ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
                ic_prod_name = ic_name_prodname_ip_list[i]['productName']
                ic_name = ic_name_prodname_ip_list[i]['name']
                if ic_prod_name == "Virtual Connect SE 100Gb F32 Module for Synergy":
                    if ic_name == icm_location:
                        for ip, value in enumerate(ic_ip_list):
                            ic_ip_type = ic_ip_list[ip]['ipAddressType']
                            if ic_ip_type == "Ipv4Dhcp":
                                logging.info("IP type is {}" .format(ic_ip_type))
                                return ic_ip_type
                            elif ic_ip_type == "Ipv4":
                                logging.info("IP type is {}" .format(ic_ip_type))
                                return ic_ip_type
                            elif ic_ip_type == "Ipv4Static":
                                logging.info("IP type is {}" .format(ic_ip_type))
                                return ic_ip_type

    def GetIPCarbonFourME(self, ip, api, auth, enc_name):
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_name_prodname_ip_list = printDict(ic_dict, ['ipAddressList', 'productName', 'name'])
        for i, value in enumerate(ic_name_prodname_ip_list):
            ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
            ic_prod_name = ic_name_prodname_ip_list[i]['productName']
            ic_name = ic_name_prodname_ip_list[i]['name']
            if ic_prod_name == "Virtual Connect SE 16Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 4" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                if ic_name == "{}, interconnect 4" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                if ic_name == "{}, interconnect 4" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == 'Virtual Connect SE 32Gb FC Module for Synergy':
                if ic_name == "{}, interconnect 4" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_four = ic_ip_list[ip]['ipAddress']
        try:
            return ic_ip_addr_four
        except UnboundLocalError:
            logging.info("ip address in carbon bay4 does not exist")
    
    def GetIPCarbonOneME(self, ip, api, auth, enc_name):
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_name_prodname_ip_list = printDict(ic_dict, ['ipAddressList', 'productName', 'name'])
        for i, value in enumerate(ic_name_prodname_ip_list):
            ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
            ic_prod_name = ic_name_prodname_ip_list[i]['productName']
            ic_name = ic_name_prodname_ip_list[i]['name']
            if ic_prod_name == "Virtual Connect SE 16Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 1" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                if ic_name == "{}, interconnect 1" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                if ic_name == "{}, interconnect 1" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "Virtual Connect SE 32Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 1" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_one = ic_ip_list[ip]['ipAddress']
        try:
            return ic_ip_addr_one
        except UnboundLocalError:
            logging.info("ip address in carbon bay1 does not exist")
    
    def GetIPCarbonFiveME(self, ip, api, auth, enc_name):
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_name_prodname_ip_list = printDict(ic_dict, ['ipAddressList', 'productName', 'name'])
        for i, value in enumerate(ic_name_prodname_ip_list):
            ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
            ic_prod_name = ic_name_prodname_ip_list[i]['productName']
            ic_name = ic_name_prodname_ip_list[i]['name']
            if ic_prod_name == "Virtual Connect SE 16Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 5" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                if ic_name == "{}, interconnect 5" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "Virtual Connect SE 32Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 5" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                if ic_name == "{}, interconnect 5" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_five = ic_ip_list[ip]['ipAddress']
        try:
            return ic_ip_addr_five
        except UnboundLocalError:
            logging.info("ip address in carbon bay5 does not exist")
    
    def GetIPCarbonTwoME(self, ip, api, auth, enc_name):
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_name_prodname_ip_list = printDict(ic_dict, ['ipAddressList', 'productName', 'name'])
        for i, value in enumerate(ic_name_prodname_ip_list):
            ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
            ic_prod_name = ic_name_prodname_ip_list[i]['productName']
            ic_name = ic_name_prodname_ip_list[i]['name']
            if ic_prod_name == "Virtual Connect SE 16Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 2" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                if ic_name == "{}, interconnect 2" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "Virtual Connect SE 32Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 2" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
            elif ic_prod_name == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                if ic_name == "{}, interconnect 2" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "Ipv4Static":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
                        elif ic_ip_type == "None":
                            ic_ip_addr_two = ic_ip_list[ip]['ipAddress']
        try:
            return ic_ip_addr_two
        except UnboundLocalError:
            logging.info("ip address in carbon bay2 does not exist")
    
    def GetIPTypeCarbonFourME(self, ip, api, auth, enc_name):
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_name_prodname_ip_list = printDict(ic_dict, ['ipAddressList', 'productName', 'name'])
    
        #logging.info("Getting the ip address for the Carbon\n")
        for i, value in enumerate(ic_name_prodname_ip_list):
            ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
            ic_prod_name = ic_name_prodname_ip_list[i]['productName']
            ic_name = ic_name_prodname_ip_list[i]['name']
            if ic_prod_name == "Virtual Connect SE 16Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 4" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                if ic_name == "{}, interconnect 4" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                if ic_name == "{}, interconnect 4" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "Virtual Connect SE 32Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 4" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
    
    def GetIPTypeCarbonOneME(self, ip, api, auth, enc_name):
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_name_prodname_ip_list = printDict(ic_dict, ['ipAddressList', 'productName', 'name'])
    
        #logging.info("Getting the ip address for the Carbon\n")
        for i, value in enumerate(ic_name_prodname_ip_list):
            ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
            ic_prod_name = ic_name_prodname_ip_list[i]['productName']
            ic_name = ic_name_prodname_ip_list[i]['name']
            if ic_prod_name == "Virtual Connect SE 16Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 1" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                if ic_name == "{}, interconnect 1" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                if ic_name == "{}, interconnect 1" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "Virtual Connect SE 32Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 1" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
    
    def GetIPTypeCarbonFiveME(self, ip, api, auth, enc_name):
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_name_prodname_ip_list = printDict(ic_dict, ['ipAddressList', 'productName', 'name'])
    
        #logging.info("Getting the ip address for the Carbon\n")
        for i, value in enumerate(ic_name_prodname_ip_list):
            ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
            ic_prod_name = ic_name_prodname_ip_list[i]['productName']
            ic_name = ic_name_prodname_ip_list[i]['name']
            if ic_prod_name == "Virtual Connect SE 16Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 5" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                if ic_name == "{}, interconnect 5" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "Virtual Connect SE 32Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 5" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                if ic_name == "{}, interconnect 5" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type

    def GetIPTypeCarbonTwoME(self, ip, api, auth, enc_name):
        interconnect_instance = Interconnects()
        ic_dict = interconnect_instance.GetInterconnectMultiEnc(ip, auth, api, enc_name)
        ic_name_prodname_ip_list = printDict(ic_dict, ['ipAddressList', 'productName', 'name'])
    
        #logging.info("Getting the ip address for the Carbon\n")
        for i, value in enumerate(ic_name_prodname_ip_list):
            ic_ip_list = ic_name_prodname_ip_list[i]['ipAddressList']
            ic_prod_name = ic_name_prodname_ip_list[i]['productName']
            ic_name = ic_name_prodname_ip_list[i]['name']
            if ic_prod_name == "Virtual Connect SE 16Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 2" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                if ic_name == "{}, interconnect 2" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "Virtual Connect SE 32Gb FC Module for Synergy":
                if ic_name == "{}, interconnect 2" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
            elif ic_prod_name == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                if ic_name == "{}, interconnect 2" .format(enc_name):
                    for ip, value in enumerate(ic_ip_list):
                        ic_ip_type = ic_ip_list[ip]['ipAddressType']
                        if ic_ip_type == "Ipv4Dhcp":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type
                        elif ic_ip_type == "Ipv4Static":
                            logging.info("IP type is {}" .format(ic_ip_type))
                            return ic_ip_type


class GetCarbonAddressType(object):

    def GetCarbonIPAddressType(self, ip, auth, api, addr_type, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting Enclosures ")
        enc_instance = Enclosures()
        enc_dict = enc_instance.GetEnc(ip, auth, api)
        enc_name_list = printDict(enc_dict, ['name'])
        for name in enc_name:
            if addr_type == "static":
                logging.info("Getting the ip type of carbons")
                tc = "Carbon in bay1 has static ip IPv4 address"
                carbon_ip_addr_type_instance = GetCarbonIp()
                carbon_bay1_ip_type = carbon_ip_addr_type_instance.GetIPTypeCarbonOneME(ip, api, auth, name)
                if carbon_bay1_ip_type == "Ipv4Static":
                    result = "Pass"
                    PassOrFail(result, tc)
                elif carbon_bay1_ip_type == "Ipv4Dhcp":
                    result = "Fail"
                    PassOrFail(result, tc)
                elif carbon_bay1_ip_type == "None":
                    result = "Fail"
                    PassOrFail(result, tc)
                
                tc = "Carbon in bay4 has static ip IPv4 address"
                carbon_bay4_ip_type = carbon_ip_addr_type_instance.GetIPTypeCarbonFourME(ip, api, auth, name)
                if carbon_bay4_ip_type == "Ipv4Static":
                    result = "Pass"
                    PassOrFail(result, tc)
                elif carbon_bay4_ip_type == "Ipv4Dhcp":
                    result = "Fail"
                    PassOrFail(result, tc)
                elif carbon_bay1_ip_type == "None":
                    result = "Fail"
                    PassOrFail(result, tc)
            
            elif addr_type == "dhcp":
                logging.info("Getting the ip type of carbons")
                tc = "Carbon in bay1 has dhcp ip IPv4 address"
                carbon_ip_addr_type_instance = GetCarbonIp()
                carbon_bay1_ip_type = carbon_ip_addr_type_instance.GetIPTypeCarbonOneME(ip, api, auth, name)
                if carbon_bay1_ip_type == "Ipv4Dhcp":
                    result = "Pass"
                    PassOrFail(result, tc)
                elif carbon_bay1_ip_type == "Ipv4Static":
                    result = "Fail"
                    PassOrFail(result, tc)
                elif carbon_bay1_ip_type == "None":
                    result = "Fail"
                    PassOrFail(result, tc)
                
                tc = "Carbon in bay4 has dhcp ip IPv4 address"
                carbon_bay4_ip_type = carbon_ip_addr_type_instance.GetIPTypeCarbonFourME(ip, api, auth, name)
                if carbon_bay4_ip_type == "Ipv4Dhcp":
                    result = "Pass"
                    PassOrFail(result, tc)
                elif carbon_bay4_ip_type == "Ipv4Static":
                    result = "Fail"
                    PassOrFail(result, tc)
                elif carbon_bay1_ip_type == "None":
                    result = "Fail"
                    PassOrFail(result, tc)

class GetEthernetAddressType(object):

    def GetEthernetIPAddressType(self, ip, auth, api, addr_type, ether_type, icm_location, enc_name):
        logging.info("Inside function %s", sys._getframe().f_code.co_name)
        logging.info("Getting Enclosures ")
        get_addr_type = GetCarbonIp()
        if ether_type == 'potash':
            if addr_type == "dhcp":
                logging.info("Getting the ip type of Potash")
                tc = "Potash has dhcp ip IPv4 address"
                potash_ip_type = get_addr_type.GetIPTypePotash(ip, api, auth, enc_name, icm_location)
                logging.info("{}".format(potash_ip_type))
                if potash_ip_type == "Ipv4Dhcp":
                    result = "Pass"
                    PassOrFail(result, tc)
                elif potash_ip_type == "Ipv4Static":
                    result = "Fail"
                    PassOrFail(result, tc)
                elif potash_ip_type == "None":
                    result = "Fail"
                    PassOrFail(result, tc)
            elif addr_type == "static":
                logging.info("Getting the ip type of Potash")
                tc = "Potash has static ip IPv4 address"
                potash_ip_type = get_addr_type.GetIPTypePotash(ip, api, auth, enc_name, icm_location)
                logging.info("{}".format(potash_ip_type))
                if potash_ip_type == "Ipv4Static":
                    result = "Pass"
                    PassOrFail(result, tc)
                elif potash_ip_type == "Ipv4Dhcp":
                    result = "Fail"
                    PassOrFail(result, tc)
                elif potash_ip_type == "None":
                    result = "Fail"
                    PassOrFail(result, tc)
        if ether_type == 'nitro':
            if addr_type == "dhcp":
                logging.info("Getting the ip type of Nitro")
                tc = "Nitro has dhcp ip IPv4 address"
                potash_ip_type = get_addr_type.GetIPTypeNitro(ip, api, auth, enc_name, icm_location)
                logging.info("{}".format(potash_ip_type))
                if potash_ip_type == "Ipv4Dhcp":
                    result = "Pass"
                    PassOrFail(result, tc)
                elif potash_ip_type == "Ipv4Static":
                    result = "Fail"
                    PassOrFail(result, tc)
                elif potash_ip_type == "None":
                    result = "Fail"
                    PassOrFail(result, tc)
            elif addr_type == "static":
                logging.info("Getting the ip type of Nitro")
                tc = "Nitro has static ip IPv4 address"
                potash_ip_type = get_addr_type.GetIPTypeNitro(ip, api, auth, enc_name, icm_location)
                logging.info("{}".format(potash_ip_type))
                if potash_ip_type == "Ipv4Static":
                    result = "Pass"
                    PassOrFail(result, tc)
                elif potash_ip_type == "Ipv4Dhcp":
                    result = "Fail"
                    PassOrFail(result, tc)
                elif potash_ip_type == "None":
                    result = "Fail"
                    PassOrFail(result, tc)


class IsResourceDeleted(object):

    def IsSPDeleted(self,ip,auth,api):
        GetSp = Servers()
        GetSpList = GetSp.ServerProfiles(ip, auth, api)
        count = GetSpList['count']
        if count == 0:
            return True
        else:
            return False
    
    def IsSPTDeleted(self,ip,auth,api):
        GetSpt = Servers()
        GetSptList = GetSpt.ServerProfilesTemplates(ip,auth,api)
        count = GetSptList['count']
        if count == 0:
            return True
        else:
            return False
    
    def IsEgDeleted(self,ip,auth,api):
        enc_instance = Enclosures()
        EncGrpDict = enc_instance.EncGroup(ip, auth, api)
        count = EncGrpDict['count']
        if count == 0:
            return True
        else:
            return False
    
    def IsLeDeleted(self,ip,auth,api):
        GetLE = LogicalEnclosure()
        LeList = GetLE.GetLogicalEnclosure(ip, auth, api)
        count = LeList['count']
        if count == 0:
            return True
        else:
            return False
    
    def IsLIGDeleted(self,ip,auth,api):
        Ligs = LogicalInterconnectGroup()
        ListOfLig = Ligs.GetListOfLIGs(ip, auth, api)
        count = ListOfLig['count']
        if count == 0:
            return True
        else:
            return False
    
    def IsFcNetDeleted(self,ip,auth,api):
        FcNetworks = Networks()
        FcNetworksList = FcNetworks.GetFcNetworks(ip, auth, api)
        count = FcNetworksList['count']
        if count == 0:
            return True
        else:
            return False
    
    def IsEthernetDeleted(self,ip,auth,api):
        EthNetworks = Networks()
        EthNetworksList = EthNetworks.GetEthernetNetworks(ip, auth, api)
        count = EthNetworksList['count']
        if count == 0:
            return True
        else:
            return False
    
    def IsFCoEDeleted(self,ip,auth,api):
        FCoENetworks = Networks()
        FCoENetworksList = FCoENetworks.GetFCoENetworks(ip, auth, api)
        count = FCoENetworksList['count']
        if count == 0:
            return True
        else:
            return False
    
    def IsNetworkSetDeleted(self, ip, auth, api):
        network_set_impl = NetworkSets()
        network_set_list = network_set_impl.GetNetworkSets(ip, auth, api)
        count = network_set_list['count']
        if count == 0:
            return True
        else:
            return False


def get_task(ip, auth, api, task_uri):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    url = "https://%s%s" %(ip, task_uri)
    
    headers = {
        'auth': auth,
        'x-api-version': api,
        'Content-Type': "application/json",
        }
    
    logging.debug("url: %s" % url)
    response = requests.request("GET", url, headers=headers, verify=False)
    ValidateResponse(response.status_code, response.reason, response.text)
    logging.debug(response.text)
    return(json.loads(response.text))

def get_backup_task(ip, auth, api, task_uri):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    url = "%s" %task_uri
    
    headers = {
        'auth': auth,
        'x-api-version': api,
        'Content-Type': "application/json",
        }
    
    logging.debug("url: %s" % url)
    response = requests.request("GET", url, headers=headers, verify=False)
    ValidateResponse(response.status_code, response.reason, response.text)
    logging.debug(response.text)
    return(json.loads(response.text))



def GetDDimageRepos():
    url = "http://ci-datastore.vse.rdlabs.hpecorp.net/nextgen/api/dd_imageresults/"
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    querystring = {"format":"json","limit":"100","offset":"100"}
    headers = {
        'content-type': "application/json"
        }
    response = requests.request("GET", url, headers=headers, params=querystring, verify=False)
    ValidateResponse(response.status_code, response.reason, response.text)
    logging.debug(response.text)    
    return(json.loads(response.text))


def PassOrFail(result, tc):
    if result == "Pass":
        logging.testcases("%s:  PASS" %tc)
    elif result == "Fail":
        logging.testcases("%s:  FAIL" %tc)

def GetCarbonDownLinkPorts(ip, api, auth, enc_name):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    ic_inst = Interconnects()
    for name in enc_name:
        get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
        IcModelList = printDict(get_ic_dict, ['model'])
        IcPortsList = printDict(get_ic_dict, ['ports'])
        PortListDict = []
        logging.info("Getting list of downlink ports that are online\n")
        for i in range(0, len(IcPortsList)):
            PortList = IcPortsList[i]['ports']
            model = IcModelList[i]['model']
            if model == "Virtual Connect SE 16Gb FC Module for Synergy":
                for p in range(0, len(PortList)):
                    IcPortStatusReason = PortList[p]['portStatusReason']
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortLocal = PortList[p]['interconnectName']
                    if IcPortStatusReason == "LoggedIn" and PortType == "Downlink":
                        PortListDict.append(IcPortStatusReason)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with downlink port %s" %(PortLocal,portName))
            elif model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                for p in range(0, len(PortList)):
                    IcPortStatusReason = PortList[p]['portStatusReason']
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortLocal = PortList[p]['interconnectName']
                    if IcPortStatusReason == "LoggedIn" and PortType == "Downlink":
                        PortListDict.append(IcPortStatusReason)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with downlink port %s" %(PortLocal,portName))
            elif model == "Virtual Connect SE 32Gb FC Module for Synergy":
                for p in range(0, len(PortList)):
                    IcPortStatusReason = PortList[p]['portStatusReason']
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortLocal = PortList[p]['interconnectName']
                    if IcPortStatusReason == "LoggedIn" and PortType == "Downlink":
                        PortListDict.append(IcPortStatusReason)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with downlink port %s" %(PortLocal,portName))
            elif model == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                for p in range(0, len(PortList)):
                    IcPortStatusReason = PortList[p]['portStatusReason']
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortLocal = PortList[p]['interconnectName']
                    if IcPortStatusReason == "LoggedIn" and PortType == "Downlink":
                        PortListDict.append(IcPortStatusReason)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with downlink port %s" %(PortLocal,portName))
    return PortListDict


def GetPotashDownLinkPorts(ip, api, auth, enc_name):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    ic_inst = Interconnects()
    for name in enc_name:
        get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
        IcModelList = printDict(get_ic_dict, ['model'])
        IcPortsList = printDict(get_ic_dict, ['ports'])
        PortListDict = []
        logging.info("Getting list of downlink ports that are online\n")
        for i in range(0, len(IcPortsList)):
            PortList = IcPortsList[i]['ports']
            model = IcModelList[i]['model']
            if model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                for p in range(0, len(PortList)):
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortStatus = PortList[p]['portStatus']
                    PortLocal = PortList[p]['interconnectName']
                    if PortStatus == "Linked" and PortType == "Downlink":
                        PortListDict.append(PortStatus)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with uplink port %s" %(PortLocal, portName))
    return PortListDict


def GetNitroDownLinkPorts(ip, api, auth, enc_name):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    ic_inst = Interconnects()
    for name in enc_name:
        get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
        IcModelList = printDict(get_ic_dict, ['model'])
        IcPortsList = printDict(get_ic_dict, ['ports'])
        PortListDict = []
        logging.info("Getting list of downlink ports that are online\n")
        for i in range(0, len(IcPortsList)):
            PortList = IcPortsList[i]['ports']
            model = IcModelList[i]['model']
            if model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                for p in range(0, len(PortList)):
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortStatus = PortList[p]['portStatus']
                    PortLocal = PortList[p]['interconnectName']
                    if PortStatus == "Linked" and PortType == "Downlink":
                        PortListDict.append(PortStatus)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with uplink port %s" %(PortLocal, portName))
    return PortListDict



def GetCarbonUpLinkPorts(ip, api, auth, enc_name):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    ic_inst = Interconnects()
    for name in enc_name:
        get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
        IcModelList = printDict(get_ic_dict, ['model'])
        IcPortsList = printDict(get_ic_dict, ['ports'])
        PortListDict = []
        logging.info("Getting list of uplink ports that are online\n")
        for i in range(0, len(IcPortsList)):
            PortList = IcPortsList[i]['ports']
            model = IcModelList[i]['model']
            if model == "Virtual Connect SE 16Gb FC Module for Synergy":
                for p in range(0, len(PortList)):
                    IcPortStatusReason = PortList[p]['portStatusReason']
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortLocal = PortList[p]['interconnectName']
                    if IcPortStatusReason == "LoggedIn" and PortType == "Uplink":
                        PortListDict.append(IcPortStatusReason)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with uplink port %s" %(PortLocal,portName))
            elif model == "Virtual Connect SE 16Gb FC TAA Module for Synergy":
                for p in range(0, len(PortList)):
                    IcPortStatusReason = PortList[p]['portStatusReason']
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortLocal = PortList[p]['interconnectName']
                    if IcPortStatusReason == "LoggedIn" and PortType == "Uplink":
                        PortListDict.append(IcPortStatusReason)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with uplink port %s" %(PortLocal,portName))
            elif model == "Virtual Connect SE 32Gb FC Module for Synergy":
                for p in range(0, len(PortList)):
                    IcPortStatusReason = PortList[p]['portStatusReason']
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortLocal = PortList[p]['interconnectName']
                    if IcPortStatusReason == "LoggedIn" and PortType == "Uplink":
                        PortListDict.append(IcPortStatusReason)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with uplink port %s" %(PortLocal,portName))
            elif model == "HPE Virtual Connect SE 16Gb FC Module for HPE Synergy":
                for p in range(0, len(PortList)):
                    IcPortStatusReason = PortList[p]['portStatusReason']
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortLocal = PortList[p]['interconnectName']
                    if IcPortStatusReason == "LoggedIn" and PortType == "Uplink":
                        PortListDict.append(IcPortStatusReason)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with uplink port %s" %(PortLocal,portName))
    return PortListDict

def GetPotashUpLinkPorts(ip, api, auth, enc_name):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    ic_inst = Interconnects()
    for name in enc_name:
        get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
        IcModelList = printDict(get_ic_dict, ['model'])
        IcPortsList = printDict(get_ic_dict, ['ports'])
        PortListDict = []
        logging.info("Getting list of uplink ports that are online\n")
        for i in range(0, len(IcPortsList)):
            PortList = IcPortsList[i]['ports']
            model = IcModelList[i]['model']
            if model == "Virtual Connect SE 40Gb F8 Module for Synergy":
                for p in range(0, len(PortList)):
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortStatus = PortList[p]['portStatus']
                    PortLocal = PortList[p]['interconnectName']
                    if PortStatus == "Linked" and PortType == "Uplink":
                        PortListDict.append(PortStatus)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with uplink port %s" %(PortLocal, portName))

    return PortListDict


def GetNitroUpLinkPorts(ip, api, auth, enc_name):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    ic_inst = Interconnects()
    for name in enc_name:
        get_ic_dict = ic_inst.GetInterconnectMultiEnc(ip, auth, api, name)
        IcModelList = printDict(get_ic_dict, ['model'])
        IcPortsList = printDict(get_ic_dict, ['ports'])
        PortListDict = []
        logging.info("Getting list of uplink ports that are online\n")
        for i in range(0, len(IcPortsList)):
            PortList = IcPortsList[i]['ports']
            model = IcModelList[i]['model']
            if model == "Virtual Connect SE 100Gb F32 Module for Synergy":
                for p in range(0, len(PortList)):
                    portName = PortList[p]['portName']
                    PortType = PortList[p]['portType']
                    PortStatus = PortList[p]['portStatus']
                    PortLocal = PortList[p]['interconnectName']
                    if PortStatus == "Linked" and PortType == "Uplink":
                        PortListDict.append(PortStatus)
                        PortListDict.append(PortType)
                        PortListDict.append(portName)
                        PortListDict.append(PortLocal)
                        logging.info("The ICM in %s with uplink port %s" %(PortLocal, portName))

    return PortListDict

def GetStatusOfLogicalEnclosure(ip, auth, api):
    state = ""
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    GetLE = LogicalEnclosure()
    Resource = IsResourceDeleted()
    LeList = GetLE.GetLogicalEnclosure(ip, auth, api)
    LeState = printDict(LeList, ['state'])
    logging.info("Getting Logical Enclosure")
    LEuri = printDict(LeList, ['uri'])
    try:
        LE_uri = LEuri[0]['uri']
    except IndexError:
        logging.info("Unable to retrieve the state of the LE\n")
        logging.info("The LE has been deleted\n")
    try:
        state = LeState[0]['state']
    except IndexError:
        logging.info("Unable to retrieve the state of the LE\n")
        logging.info("The LE has been deleted\n")

    if state == "Consistent":
        logging.info ("The state of LE is consistent.  Moving on.")
        return state
    elif state == "Deleting":
        logging.info ("Looks like LE is being deleted.  Will check in 3mins to see if the LE was deleted.")
        countdown(180)
        count = 0
        while state == "Deleting":
            logging.info("Checking the state of the LE")
            LeList = GetLE.GetLogicalEnclosure(ip, auth, api)
            LeState = printDict(LeList, ['state'])
            try:
                state = LeState[0]['state']
            except IndexError:
                logging.info("Unable to retrieve the state of the LE")
                logging.info("The LE has been deleted")
                return state
            if state == "":
                logging.info("Looks like the LE has been deleted.  Moving on.")
            elif state == "Deleting":
                logging.warning("LE is still not deleted. Will check again 5 minute")
                countdown(300)
            count += 1
            if count == 30:
                logging.error("Something must be wrong, quiting script")
                sys.exit(0)
    elif state == "Creating":
        logging.warning("Looks like LE is being created.  Will check again in 30 secs.")
        countdown(30)
        count = 0
        while state == "Creating":
            logging.info("Checking the state of the LE")
            LeList = GetLE.GetLogicalEnclosure(ip, auth, api)
            LeState = printDict(LeList, ['state'])
            state = LeState[0]['state']
            if state == "Consistent":
                logging.info("The LE is in consistent state")
                continue
            elif state == "Creating":
                logging.info("Looks like the LE is still being created. Will check again 1 minute")
                countdown(60)
            count += 1
            if count == 25:
                logging.error("Something must be wrong, quiting script")
                sys.exit(0)
    elif state == "Inconsistent":
        logging.warning("Looks like the LE is in an inconsistent state.  Will attempt to update from group.")
        logging.info("Retrieving Logical Enclosure uri")
        LeList = GetLE.GetLogicalEnclosure(ip, auth, api)
        le_list_uri = printDict(LeList, ['uri'])
        le_uri = le_list_uri[0]['uri']
        logging.info("Updating LE from group.")
        UpdateLe = UpdateLogicalEnclosure()
        UpdateLe.LeUpdateFromGroup(ip,auth,api,le_uri)
        countdown(360)
        logging.info("Checking the status of the LE")
        while state == "Updating":
            logging.info("Checking the state of the LE")
            LeList = GetLE.GetLogicalEnclosure(ip, auth, api)
            LeState = printDict(LeList, ['state'])
            state = LeState[0]['state']
            if state == "Consistent":
                logging.info("The LE is in consistent state\n")
                continue
            elif state == "Updating":
                logging.warning("Looks like the LE is still being updated. Will check again 30 secs")
                countdown(30)
            count += 1
            if count == 25:
                logging.error("Something must be wrong, quiting script")
                sys.exit(0)
    elif state == "DeleteFailed":
        logging.error("The LE failed to get deleted")
        logging.info("Deleting the LE again using 'Force Deletion'")
        DeleteLeForce(ip,auth,api,LE_uri)
        countdown(300)
        logging.info("Checking if LE has been deleted")
        status = Resource.IsLeDeleted(ip, auth, api)
        if status is True:
            logging.info("LE is Deleted")
            return state
        elif status is False:
            logging.error("The LE failed to get deleted")
            logging.info("Deleting the LE again using 'Force Deletion'")
            DeleteLeForce(ip,auth,api,LE_uri)
            logging.info("Pausing 5 mins for the LE to be deleted")
            countdown(300)
            status = Resource.IsLeDeleted(ip, auth, api)
            if status is True:
                logging.info("LE is Deleted")
            elif status is False:
                logging.error("It seems the LE could not be deleted, quiting script\n")
                sys.exit(0)
    elif state == "Updating":
        logging.info ("\nLooks like LE is being updated.  Will check again in 1 min.")
        countdown(60)
        count = 0
        while state == "Updating":
            logging.info("Checking the state of the LE")
            LeList = GetLE.GetLogicalEnclosure(ip, auth, api)
            LeState = printDict(LeList, ['state'])
            state = LeState[0]['state']
            if state == "Consistent":
                logging.info("\nThe LE is in consistent state")
                return state
            elif state == "Updating":
                logging.warning("\nLooks like the LE is still being updated. Will check again 2min")
                countdown(120)
            count += 1
            if count == 25:
                logging.error("\nSomething must be wrong, quiting script")
                sys.exit(0)
                
    else:
        pass


def GetSPStatus(ip, auth, api):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    server_hw_profiles_inst = Servers()
    ServerProfileList = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
    ServerProfileUri = printDict(ServerProfileList, ['uri'])
    ServerProfileNames = printDict(ServerProfileList, ['name'])
    for sp in range(0, len(ServerProfileUri)):
        ServerProfileList = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
        ServerProfileState = printDict(ServerProfileList, ['state'])
        SPstate = ServerProfileState[sp]['state']
        name = ServerProfileNames[sp]['name']
        if SPstate == "Creating":
            logging.info("The state of profile %s is %s\n" %(name, SPstate))
            logging.info ("Looks like Server Profiles are being created.  Will check again in 1 mins.")
            countdown(60)
            count = 0
            while SPstate == "Creating":
                ServerProfileList = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
                ServerProfileState = printDict(ServerProfileList, ['state'])
                SPstate = ServerProfileState[sp]['state']
                if SPstate == "Normal":
                    logging.info("The server profile are in normal state")
                elif SPstate == "Creating":
                    logging.info("Looks like the server profiles are still being created. Will check again 1 minute.")
                    countdown(60)
                count += 1
                if count == 30:
                    logging.error("\nSomething must be wrong, quiting script\n")
                    sys.exit(0)
        elif SPstate == "Updating":
            logging.info("The state of profile %s is %s\n" %(name, SPstate))
            logging.info ("Looks like Server Profiles are being updated.  Will check again in 1 mins.")
            countdown(60)
            count = 0
            while SPstate == "Updating":
                ServerProfileList = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
                ServerProfileState = printDict(ServerProfileList, ['state'])
                SPstate = ServerProfileState[sp]['state']
                if SPstate == "Normal":
                    logging.info("The server profile are in normal state")
                elif SPstate == "Updating":
                    logging.info("Looks like the server profiles are still being updated. Will check again 1 minute")
                    countdown(60)
                count += 1
                if count == 30:
                    logging.error("Something must be wrong, quiting script")
                    sys.exit(0)
        elif SPstate == "Deleting":
            logging.info("The state of profile %s is %s\n" %(name, SPstate))
            logging.info ("Looks like the server profiles are stil being deleted.  Will check in 30 secs to see if the server profiles have been deleted.")
            countdown(30)
            count = 0
            while SPstate == "Deleting":
                ServerProfileList = server_hw_profiles_inst.ServerProfiles(ip, auth, api)
                ServerProfileState = printDict(ServerProfileList, ['state'])
                try:
                    SPstate = ServerProfileState[sp]['state']
                except IndexError as e:
                    logging.info (e)
                if SPstate == "Deleting":
                    logging.info("Server profiles have still not deleted. Will check again 3 minute")
                    countdown(180)
                    Resource = IsResourceDeleted()
                    status = Resource.IsSPDeleted(ip, auth, api)
                    if status == True:
                        logging.info("Server Profiles have been Deleted")
                        break
                    elif status == False:
                        logging.info("Server Profiles have not been deleted")
                else:
                    pass
                count += 1
                if count == 30:
                    logging.error("Something must be wrong, quiting script")
                    sys.exit(0)
        elif SPstate == "DeleteFailed":
            logging.error("One or more server profiles failed to delete, quiting script")
            sys.exit(0)
        elif SPstate == "CreateFailed":
            logging.error("One or more server profiles failed to create.")
        elif SPstate == "Normal":
            logging.info("The state of server profile %s is %s\n" %(name,SPstate))
            
    try:
        return SPstate
    except UnboundLocalError:
        logging.info("No server profiles")


def GetSPTStatus(ip, auth, api):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    server_hw_profile_template_instance = Servers()
    server_profile_template_list = server_hw_profile_template_instance.ServerProfilesTemplates(ip, auth, api)
    server_profile_template_uri = printDict(server_profile_template_list, ['uri'])
    ServerProfileNames = printDict(server_profile_template_list, ['name'])
    for spt in range(0, len(server_profile_template_uri)):
        server_profile_template_list = server_hw_profile_template_instance.ServerProfilesTemplates(ip, auth, api)
        server_profile_template_state = printDict(server_profile_template_list, ['state'])
        SPT_state = server_profile_template_state[spt]['state']
        spt_name = ServerProfileNames[spt]['name']
        if SPT_state == "Creating":
            logging.info("The state of profile template %s is %s\n" %(spt_name, SPT_state))
            logging.info ("Looks like Server Profiles are being created.  Will check again in 1 mins.")
            countdown(60)
            count = 0
            while SPT_state == "Creating":
                server_profile_template_list = server_hw_profile_template_instance.ServerProfilesTemplates(ip, auth, api)
                server_profile_template_state = printDict(server_profile_template_list, ['state'])
                SPT_state = server_profile_template_state[spt]['state']
                if SPT_state == "Normal":
                    logging.info("The server profile template are in normal state")
                elif SPT_state == "Creating":
                    logging.info("Looks like the server profile templates are still being created. Will check again 1 minute.")
                    countdown(60)
                count += 1
                if count == 30:
                    logging.error("\nSomething must be wrong, quiting script\n")
                    sys.exit(0)
        elif SPT_state == "Updating":
            logging.info("The state of profile template %s is %s\n" %(spt_name, SPT_state))
            logging.info ("Looks like Server Profiles are being updated.  Will check again in 1 mins.")
            countdown(60)
            count = 0
            while SPT_state == "Updating":
                server_profile_template_list = server_hw_profile_template_instance.ServerProfilesTemplates(ip, auth, api)
                server_profile_template_state = printDict(server_profile_template_list, ['state'])
                SPT_state = server_profile_template_state[spt]['state']
                if SPT_state == "Normal":
                    logging.info("The server profile template are in normal state")
                elif SPT_state == "Updating":
                    logging.info("Looks like the server profile templates are still being updated. Will check again 1 minute")
                    countdown(60)
                count += 1
                if count == 30:
                    logging.error("Something must be wrong, quiting script")
                    sys.exit(0)
        elif SPT_state == "Deleting":
            logging.info("The state of profile template %s is %s\n" %(spt_name, SPT_state))
            logging.info ("Looks like the server profile templates are stil being deleted.  Will check in 30 secs to see if the server profile templates have been deleted.")
            countdown(30)
            count = 0
            while SPT_state == "Deleting":
                server_profile_template_list = server_hw_profile_template_instance.ServerProfilesTemplates(ip, auth, api)
                server_profile_template_state = printDict(server_profile_template_list, ['state'])
                try:
                    SPT_state = server_profile_template_state[spt]['state']
                except IndexError as e:
                    logging.info (e)
                if SPT_state == "Deleting":
                    logging.info("Server profile templates have still not deleted. Will check again 3 minute")
                    countdown(180)
                    Resource = IsResourceDeleted()
                    status = Resource.IsSPDeleted(ip, auth, api)
                    if status == True:
                        logging.info("Server Profiles have been Deleted")
                        break
                    elif status == False:
                        logging.info("Server Profiles have not been deleted")
                else:
                    pass
                count += 1
                if count == 30:
                    logging.error("Something must be wrong, quiting script")
                    sys.exit(0)
        elif SPT_state == "DeleteFailed":
            logging.error("One or more server profile templates failed to delete, quiting script")
            sys.exit(0)
        elif SPT_state == "CreateFailed":
            logging.error("One or more server profile templates failed to create.")
        elif SPT_state == "Normal":
            logging.info("The state of server profile template %s is %s\n" %(spt_name,SPT_state))
            
    try:
        return SPT_state
    except UnboundLocalError:
        logging.info("No server profile templates")


def ValidateResponse(status_code, reason, text):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    logging.debug("status_code = %i: OK", status_code)
    if status_code > 299:
        logging.debug("status_code > 299")
        if status_code == 400:
            logging.warning("%i: %s", status_code, reason)
            logging.warning(text)
            if text.find('Please retry this operation later.', 0) > 0:
                logging.warning("Sleeping for 30 seconds to allow OneView time to catch up!")
                countdown(60)
                return False
            logging.warning("Non fatal error, continuing...")
            time.sleep(3)
        else:  
            logging.error("%i: %s", status_code, reason)
            logging.error(text)
            logging.error("Exiting...")
            exit(1)
    return True


def printDict(myDict, keys):
    myDictList = []
    myValues = []
    for x in range(0, len(myDict['members'])):
        for key in keys:
            myValues.append(myDict['members'][x][key])
        myDictList.append(dict(list(zip(keys, myValues))))
        myValues = []
    return(myDictList)


def countdown(m):
    
    while m:
        mins, secs = divmod(m, 60)
        timer = '{:02d}:{:02d}'.format(mins, secs)
        print(timer, end="\r")
        time.sleep(1)
        m -= 1
      
    print('Times up, moving on!')


def synergy_hw_discovery(ip, user, cim_pw):
    cmd = 'curl -k -X POST -H "X-API-Version:600" https://localhost/rest/appliance/tech-setup'
    sshclient(ip, user, cim_pw, cmd)



def sshclient(ip, user, cim_pw, cmd):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(ip, username = user, password= cim_pw, port=22)

    (stdin, stdout, stderr) = ssh.exec_command(cmd)
    
    output = stdout.read()
    #logging.debug(output)
    ssh.close()
    return output

def sshclient_long_wait(ip, user, cim_pw, cmd):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(ip, username = user, password= cim_pw, port=22)

    (stdin, stdout, stderr) = ssh.exec_command(cmd)
    
    output = stdout.read()
    logging.info("Waiting 60 mins for DD image to download and install")
    countdown(3600)
    ssh.close()
    return output

def sshclientCarbon(ip, user, cim_pw, cmd):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    s = paramiko.SSHClient()
    s.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    s.connect(ip, username = user, password= cim_pw, port=22)
    
    (stdin, stdout, stderr) = s.exec_command(cmd)
    
    output = stdout.read()
    logging.debug(output)
    s.close()
    return output


def CopyCanmicME(ip, user, cim_pw):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(ip, username=user, password=cim_pw)
    ftp = ssh.open_sftp()
    ftp.put('readMECanmic.sh', '/root/readMECanmic.sh')
    ftp.put('writeMECanmic.sh', '/root/writeMECanmic.sh')
    ftp.put('em_cli.py', '/root/em_cli.py')
    ftp.close()


def copy_file(ip, user, cim_pw):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(ip, username=user, password=cim_pw)
    ftp = ssh.open_sftp()
    ftp.put('c:\\Drivers\\wget-3.2.zip', '/root/wget-3.2.zip')
    ftp.close()



def CopyCanmic(ip, user, cim_pw):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(ip, username=user, password=cim_pw)
    ftp = ssh.open_sftp()
    ftp.put('readCanmic.sh', '/root/readCanmic.sh')
    ftp.put('writeCanmic.sh', '/root/writeCanmic.sh')
    ftp.close()


def CopyEfuseScript(ip, user, cim_pw):
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(ip, username=user, password=cim_pw)
    ftp = ssh.open_sftp()
    ftp.put('em_cim_cli.py', '/root/em_cim_cli.py')
    ftp.close()


def create_log_file(filename, level=logging.DEBUG):
    TimeStamp = time.strftime("%Y%m%d_%H%M%S")
    handler = logging.FileHandler(filename)
    handler.setLevel(level)
    formatter = logging.Formatter('%(asctime)s %(levelname)s:%(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
    handler.setFormatter(formatter)
    logging.getLogger('').addHandler(handler)


def setup_logging():
    #Set up logging
    logging.getLogger('').setLevel(logging.DEBUG)
    TimeStamp = time.strftime("%Y%m%d_%H%M%S")
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    # set a format which is simpler for console use
    formatter = logging.Formatter('%(levelname)-8s %(message)s')
    # tell the handler to use this format
    console.setFormatter(formatter)
    # add the handler to the root logger
    logging.getLogger('').addHandler(console)
    #open up a few files for logging at different levels
    create_log_file('logs/' + TimeStamp + '_DEBUG.log', logging.DEBUG)
    create_log_file('logs/' + TimeStamp + '_INFO.log', logging.INFO)
    create_log_file('logs/' + TimeStamp + '_WARNING.log', logging.WARNING)
    create_log_file('logs/' + TimeStamp + '_ERROR.log', logging.ERROR)
    create_log_file('logs/' + TimeStamp + '_CRITICAL.log', logging.CRITICAL)
    create_log_file('logs/' + TimeStamp + '_TESTCASES.log', logging.TESTCASES)
    #logging.basicConfig() 
    requests_log = logging.getLogger("requests.packages.urllib3")
    requests_log.setLevel(logging.DEBUG)
    requests_log.propagate = True


def setup_logging_Enhanced(file, enc="Default"):
    #Set up logging
    #components = ('_' + enc + '_' + version + '_' + carbon_fw)
    components = ('_' + enc + '_' + file)
    logging.getLogger('').setLevel(logging.DEBUG)
    TimeStamp = time.strftime("%Y%m%d_%H%M%S")
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    # set a format which is simpler for console use
    formatter = logging.Formatter('%(levelname)-8s %(message)s')
    # tell the handler to use this format
    console.setFormatter(formatter)
    # add the handler to the root logger
    logging.getLogger('').addHandler(console)
    #open up a few files for logging at different levels
    create_log_file('logs/' + TimeStamp + components + '_DEBUG.log', logging.DEBUG)
    create_log_file('logs/' + TimeStamp + components + '_INFO.log', logging.INFO)
    create_log_file('logs/' + TimeStamp + components + '_WARNING.log', logging.WARNING)
    create_log_file('logs/' + TimeStamp + components + '_ERROR.log', logging.ERROR)
    #create_log_file('logs/' + TimeStamp + components + '_CRITICAL.log', logging.CRITICAL)
    create_log_file('logs/' + TimeStamp + components + '_TESTCASES.log', logging.TESTCASES)
    #logging.basicConfig() 
    requests_log = logging.getLogger("requests.packages.urllib3")
    requests_log.setLevel(logging.DEBUG)
    requests_log.propagate = True


def setup_logging_Enhanced_new(enc, file, version, carbon_fw):
    #Set up logging
    components = ('_' + enc + '_' + file + '_' + version + '_' + carbon_fw)
    #components = ('_' + enc + '_' + file)
    logging.getLogger('').setLevel(logging.DEBUG)
    TimeStamp = time.strftime("%Y%m%d_%H%M%S")
    # define a Handler which writes INFO messages or higher to the sys.stderr
    console = logging.StreamHandler()
    console.setLevel(logging.INFO)
    # set a format which is simpler for console use
    formatter = logging.Formatter('%(levelname)-8s %(message)s')
    # tell the handler to use this format
    console.setFormatter(formatter)
    # add the handler to the root logger
    logging.getLogger('').addHandler(console)
    #open up a few files for logging at different levels
    create_log_file('logs/' + TimeStamp + components + '_DEBUG.log', logging.DEBUG)
    create_log_file('logs/' + TimeStamp + components + '_INFO.log', logging.INFO)
    create_log_file('logs/' + TimeStamp + components + '_WARNING.log', logging.WARNING)
    create_log_file('logs/' + TimeStamp + components + '_ERROR.log', logging.ERROR)
    create_log_file('logs/' + TimeStamp + components + '_CRITICAL.log', logging.CRITICAL)
    create_log_file('logs/' + TimeStamp + components + '_TESTCASES.log', logging.TESTCASES)
    #logging.basicConfig() 
    requests_log = logging.getLogger("requests.packages.urllib3")
    requests_log.setLevel(logging.DEBUG)
    requests_log.propagate = True


def clear_https_proxies():
    logging.info("Clearing https proxy environment variables (if set)")
    https_proxies = ['https_proxy', 'HTTPS_PROXY']
    for https_proxy in https_proxies:
        if https_proxy in os.environ:
            logging.info("Clear os.environ['%s']" % https_proxy)
            os.environ[https_proxy] = ''
        else:
            logging.info("os.environ['%s'] is NOT set" % https_proxy)


def set_https_proxies():
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    logging.info("Setting https proxy environment variables")
    os.environ['https_proxy'] = 'https://web-proxy.austin.hpecorp.net:8080'
    os.environ['http_proxy'] = 'http://web-proxy.austin.hpecorp.net:8080'
    logging.info(os.environ['https_proxy'])
    logging.info(os.environ['http_proxy'])


def set_https_proxies_houston():
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    logging.info("Setting https proxy environment variables")
    os.environ['https_proxy'] = 'http://proxy.houston.hpecorp.net:8080'
    os.environ['http_proxy'] = 'http://proxy.houston.hpecorp.net:8080'
    logging.info(os.environ['https_proxy'])
    logging.info(os.environ['http_proxy'])


def set_https_proxies_pa():
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    logging.info("Setting https proxy environment variables")
    os.environ['https_proxy'] = 'https://web-proxy.corp.hpecorp.net:8088'
    os.environ['http_proxy'] = 'http://web-proxy.corp.hpecorp.net:8088'
    logging.info(os.environ['https_proxy'])
    logging.info(os.environ['http_proxy'])


def get_eagle_enclosure_map(ip):
    #ip to eagle name map
    eagle_to_enclosure_dict = {
        '15.186.9.20': 'Eagle20',
        '15.186.9.21': 'Eagle21',
        '15.186.9.28': 'Eagle28',
        '15.186.9.30': 'Eagle30',
        '15.186.9.31': 'Eagle31',
        '15.186.9.32': 'Eagle32',
        '15.186.9.40': 'Eagle40',
        '15.186.9.76': 'Eagle76',
        '15.186.9.77': 'Eagle77',
        '15.186.9.78': 'Eagle78',
        '15.186.9.13': 'Eagle13',
        '15.186.9.14': 'Eagle14',
        '15.186.9.86': 'Eagle86',
        '15.186.9.136': 'Eagle136',
        '15.186.9.50': 'Eagle50',
        '15.186.9.35': 'Eagle35',
        '15.186.9.119': 'Eagle119',
        '15.186.9.3': 'Eagle3',
        '15.186.9.152': 'Eagle152',
        '15.186.9.155': 'Eagle155',
        '15.186.9.11': 'Eagle11',
        '15.186.9.157': 'Eagle157',
        '15.186.9.123': 'Eagle123',
        '15.186.9.159': 'Eagle159',
        '15.186.9.131': 'Eagle131',
        '15.186.9.146': 'Eagle146',
        '15.245.131.222': 'Nitro_Potash_mix_OVF9549',
        '15.186.9.71': 'Eagle71'
        }
    if ip in eagle_to_enclosure_dict:
        eagle = eagle_to_enclosure_dict[ip]
    elif ip not in eagle_to_enclosure_dict:
        eagle = 'Default_Eagle'
    else:
        logging.info("You need to specify ip address or update eagle_enclosure map function with new ip address")
        sys.exit(0)
    return eagle


def DeleteLeForce(ip, auth, api, LE_uri):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    url = "https://%s%s" %(ip,LE_uri)

    querystring = {"force":"true"}
    
    headers = {
        'auth': auth,
        'x-api-version': api,
        }
    logging.debug("url: %s" % url)    
    response = requests.request("DELETE", url, headers=headers, params=querystring, verify=False)
    ValidateResponse(response.status_code, response.reason, response.text)
    logging.debug(response.text)    
    return


def UpdateCarbonFw(ip, user, CarbonPw, fw):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(ip, username = user, password= CarbonPw, port=22)
    chan = ssh.invoke_shell()
    countdown(5)
    buff = ''
    logging.info("Sending 1 line command to initiate fw update")
    chan.send('firmwaredownload -p scp 15.186.12.12,fwfc,carbon/fos_v8.2.0_cbn3_dev/%s,carbon123\n' %fw)
    countdown(7)
    while "Do you want to continue (Y/N) [Y]: " not in buff:
        if chan.recv_ready():
            resp = str(chan.recv(9999))
            buff += resp
    chan.send('y\n')
    logging.info("Answering yes to continue with update")
    countdown(5)
    ssh.close()

def get_tor_ip(ip):
    if ip == "15.186.9.21":
        tor_ip = "15.186.4.32"
        return tor_ip
    if ip == "15.186.9.20":
        tor_ip = "15.186.4.32"
        return tor_ip
    elif ip == "15.186.9.28":
        tor_ip = "15.186.4.33"
        return tor_ip
    if ip == "172.16.0.8":
        tor_ip = "15.186.4.32"
        return tor_ip
    elif ip == "15.186.9.136":
        tor_ip = "15.186.4.43"
        return tor_ip
    elif ip == "15.186.9.155":
        tor_ip = "15.186.4.34"
        return tor_ip
    elif ip == "15.186.9.3":
        tor_ip = "15.186.4.36"
        return tor_ip
    elif ip == "15.186.9.13":
        tor_ip = "15.186.4.37"
        return tor_ip
    elif ip == "15.186.9.30":
        tor_ip = "15.186.4.41"
        return tor_ip
    elif ip == "15.186.9.31":
        tor_ip = "15.186.4.39"
        return tor_ip
    elif ip == "15.186.9.32":
        tor_ip = "15.186.4.41"
        return tor_ip
    else:
        logging.error("TOR ip does not exist")
        sys.exit(0)
    
def get_cim_pwd(ip):
    cim_pw = ip
    return cim_pw



def determine_num_iterations(number):
    numbers = list(range(0, 1000, 1))
    iterations = list(range(1, 1000, 1))
    my_dict = dict(list(zip(numbers, iterations)))
    for num, iteration in list(my_dict.items()):
        if num == number:
            return iteration
        else:
            pass

def untar_supportdump(file_name, eagle):
    logging.info("Inside function %s", sys._getframe().f_code.co_name)
    #Create folder under the C:\SupportDumps folder to extract the contents of the tarball.
    TimeStamp = time.strftime("%Y%m%d_%H%M%S")
    directory = (TimeStamp + '_' + eagle)
    parent_dir = "C:\\SupportDumps"
    path = os.path.join(parent_dir, directory)
    os.mkdir(path) 
    logging.info("Directory '% s' created" % directory)
    path_file = "C:\\SupportDumps\\%s" %file_name
    #remove the file ext .sdmp from filename
    tmp_file = path_file.split(".")
    new_file =  tmp_file[0]
    #create filename of the tar file that ends with -DECRYPTED.tar.gz that already exist in c:\SupportDumps
    new_file_name = (new_file +'-DECRYPTED.tar.gz')
    logging.info(new_file_name)
    #for loop to iterate thru the tarball of each folder/file
    my_tar = tarfile.open(new_file_name, 'r')
    filenames = my_tar.getnames()
    logging.info("Unpacking tarball to temp folder.")
    for file in filenames:
        if file == 'appliance/var/lib/corosync/ringid_fd84:4296:c66:0:32e1:71ff:fe68:ee0a':
            logging.info("skipping file")
        elif file == 'appliance/var/lib/corosync/ringid_fd84:4296:c66:0:1602:ecff:fe45:d72':
            logging.info("skipping file")
        elif file == 'appliance/var/lib/corosync/ringid_fd84:4296:c66:0:9eb6:54ff:fe97:2f9a':
            logging.info("skipping file")
        elif file == 'appliance/var/lib/corosync/ringid_fd84:4296:c66:0:32e1:71ff:fe68:7b42':
            logging.info("skipping file")
        elif file == 'appliance/var/lib/corosync/ringid_fd84:4296:c66:0:32e1:71ff:fe68:9faa':
            logging.info("skipping file")
        elif file == 'appliance/var/lib/corosync/ringid_fd84:4296:c66:0:b67a:f1ff:fe56:4dd2':
            logging.info("skipping file")
        elif file == 'appliance/var/lib/corosync/ringid_fd84:4296:c66:0:8230:e0ff:fe35:672':
            logging.info("skipping file")
        elif file == 'appliance/var/lib/corosync/ringid_fd84:4296:c66:0:b67a:f1ff:feb7:1bf2':
            logging.info("skipping file")
        elif file == 'appliance/var/lib/corosync/ringid_fd84:4296:c66:0:8230:e0ff:fe35:faf2':
            logging.info("skipping file")
        elif file == 'appliance/var/lib/corosync/ringid_fd84:4296:c66:0:8230:e0ff:fe35:5512':
            logging.info("skipping file")
        elif file == 'appliance/ci/logs/emupdate/fe80::9f42:e85d:2770:b64d.tar.gz':
            logging.info("skipping file")
        elif file == 'appliance/ci/logs/emupdate/fe80:0:0:0:63e7:f129:6f70:625a.tar.gz':
            logging.info("skipping file")
        elif file == 'appliance/ci/logs/emupdate/fe80::d234:4134:1d13:8bc2.tar.gz':
            logging.info("skipping file")
        elif file == 'appliance/ci/logs/emupdate/fe80:0:0:0:7018:b69e:1768:b01b.tar.gz':
            logging.info("skipping file")
        elif file == 'appliance/ci/logs/emupdate/fe80::22d0:2716:bac4:c950.tar.gz':
            logging.info("skipping file")
        elif file == 'appliance/ci/logs/emupdate/fe80::57f0:3f12:aff2:9ccc.tar.gz':
            logging.info("skipping file")
        elif file == 'appliance/ci/logs/emupdate/fe80:0:0:0:c93:e872:5efc:5949.tar.gz':
            logging.info("skipping file")
        elif file == 'appliance/ci/logs/emupdate/fe80:0:0:0:b274:b822:2452:b424.tar.gz':
            logging.info("skipping file")
        else:
            my_tar.extract(file, path)
    my_tar.close()



def get_ip_from_command_line():
    if len(sys.argv) < 2:
        print("ERROR: Please provide the ip address of the enclosure ")
        print('Usage: {} [ip address of enclosure] ' .format(sys.argv[0]))
        print("example: {} 15.186.9.21 " .format(sys.argv[0]))
        sys.exit(1)
    ip = sys.argv[1]
    return ip

def get_ov_build_version(ip, auth, api):
    get_build_inst = OneViewBuildVersion()
    version = get_build_inst.GetOVBuild(ip, auth, api)
    return version

def oneview_upgrade_check(before_reimage, after_reimage):
    if after_reimage == before_reimage:
        logging.info("Either the latest Oneview is installed or there was a problem downloading the latest DD image.  Will try again")
        sys.exit(0)
    elif after_reimage >=  before_reimage:
        logging.info("Reimage succeeded")
    elif after_reimage <=  before_reimage:
        logging.info("Looks like a downgrade occurred")

def get_filename():
    tmp_filename = (sys.argv[0])
    filename = tmp_filename.split(".")
    return(filename[0])



